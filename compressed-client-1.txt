=== Client Files (Part 1: Components, Services, Pages A-L, Root) ===
--- client/.eslintrc.cjs ---
module.exports = {root: true,;env: { browser: true, es2020: true, node: true },;extends: [;'eslint:recommended',;'plugin:react/recommended',;'plugin:react/jsx-runtime',;'plugin:react-hooks/recommended',;'plugin:@typescript-eslint/recommended';],;overrides: [{files: ['*.js', '*.cjs'],;rules: {'@typescript-eslint/no-var-requires': 'off',;},;},;],;ignorePatterns: ['dist', '.eslintrc.cjs', 'postcss.config.js'],;parser: '@typescript-eslint/parser',;parserOptions: {ecmaVersion: 'latest',;sourceType: 'module',;project: './tsconfig.json' // Already correct if tsconfig.json is in client/;},;settings: { react: { version: '19.0' } },;plugins: ['react-refresh', '@typescript-eslint'],;rules: {'react-refresh/only-export-components': [;'warn',;{ allowConstantExport: true };],;'react/prop-types': 'off',;'no-unused-vars': 'off',;'@typescript-eslint/no-unused-vars': ['warn'],;'no-console': 'off',;'@typescript-eslint/no-explicit-any': 'off'};}
--- client/backend-port.json ---
{"port":5000}
--- client/package.json ---
{"name": "top-chef-fantasy",;"private": true,;"version": "0.1.0",;"type": "module",;"scripts": {"dev": "vite",;"build": "vite build",;"preview": "vite preview",;"lint": "eslint ./src --ext js,jsx,ts,tsx --report-unused-disable-directives --max-warnings 0",;"predev": "node -e \"require('child_process').exec('kill-port 5173 5174', (err) => { if (err) console.log('Ports already free or error:', err); })\"";},;"dependencies": {"@heroicons/react": "^2.1.4",;"axios": "1.8.4",;"axios-retry": "^4.5.0",;"chart.js": "4.4.4",;"date-fns": "4.1.0",;"dotenv": "^16.4.7",;"firebase": "^11.5.0",;"react": "19.0.0",;"react-chartjs-2": "^5.2.0",;"react-dom": "19.0.0",;"react-router-dom": "7.4.0",;"socket.io-client": "^4.7.5";},;"devDependencies": {"@types/node": "^22.13.13",;"@types/react": "19.0.12",;"@types/react-dom": "19.0.4",;"@typescript-eslint/eslint-plugin": "^8.28.0",;"@typescript-eslint/parser": "^8.28.0",;"@vitejs/plugin-react": "^4.3.4",;"autoprefixer": "^10.4.21",;"eslint": "^8.57.1",;"eslint-plugin-react": "^7.37.4",;"eslint-plugin-react-hooks": "^4.6.2",;"eslint-plugin-react-refresh": "^0.4.5",;"kill-port": "^2.0.1",;"postcss": "^8.5.3",;"tailwindcss": "^3.4.17",;"ts-node": "^10.9.2",;"typescript": "^5.8.2",;"vite": "^6.2.3"}}
--- client/postcss.config.cjs ---
module.exports = {plugins: {tailwindcss: {},;autoprefixer: {},;},;}
--- client/src/App.tsx ---
import { Routes, Route } from 'react-router-dom';import { useAuth } from './hooks/useAuth';import ProtectedRoute from './components/auth/ProtectedRoute';import Login from './pages/Login';import Dashboard from './pages/Dashboard';function App() {const { isAuthenticated, loading } = useAuth();console.log('App render:', { isAuthenticated, loading });if (loading) {console.log('Rendering LoadingScreen');return <div>Loading...</div>; // Simplified loading state};return (;<Routes>;<Route path="/login" element={<Login />} />;<Route;path="/";element={<ProtectedRoute>;<Dashboard />;</ProtectedRoute>};/>;</Routes>;);};export default App
--- client/src/components/auth/ProtectedRoute.tsx ---
import { Navigate } from 'react-router-dom';import { useAuth } from '../../hooks/useAuth';interface ProtectedRouteProps {children: React.ReactNode;};const ProtectedRoute = ({ children }: ProtectedRouteProps) => {const { isAuthenticated, loading } = useAuth();console.log('ProtectedRoute:', { isAuthenticated, loading });if (loading) {return <div className="flex justify-center items-center h-screen">Loading...</div>;};if (!isAuthenticated) {console.log('Redirecting to login');return <Navigate to="/login" />;};return children;};export default ProtectedRoute
--- client/src/components/chat/ChatMessage.tsx ---
import { formatDistanceToNow } from 'date-fns';const ChatMessage = ({ message, isOwnMessage }) => {const formattedTime = message.createdAt;? formatDistanceToNow(new Date(message.createdAt), { addSuffix: true });: '';if (message.type === 'system') {return (;<div className="text-center text-xs text-gray-500 dark:text-gray-400 py-2">;{message.content};</div>;);};return (;<div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>;<div className="max-w-[75%]">;{/* Message bubble */};<div;className={`rounded-lg px-4 py-2 inline-block ${isOwnMessage;? 'bg-blue-500 text-white';: 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100';}`};>;{!isOwnMessage && (;<div className="font-medium text-xs mb-1">;{message.sender?.name || 'Unknown'};</div>;)};<div className="break-words">{message.content}</div>;</div>;{/* Timestamp */};<div className="text-xs text-gray-500 dark:text-gray-400 mt-1">;{formattedTime};</div>;</div>;{/* Avatar */};<div className="flex-shrink-0 ml-2">;{!isOwnMessage && (;<div className="w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center text-gray-700 dark:text-gray-300">;{message.sender?.name?.charAt(0) || '?'};</div>;)};</div>;</div>;);};export default ChatMessage
--- client/src/components/chat/ChatPanel.tsx ---
import { useState, useEffect, useRef } from 'react';import { useLeague } from '../../hooks/useLeague.jsx';import { useChat } from '../../hooks/useChat.jsx';import { useAuth } from '../../hooks/useAuth.jsx';import ChatMessage from './ChatMessage.jsx';const ChatPanel = ({ onClose }) => {const [message, setMessage] = useState('');const messagesEndRef = useRef(null);const inputRef = useRef(null);const { currentLeague } = useLeague();const { user } = useAuth();const {messages = [],;loading = false,;error = null,;typingUsers = [],;sendMessage = () => {},;sendTypingIndicator = () => {};} = useChat(currentLeague?._id);useEffect(() => {if (messagesEndRef.current) {messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });};}, [messages]);useEffect(() => {if (inputRef.current) {inputRef.current.focus();};}, []);const handleSendMessage = (e) => {e.preventDefault();if (message.trim() && currentLeague) {sendMessage(message.trim());setMessage('');};};const handleInputChange = (e) => {setMessage(e.target.value);sendTypingIndicator();};const handleClose = (e) => {onClose();};return (;<div className="h-full flex flex-col">;{/* Header */};<div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">;<h3 className="font-semibold text-gray-900 dark:text-white">League Chat</h3>;<button;onClick={handleClose};className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none";aria-label="Close chat";>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z";clipRule="evenodd";/>;</svg>;</button>;</div>;{/* Messages */};<div className="flex-1 overflow-y-auto p-4 space-y-4">;{loading ? (;<div className="flex justify-center items-center h-full">;<svg;className="animate-spin h-8 w-8 text-primary-600";xmlns="http://www.w3.org/2000/svg";fill="none";viewBox="0 0 24 24";>;<circle;className="opacity-25";cx="12";cy="12";r="10";stroke="currentColor";strokeWidth="4";/>;<path;className="opacity-75";fill="currentColor";d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z";/>;</svg>;</div>;) : error ? (;<div className="text-center text-red-500 dark:text-red-400">{error}</div>;) : (;<>;{messages.length === 0 ? (;<div className="text-center text-gray-500 dark:text-gray-400 py-8">;No messages yet. Start the conversation!;</div>;) : (;messages.map((msg) => (;<ChatMessage;key={msg._id};message={msg};isOwnMessage={msg.sender?._id === user?._id};/>;));)};{typingUsers.length > 0 && (;<div className="text-gray-500 dark:text-gray-400 text-sm">;{typingUsers.length === 1;? `${typingUsers[0].username} is typing...`;: `${typingUsers.length} people are typing...`};</div>;)};<div ref={messagesEndRef} />;</>;)};</div>;{/* Input */};<div className="p-4 border-t border-gray-200 dark:border-gray-700">;<form onSubmit={handleSendMessage} className="flex">;<input;ref={inputRef};type="text";className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white";placeholder="Type a message...";value={message};onChange={handleInputChange};disabled={!currentLeague};/>;<button;type="submit";className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-r-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed";disabled={!message.trim() || !currentLeague};aria-label="Send message";>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z";clipRule="evenodd";/>;</svg>;</button>;</form>;</div>;</div>;);};export default ChatPanel
--- client/src/components/FirebaseAuthTest.tsx ---
import React, { useState, useEffect } from 'react';import { getAuth, onAuthStateChanged } from 'firebase/auth';import api from '../services/api';const FirebaseAuthTest: React.FC = () => {const [authStatus, setAuthStatus] = useState<string>('Checking auth...');const [apiStatus, setApiStatus] = useState<string>('Not tested');const [error, setError] = useState<string | null>(null);useEffect(() => {const auth = getAuth();const unsubscribe = onAuthStateChanged(auth, async (user) => {if (user) {try {const token = await user.getIdToken();setAuthStatus(`Authenticated as ${user.email} (${user.uid})`);console.log('Firebase token:', token.substring(0, 20) + '...');} catch (err) {setAuthStatus('Error getting token');setError(err instanceof Error ? err.message : String(err));};} else {setAuthStatus('Not authenticated');};});return () => unsubscribe();}, []);const testApiCall = async () => {try {setApiStatus('Testing...');const response = await api.get('/auth/profile');setApiStatus(`Success: ${response.status} - ${JSON.stringify(response.data)}`);} catch (err) {console.error('API test error:', err);setApiStatus('Failed');setError(err instanceof Error ? err.message : String(err));};};return (;<div className="p-4 border rounded-lg bg-white dark:bg-gray-800 shadow-sm">;<h2 className="text-lg font-semibold mb-2">Firebase Auth Test</h2>;<p className="mb-2">Auth Status: <span className="font-mono">{authStatus}</span></p>;<p className="mb-2">API Status: <span className="font-mono">{apiStatus}</span></p>;<button;onClick={testApiCall};className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors";data-testid="test-api-button";>;Test Protected API;</button>;{error && (;<div className="mt-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">;{error};</div>;)};</div>;);};export default FirebaseAuthTest
--- client/src/components/navigation/Header.tsx ---
import React from 'react';import { Link } from 'react-router-dom';import { useAuth } from '../../hooks/useAuth.jsx';import { useLeague } from '../../hooks/useLeague.jsx';import ThemeToggle from '../ui/ThemeToggle.jsx';const Header = ({toggleChat = () => {},;isChatOpen = false;}) => {const { user = null } = useAuth();const { currentLeague = null, leagues = [], switchLeague = () => {} } = useLeague();return (;<header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center justify-between">;<div className="flex items-center space-x-4">;{/* League selector */};{leagues.length > 0 && (;<div className="relative">;<select;className="appearance-none bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg py-2 pl-3 pr-10 text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent";value={currentLeague?._id || ''};onChange={(e) => switchLeague(e.target.value)};aria-label="Select league";>;{leagues.map((league) => (;<option key={league._id || Math.random().toString()} value={league._id || ''}>;{league.name || 'Unnamed League'};</option>;))};</select>;<div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300">;<svg className="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">;<path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />;</svg>;</div>;</div>;)};{/* League actions */};{currentLeague && (;<div className="hidden md:flex items-center space-x-2">;<Link;to="/leagues";className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white";>;View Details;</Link>;</div>;)};</div>;<div className="flex items-center space-x-3">;{/* Chat toggle */};<button;type="button";onClick={toggleChat};className="p-2 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none relative";aria-label={isChatOpen ? 'Close chat' : 'Open chat'};>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />;</svg>;{/* Notification badge - can be conditionally rendered */};<span className="absolute top-0 right-0 h-3 w-3 rounded-full bg-primary-500"></span>;</button>;{/* Theme toggle - visible on desktop */};<div className="hidden md:block">;<ThemeToggle />;</div>;{/* User menu */};<div className="relative">;<Link to="/settings" className="flex items-center space-x-2" aria-label="User settings">;<div className="w-8 h-8 rounded-full bg-primary-200 dark:bg-primary-800 flex items-center justify-center text-primary-700 dark:text-primary-300">;{user?.name?.charAt(0) || '?'};</div>;<span className="hidden md:inline-block text-sm font-medium text-gray-700 dark:text-gray-200">;{user?.name || 'User'};</span>;</Link>;</div>;</div>;</header>;);};export default Header
--- client/src/components/navigation/MobileNav.tsx ---
import { NavLink } from 'react-router-dom';const MobileNav = ({ toggleChat, isChatOpen }) => {const getNavClasses = ({ isActive }) => {return `flex flex-col items-center justify-center text-xs ${isActive ? 'text-primary-600 dark:text-primary-400' : 'text-gray-600 dark:text-gray-400';}`;};return (;<div className="md:hidden fixed bottom-0 left-0 right-0 h-16 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 flex items-center justify-around px-4">;<NavLink to="/" className={getNavClasses}>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />;</svg>;<span className="mt-1">Home</span>;</NavLink>;<NavLink to="/leagues" className={getNavClasses}>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />;</svg>;<span className="mt-1">Leagues</span>;</NavLink>;<button;type="button";onClick={toggleChat};className="flex flex-col items-center justify-center text-xs text-gray-600 dark:text-gray-400 focus:outline-none relative";>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />;</svg>;<span className="mt-1">Chat</span>;{/* Notification badge - conditionally rendered */};<span className="absolute top-0 right-2 h-2 w-2 rounded-full bg-primary-500"></span>;</button>;<NavLink to="/chefs" className={getNavClasses}>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />;</svg>;<span className="mt-1">Chefs</span>;</NavLink>;<NavLink to="/settings" className={getNavClasses}>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />;</svg>;<span className="mt-1">Settings</span>;</NavLink>;</div>;);};export default MobileNav
--- client/src/components/navigation/Sidebar.tsx ---
import React from 'react';import { NavLink } from 'react-router-dom';import Logo from '../ui/Logo.jsx';import ThemeToggle from '../ui/ThemeToggle.jsx';import { useAuth } from '../../hooks/useAuth.jsx';const Sidebar = ({ collapsed, onToggle }) => {const { logout } = useAuth();const getNavClasses = ({ isActive }) =>;`flex items-center px-4 py-3 rounded-lg transition-colors ${isActive;? 'bg-blue-500 text-white';: 'text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700';}`;return (;<div className="h-full flex flex-col bg-white dark:bg-gray-800">;{/* Logo and collapse toggle */};<div className="py-4 flex items-center justify-between px-4">;{!collapsed && <Logo size="md" />};<button;onClick={onToggle};className="p-1.5 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none";aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'};>;{collapsed ? (;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z";clipRule="evenodd";/>;</svg>;) : (;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z";clipRule="evenodd";/>;</svg>;)};</button>;</div>;{/* Navigation links */};<nav className="mt-2 flex-1 px-2">;<ul className="space-y-1">;<li>;<NavLink to="/" className={getNavClasses}>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />;</svg>;{!collapsed && <span className="ml-3">Dashboard</span>};</NavLink>;</li>;<li>;<NavLink to="/leagues" className={getNavClasses}>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />;</svg>;{!collapsed && <span className="ml-3">Leagues</span>};</NavLink>;</li>;<li>;<NavLink to="/chefs" className={getNavClasses}>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z";clipRule="evenodd";/>;</svg>;{!collapsed && <span className="ml-3">Chefs</span>};</NavLink>;</li>;<li>;<NavLink to="/schedule" className={getNavClasses}>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z";clipRule="evenodd";/>;</svg>;{!collapsed && <span className="ml-3">Schedule</span>};</NavLink>;</li>;</ul>;</nav>;{/* Bottom section */};<div className="mt-auto px-2">;<div className="py-4 border-t border-gray-200 dark:border-gray-700">;<ul className="space-y-1">;<li>;<NavLink to="/settings" className={getNavClasses}>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z";clipRule="evenodd";/>;</svg>;{!collapsed && <span className="ml-3">Settings</span>};</NavLink>;</li>;<li>;<button;onClick={logout};className="w-full flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors";>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 10h-3a1 1 0 110-2h3a1 1 0 110 2zm-7-4a2 2 0 100-4 2 2 0 000 4zm5 4a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a5 5 0 0110 0v2z";clipRule="evenodd";/>;</svg>;{!collapsed && <span className="ml-3">Logout</span>};</button>;</li>;{!collapsed && (;<li className="mt-3 flex justify-center">;<ThemeToggle />;</li>;)};</ul>;</div>;</div>;</div>;);};export default Sidebar
--- client/src/components/ui/Button.tsx ---
import { ButtonHTMLAttributes, ReactNode } from 'react';interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {children?: ReactNode;variant?: 'primary' | 'secondary' | 'outline' | 'danger';size?: 'sm' | 'md' | 'lg';fullWidth?: boolean;isLoading?: boolean;icon?: ReactNode;};function Button({children = null,;variant = 'primary',;size = 'md',;fullWidth = false,;isLoading = false,;disabled = false,;icon = null,;type = 'button',;className = '',;...props;}: ButtonProps) {const baseClasses = 'inline-flex items-center justify-center rounded-lg font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2';const variantClasses = {primary: 'bg-primary-600 hover:bg-primary-700 text-white focus:ring-primary-500',;secondary: 'bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200 focus:ring-gray-500',;outline: 'border border-gray-300 hover:bg-gray-50 text-gray-700 dark:border-gray-600 dark:hover:bg-gray-800 dark:text-gray-300 focus:ring-gray-500',;danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',;};const sizeClasses = {sm: 'px-3 py-1.5 text-sm',;md: 'px-4 py-2',;lg: 'px-6 py-3 text-lg',;};const classes = `;${baseClasses};${variantClasses[variant]};${sizeClasses[size]};${fullWidth ? 'w-full' : ''};${isLoading || disabled ? 'opacity-60 cursor-not-allowed' : ''};${className};`;return (;<button;type={type};disabled={disabled || isLoading};className={classes};data-testid="button";{...props};>;{isLoading ? (;<>;<svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true">;<circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>;<path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>;</svg>;{children};</>;) : (;<>;{icon && <span className="mr-2">{icon}</span>};{children};</>;)};</button>;);};export default Button
--- client/src/components/ui/Card.tsx ---
import React from 'react';type PaddingSize = 'none' | 'sm' | 'md' | 'lg';interface CardProps {children: React.ReactNode;title?: string;subtitle?: string;action?: React.ReactNode;className?: string;padding?: PaddingSize;hover?: boolean;bordered?: boolean;onClick?: () => void; // Added onClick property};const Card = ({children,;title = '',;subtitle = '',;action = null,;className = '',;padding = 'md',;hover = false,;bordered = false,;onClick;}: CardProps) => {const paddingClasses = {none: '',;sm: 'p-3',;md: 'p-4',;lg: 'p-6';};const borderClass = bordered ? 'border border-gray-200 dark:border-gray-700' : '';const hoverClass = hover ? 'hover:shadow-card-hover hover:-translate-y-1' : '';const cardClass = `;bg-white dark:bg-gray-800 rounded-lg shadow-sm;${borderClass};${hoverClass};${className};transition-all duration-200;`;return (;<div className={cardClass} onClick={onClick}>;{(title || action) && (;<div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">;<div>;{title && <h3 className="font-semibold text-gray-900 dark:text-white">{title}</h3>};{subtitle && <p className="text-sm text-gray-500 dark:text-gray-400">{subtitle}</p>};</div>;{action && <div>{action}</div>};</div>;)};<div className={paddingClasses[padding]}>;{children};</div>;</div>;);};export default Card
--- client/src/components/ui/Input.tsx ---
import { forwardRef, ChangeEvent } from 'react';interface InputProps {label?: string;error?: string;type?: string;id?: string;name?: string;placeholder?: string;required?: boolean;disabled?: boolean;helper?: string;className?: string;onChange?: (e: ChangeEvent<HTMLInputElement>) => void;value?: string | number;};const Input = forwardRef<HTMLInputElement, InputProps>(({label,;error,;type = 'text',;id,;name,;placeholder,;required = false,;disabled = false,;helper,;className = '',;onChange,;...rest;}, ref) => {const inputClasses = `;w-full px-3 py-2 border rounded-md;${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'};${disabled ? 'bg-gray-100 dark:bg-gray-800 cursor-not-allowed' : 'bg-white dark:bg-gray-900'};focus:outline-none focus:ring-2 focus:ring-primary-400 dark:focus:ring-primary-600;${className};`;return (;<div className="mb-4">;{label && (;<label htmlFor={id} className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">;{label} {required && <span className="text-red-500">*</span>};</label>;)};<input;ref={ref};type={type};id={id};name={name};placeholder={placeholder};required={required};disabled={disabled};onChange={onChange};className={inputClasses};{...rest};/>;{helper && !error && (;<p className="mt-1 text-sm text-gray-500 dark:text-gray-400">{helper}</p>;)};{error && (;<p className="mt-1 text-sm text-red-500">{error}</p>;)};</div>;);});Input.displayName = 'Input';export default Input
--- client/src/components/ui/LoadingScreen.tsx ---
import React from 'react';import Logo from './Logo.jsx';const LoadingScreen = () => {return (;<div className="fixed inset-0 flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">;<div className="text-center">;<Logo size="lg" />;<div className="mt-8">;<svg className="animate-spin h-10 w-10 text-primary-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">;<circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>;<path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>;</svg>;</div>;<p className="mt-4 text-gray-600 dark:text-gray-300">Loading your fantasy experience...</p>;</div>;</div>;);};export default LoadingScreen
--- client/src/components/ui/Logo.tsx ---
import React from 'react';import { Link } from 'react-router-dom';const Logo = ({ size = 'md' }) => {const sizeClasses = {sm: 'text-xl',;md: 'text-2xl',;lg: 'text-3xl';};return (;<Link to="/" className="flex items-center">;<span className="font-display text-primary-600 dark:text-primary-400">;Top Chef Fantasy;</span>;</Link>;);};export default Logo
--- client/src/components/ui/ThemeToggle.tsx ---
import React from 'react';import { useTheme } from '../../hooks/useTheme.jsx';const ThemeToggle = () => {const { theme, toggleTheme } = useTheme();return (;<button;onClick={toggleTheme};className="p-2 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none";aria-label={theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'};>;{theme === 'dark' ? (;<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">;<path fillRule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clipRule="evenodd" />;</svg>;) : (;<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">;<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />;</svg>;)};</button>;);};export default ThemeToggle
--- client/src/main.tsx ---
import { createRoot } from 'react-dom/client';import './index.css';import App from './App';import { AuthProvider } from './context/AuthContext';import { ThemeProvider } from './context/ThemeContext';import { SocketProvider } from './context/SocketContext';import { LeagueProvider } from './context/LeagueContext';import { BrowserRouter } from 'react-router-dom';const container = document.getElementById('root');const root = createRoot(container!);root.render(;<BrowserRouter>;<AuthProvider>;<ThemeProvider>;<SocketProvider>;<LeagueProvider>;<App />;</LeagueProvider>;</SocketProvider>;</ThemeProvider>;</AuthProvider>;</BrowserRouter>;)
--- client/src/pages/ChefRoster.tsx ---
import { useState, useEffect, memo } from 'react';import { useChef } from '../hooks/useChef';import { useLeague } from '../hooks/useLeague';import Card from '../components/ui/Card';import Button from '../components/ui/Button';import { ref, getDownloadURL } from 'firebase/storage';import { storage } from '../config/firebase';import { useSocket, EVENTS } from '../context/SocketContext';interface ChefData {_id: string;name: string;bio: string;hometown: string;specialty: string;image: string;status: 'active' | 'eliminated' | 'winner';eliminationWeek: number | null;stats: {wins: number;eliminations: number;quickfireWins: number;challengeWins: number;totalPoints: number;};weeklyPerformance: Array<{week: number;points: number;rank: number;highlights: string;}>;};const LoadingSpinner = () => (;<div className="flex justify-center items-center h-full">;<svg;className="animate-spin h-10 w-10 text-primary-600";xmlns="http://www.w3.org/2000/svg";fill="none";viewBox="0 0 24 24";>;<circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />;<path;className="opacity-75";fill="currentColor";d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z";/>;</svg>;</div>;);const ChefCard = memo(;({ chef, onClick, imageUrl }: { chef: ChefData; onClick: () => void; imageUrl: string | null | undefined }) => {console.log(`Rendering ChefCard for ${chef.name}, imageUrl: ${imageUrl}`);return (;<Card className="cursor-pointer card-hover" onClick={onClick}>;<div className="flex items-center space-x-4">;<div className="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center">;{imageUrl ? (;<img;src={imageUrl};alt={chef.name};className="w-full h-full object-cover rounded-full";width={64};height={64};/>;) : (;<span className="text-2xl text-gray-600 dark:text-gray-400">{chef.name.charAt(0)}</span>;)};</div>;<div>;<h3 className="font-medium text-gray-900 dark:text-white">{chef.name}</h3>;<p className="text-sm text-gray-600 dark:text-gray-400">{chef.specialty}</p>;<div className="mt-2 flex items-center">;<span className="text-xs font-medium px-2 py-1 rounded-full">{chef.status}</span>;<span className="ml-2 text-sm text-gray-600 dark:text-gray-400">{chef.stats.totalPoints} pts</span>;</div>;</div>;</div>;</Card>;);};);ChefCard.displayName = 'ChefCard'; // Add this;function ChefRoster() {const { chefs: contextChefs, loading, error } = useChef();const { currentLeague } = useLeague();const { socket, connected } = useSocket();const [localChefs, setLocalChefs] = useState<ChefData[]>([]);const [selectedChef, setSelectedChef] = useState<ChefData | null>(null);const [imageUrls, setImageUrls] = useState<{ [key: string]: string | null }>({});useEffect(() => {if (contextChefs) {console.log('Syncing localChefs with contextChefs', contextChefs.length);setLocalChefs(contextChefs);};}, [contextChefs]);console.log('ChefRoster render', { loading, error, chefsLength: localChefs.length, socketConnected: connected });const handleSelectChef = (chef: ChefData) => {console.log(`Selected chef: ${chef.name}`);setSelectedChef(chef);};const closeChefDetails = () => {console.log('Closing chef details');setSelectedChef(null);};useEffect(() => {if (localChefs.length > 0) {console.log('Fetching images for chefs', localChefs.map((c) => c.name));const fetchImages = async () => {const imagePromises = localChefs.map(async (chef) => {if (chef.image && imageUrls[chef._id] === undefined) {try {console.log(`Fetching image for ${chef.name}`);const imageRef = ref(storage, chef.image);const url = await getDownloadURL(imageRef);setImageUrls((prev) => ({ ...prev, [chef._id]: url }));console.log(`Successfully fetched image URL for ${chef.name}: ${url}`);} catch (err) {console.error(`Error fetching image for ${chef.name}:`, err);setImageUrls((prev) => ({ ...prev, [chef._id]: null }));};} else {console.log(`Skipping image fetch for ${chef.name}, already fetched or no image`);};});await Promise.all(imagePromises);console.log('All image fetches completed');};fetchImages();};}, [localChefs, imageUrls]);useEffect(() => {if (socket && connected) {console.log('Setting up socket listener for chef updates');socket.on(EVENTS.CHEF_UPDATE, (updatedChef: ChefData) => {console.log('Received chef update via socket:', updatedChef);setLocalChefs((prevChefs) =>;prevChefs.map((chef) => (chef._id === updatedChef._id ? { ...chef, ...updatedChef } : chef)););if (selectedChef?._id === updatedChef._id) {setSelectedChef((prev) => (prev ? { ...prev, ...updatedChef } : prev));};});};return () => {if (socket) {console.log('Cleaning up socket listener for chef updates');socket.off(EVENTS.CHEF_UPDATE);};};}, [socket, connected, selectedChef]);if (loading) {console.log('Rendering loading state');return <LoadingSpinner />;};if (!contextChefs) {console.log('No chefs data available');return <div className="text-center py-10 text-gray-500 dark:text-gray-400">Error: No chef data available</div>;};return (;<div className="space-y-6">;<div className="flex justify-between items-center">;<h1 className="text-2xl font-bold text-gray-900 dark:text-white">Chef Roster</h1>;{currentLeague && currentLeague.status === 'draft' && (;<Button variant="primary" size="sm">;<span>;Draft Chef;{currentLeague && <span className="ml-2 text-xs text-gray-500">({currentLeague.name})</span>};</span>;</Button>;)};</div>;{error && (;<div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg">{error}</div>;)};<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">;{localChefs.length > 0 ? (;localChefs.map((chef) => (;<ChefCard;key={chef._id};chef={chef};onClick={() => handleSelectChef(chef)};imageUrl={imageUrls[chef._id]};/>;));) : (;<div className="col-span-full text-center py-10 text-gray-500 dark:text-gray-400">No chefs available.</div>;)};</div>;{selectedChef && (;<div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">;<div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-2xl max-h-[90vh] overflow-auto">;<div className="p-6">;<div className="flex justify-between items-start">;<h2 className="text-2xl font-bold text-gray-900 dark:text-white">{selectedChef.name}</h2>;<button;onClick={closeChefDetails};className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none";type="button";aria-label="Close chef details";>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-6 w-6";fill="none";viewBox="0 0 24 24";stroke="currentColor";>;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />;</svg>;</button>;</div>;<div className="mt-6 space-y-6">;<div className="flex flex-col sm:flex-row gap-6">;<div className="w-full sm:w-1/3">;<div className="aspect-square bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center mb-4">;{imageUrls[selectedChef._id] ? (;<img;src={imageUrls[selectedChef._id]!};alt={selectedChef.name};className="w-full h-full object-cover rounded-lg";width={300};height={300};/>;) : (;<span className="text-6xl text-gray-600 dark:text-gray-400">{selectedChef.name.charAt(0)}</span>;)};</div>;<div className="space-y-3">;<div>;<span className="text-sm text-gray-600 dark:text-gray-400">Status</span>;<p className="font-medium capitalize">{selectedChef.status}</p>;</div>;<div>;<span className="text-sm text-gray-600 dark:text-gray-400">Specialty</span>;<p className="font-medium">{selectedChef.specialty}</p>;</div>;<div>;<span className="text-sm text-gray-600 dark:text-gray-400">Hometown</span>;<p className="font-medium">{selectedChef.hometown}</p>;</div>;</div>;</div>;<div className="w-full sm:w-2/3">;<h3 className="font-medium text-lg mb-3">Bio</h3>;<p className="text-gray-700 dark:text-gray-300 mb-6">{selectedChef.bio}</p>;<h3 className="font-medium text-lg mb-3">Statistics</h3>;<div className="grid grid-cols-2 gap-4">;<div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">;<span className="text-sm text-gray-600 dark:text-gray-400">Challenge Wins</span>;<p className="text-xl font-semibold">{selectedChef.stats.challengeWins}</p>;</div>;<div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">;<span className="text-sm text-gray-600 dark:text-gray-400">Quickfire Wins</span>;<p className="text-xl font-semibold">{selectedChef.stats.quickfireWins}</p>;</div>;<div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">;<span className="text-sm text-gray-600 dark:text-gray-400">Total Points</span>;<p className="text-xl font-semibold">{selectedChef.stats.totalPoints}</p>;</div>;<div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">;<span className="text-sm text-gray-600 dark:text-gray-400">Eliminations</span>;<p className="text-xl font-semibold">{selectedChef.stats.eliminations}</p>;</div>;</div>;{currentLeague && currentLeague.status === 'draft' && (;<div className="mt-6">;<Button variant="primary" fullWidth>Draft Chef</Button>;</div>;)};</div>;</div>;<div>;<h3 className="font-medium text-lg mb-3">Weekly Performance</h3>;{selectedChef.weeklyPerformance && selectedChef.weeklyPerformance.length > 0 ? (;<div className="overflow-x-auto">;<table className="min-w-full">;<thead>;<tr className="border-b border-gray-200 dark:border-gray-700">;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Week;</th>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Points;</th>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Rank;</th>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Highlights;</th>;</tr>;</thead>;<tbody>;{selectedChef.weeklyPerformance.map((week) => (;<tr key={week.week} className="border-b border-gray-200 dark:border-gray-700">;<td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">;Week {week.week};</td>;<td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">;{week.points};</td>;<td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">;{week.rank};</td>;<td className="px-4 py-3 text-sm text-gray-700 dark:text-gray-300">{week.highlights}</td>;</tr>;))};</tbody>;</table>;</div>;) : (;<p className="text-gray-500 dark:text-gray-400">No performance data available.</p>;)};</div>;</div>;</div>;</div>;</div>;)};</div>;);};export default ChefRoster
--- client/src/pages/Dashboard.tsx ---
import { useEffect } from 'react';import { useLeague } from '../hooks/useLeague';import { useAuth } from '../hooks/useAuth';const Dashboard = () => {console.log('Dashboard render started');const { currentLeague, loading, error, fetchLeagueDetails, createLeague, joinLeagueWithCode } = useLeague();const { user } = useAuth();useEffect(() => {if (currentLeague?._id && !loading && !error) {console.log('Fetching league details for:', currentLeague._id);fetchLeagueDetails(currentLeague._id).catch(err => {console.error('Error fetching league details:', err);});};}, [currentLeague?._id, fetchLeagueDetails, loading, error]);const handleCreateLeague = async () => {try {await createLeague({ name: 'Test League' });} catch (err) {console.error('Error creating league:', err);};};const handleJoinLeague = async () => {try {await joinLeagueWithCode('TESTCODE');} catch (err) {console.error('Error joining league:', err);};};if (loading) return <div>Loading...</div>;if (error) return <div>Error: {error}</div>;if (!currentLeague) {return (;<div>;<h1>Welcome, {user?.name || 'User'}!</h1>;<p>No leagues yet. Create or join one:</p>;<button onClick={handleCreateLeague}>Create League</button>;<button onClick={handleJoinLeague}>Join League (TESTCODE)</button>;</div>;);};return (;<div>;<h1>Dashboard</h1>;<p>League: {currentLeague.name}</p>;<p>Status: {currentLeague.status}</p>;<p>Members: {currentLeague.members?.length || 0}</p>;</div>;);};export default Dashboard
--- client/src/services/api.ts ---
import axios from 'axios';import { getAuth } from 'firebase/auth';import axiosRetry from 'axios-retry';const api = axios.create({baseURL: import.meta.env.VITE_API_URL || 'http://localhost:5000/api',;headers: {'Content-Type': 'application/json',;},;timeout: 10000;});axiosRetry(api, {retries: 3,;retryDelay: (retryCount) => retryCount * 1000,;retryCondition: (error) => axiosRetry.isNetworkOrIdempotentRequestError(error),;});api.interceptors.request.use(;async (config) => {console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);const auth = getAuth();const user = auth.currentUser;if (user) {try {const token = await user.getIdToken(true);config.headers['Authorization'] = `Bearer ${token}`;console.log('Added Firebase token to request');} catch (err) {console.error('Error getting Firebase token:', err);};} else {console.log('No authenticated user found');};return config;},;(error) => {console.error('Request Interceptor Error:', error);return Promise.reject(error);};);api.interceptors.response.use(;(response) => {console.log(`API Response: ${response.status} ${response.config.url}`);return response;},;(error) => {console.error('Response Error:', error.message);console.error('Status:', error.response?.status, 'Data:', error.response?.data);if (error.response?.status === 401) {console.log('Authentication error - redirecting to login');window.location.href = '/login';};return Promise.reject(error);};);export default api
--- client/src/services/authService.ts ---
import {createUserWithEmailAndPassword,;signInWithEmailAndPassword,;signOut,;sendPasswordResetEmail,;sendEmailVerification,;updateProfile as updateFirebaseProfile,;confirmPasswordReset,;verifyPasswordResetCode,;applyActionCode,;GoogleAuthProvider,;signInWithPopup,;signInWithRedirect,;onAuthStateChanged,;type UserCredential,;type User,;} from 'firebase/auth';import { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';import { auth, db } from '../config/firebase';export const getToken = async (): Promise<string | null> => {const currentUser = auth.currentUser;if (!currentUser) return null;try {const token = await currentUser.getIdToken();console.debug('Token retrieved', { userId: currentUser.uid });return token;} catch (error: unknown) {console.error('Error getting token', { error: String(error) });return null;};};interface UserData {email: string;password: string;name: string;};interface UserProfile {_id: string;name: string;email: string;isAdmin: boolean;emailVerified: boolean;};const AuthService = {register: async (userData: UserData): Promise<UserProfile> => {try {const userCredential: UserCredential = await createUserWithEmailAndPassword(;auth,;userData.email,;userData.password;);await updateFirebaseProfile(userCredential.user, {displayName: userData.name,;});await sendEmailVerification(userCredential.user);await setDoc(doc(db, 'users', userCredential.user.uid), {name: userData.name,;email: userData.email,;avatar: userCredential.user.photoURL || '',;isAdmin: false,;leagues: [],;authProvider: 'email',;createdAt: serverTimestamp(),;});console.info('User registered successfully', {userId: userCredential.user.uid,;email: userData.email,;});return {_id: userCredential.user.uid,;name: userData.name,;email: userData.email,;isAdmin: false,;emailVerified: false,;};} catch (error: unknown) {console.error('Registration error', {error: String(error),;email: userData?.email,;});throw error;};},;signInWithGoogle: async (): Promise<UserProfile> => {try {const provider = new GoogleAuthProvider();let userCredential: UserCredential;try {userCredential = await signInWithPopup(auth, provider);} catch (popupError: unknown) {if ((popupError as any).code === 'auth/popup-blocked') {console.warn('Popup blocked, falling back to redirect');await signInWithRedirect(auth, provider);return new Promise((resolve, reject) => {const unsubscribe = onAuthStateChanged(auth, (user) => {if (user) {unsubscribe();handleGoogleUser(user).then(resolve).catch(reject);};}, (error) => {unsubscribe();reject(error);});});} else {throw popupError;}};return await handleGoogleUser(userCredential.user);} catch (error: unknown) {console.error('Google sign-in error', { error: String(error) });throw error;};},;login: async (email: string, password: string): Promise<UserProfile> => {try {const userCredential: UserCredential = await signInWithEmailAndPassword(auth, email, password);const userDoc = await getDoc(doc(db, 'users', userCredential.user.uid));if (userDoc.exists()) {const userData = userDoc.data();console.info('User logged in', { userId: userCredential.user.uid, email });return {_id: userCredential.user.uid,;name: userData.name as string,;email: userData.email as string,;isAdmin: (userData.isAdmin as boolean) || false,;emailVerified: userCredential.user.emailVerified,;};} else {console.warn('User profile not found in Firestore', { userId: userCredential.user.uid });throw new Error('User profile not found');};} catch (error: unknown) {console.error('Login error', { error: String(error), email });throw error;};},;logout: async (): Promise<boolean> => {try {await signOut(auth);console.info('User logged out');return true;} catch (error: unknown) {console.error('Logout error', { error: String(error) });throw error;};},;sendPasswordResetEmail: async (email: string): Promise<boolean> => {try {await sendPasswordResetEmail(auth, email);console.info('Password reset email sent', { email });return true;} catch (error: unknown) {console.error('Password reset error', { error: String(error), email });throw error;};},;confirmPasswordReset: async (code: string, newPassword: string): Promise<boolean> => {try {await confirmPasswordReset(auth, code, newPassword);console.info('Password reset confirmed');return true;} catch (error: unknown) {console.error('Confirm password reset error', { error: String(error) });throw error;};},;verifyPasswordResetCode: async (code: string): Promise<string> => {try {const email = await verifyPasswordResetCode(auth, code);console.info('Password reset code verified', { email });return email;} catch (error: unknown) {console.error('Verify password reset code error', { error: String(error) });throw error;};},;sendVerificationEmail: async (): Promise<boolean> => {try {const currentUser = auth.currentUser;if (!currentUser) throw new Error('No user logged in');await sendEmailVerification(currentUser);console.info('Verification email sent', { userId: currentUser.uid });return true;} catch (error: unknown) {console.error('Send verification email error', { error: String(error) });throw error;};},;verifyEmail: async (actionCode: string): Promise<boolean> => {try {await applyActionCode(auth, actionCode);console.info('Email verified with action code');return true;} catch (error: unknown) {console.error('Email verification error', { error: String(error) });throw error;};},;updateProfile: async (userData: { name?: string; avatar?: string }): Promise<Partial<UserProfile>> => {try {const currentUser = auth.currentUser;if (!currentUser) throw new Error('No user logged in');const updateData: { name?: string; avatar?: string } = {};if (userData.name) {await updateFirebaseProfile(currentUser, {displayName: userData.name,;});updateData.name = userData.name;};if (userData.avatar) {await updateFirebaseProfile(currentUser, {photoURL: userData.avatar,;});updateData.avatar = userData.avatar;};if (Object.keys(updateData).length > 0) {const userRef = doc(db, 'users', currentUser.uid);await updateDoc(userRef, updateData);console.info('User profile updated', { userId: currentUser.uid, updates: updateData });};return {_id: currentUser.uid,;...updateData,;};} catch (error: unknown) {console.error('Update profile error', { error: String(error) });throw error;};},;getCurrentUser: async (): Promise<UserProfile | null> => {try {const currentUser = auth.currentUser;if (!currentUser) {console.debug('No current user found');return null;};const userDoc = await getDoc(doc(db, 'users', currentUser.uid));if (userDoc.exists()) {console.debug('Current user fetched', { userId: currentUser.uid });return {_id: currentUser.uid,;name: (userDoc.data().name as string) || currentUser.displayName || '',;email: (userDoc.data().email as string) || currentUser.email || '',;isAdmin: (userDoc.data().isAdmin as boolean) || false,;emailVerified: currentUser.emailVerified,;};};console.warn('User document not found for current user', { userId: currentUser.uid });return null;} catch (error: unknown) {console.error('Get current user error', { error: String(error) });throw error;};},;onAuthStateChanged: (callback: (user: User | null) => void): (() => void) => {const unsubscribe = onAuthStateChanged(;auth,;(user) => {if (user) {console.debug('Auth state changed: user signed in', { userId: user.uid });} else {console.debug('Auth state changed: user signed out');};callback(user);},;(error) => {console.error('Auth state observer error', { error: String(error) });};);return unsubscribe;},;};async function handleGoogleUser(user: User): Promise<UserProfile> {const userDoc = await getDoc(doc(db, 'users', user.uid));if (!userDoc.exists()) {await setDoc(doc(db, 'users', user.uid), {name: user.displayName,;email: user.email,;avatar: user.photoURL || '',;isAdmin: false,;leagues: [],;authProvider: 'google',;createdAt: serverTimestamp(),;});console.info('New Google user created', { userId: user.uid });} else {console.info('Google user signed in', { userId: user.uid });};return {_id: user.uid,;name: user.displayName || '',;email: user.email || '',;isAdmin: userDoc.exists() ? (userDoc.data().isAdmin as boolean) || false : false,;emailVerified: user.emailVerified,;};};export const authService = AuthService;export default AuthService
--- client/src/services/challengeService.ts ---
import { collection, doc, getDocs, getDoc, addDoc, updateDoc, query, where, orderBy, limit } from 'firebase/firestore';import { db } from '../config/firebase';import api from './api.js';const ChallengeService = {getAllChallenges: async (season) => {try {let challengesQuery;if (season) {challengesQuery = query(;collection(db, 'challenges'),;where('season', '==', parseInt(season)),;orderBy('week'););} else {challengesQuery = query(;collection(db, 'challenges'),;orderBy('season'),;orderBy('week'););};const challengesSnapshot = await getDocs(challengesQuery);const challenges = challengesSnapshot.docs.map(doc => ({_id: doc.id,;...doc.data();}));for (const challenge of challenges) {if (challenge.winner) {const winnerDoc = await getDoc(doc(db, 'chefs', challenge.winner));if (winnerDoc.exists()) {challenge.winner = {_id: winnerDoc.id,;name: winnerDoc.data().name,;image: winnerDoc.data().image;};}};if (challenge.topChefs && challenge.topChefs.length > 0) {const topChefDocs = await Promise.all(;challenge.topChefs.map(chefId => getDoc(doc(db, 'chefs', chefId))););challenge.topChefs = topChefDocs;.filter(doc => doc.exists());.map(doc => ({_id: doc.id,;name: doc.data().name,;image: doc.data().image;}));};if (challenge.bottomChefs && challenge.bottomChefs.length > 0) {const bottomChefDocs = await Promise.all(;challenge.bottomChefs.map(chefId => getDoc(doc(db, 'chefs', chefId))););challenge.bottomChefs = bottomChefDocs;.filter(doc => doc.exists());.map(doc => ({_id: doc.id,;name: doc.data().name,;image: doc.data().image;}));};if (challenge.eliminatedChef) {const eliminatedChefDoc = await getDoc(doc(db, 'chefs', challenge.eliminatedChef));if (eliminatedChefDoc.exists()) {challenge.eliminatedChef = {_id: eliminatedChefDoc.id,;name: eliminatedChefDoc.data().name,;image: eliminatedChefDoc.data().image;};}}};return challenges;} catch (error) {console.error('Error fetching challenges from Firestore:', error);const response = await api.get('/challenges', { params: { season } });return response.data;};},;getChallengeById: async (id) => {try {const challengeDoc = await getDoc(doc(db, 'challenges', id));if (!challengeDoc.exists()) {throw new Error('Challenge not found');};const challenge = {_id: challengeDoc.id,;...challengeDoc.data();};if (challenge.winner) {const winnerDoc = await getDoc(doc(db, 'chefs', challenge.winner));if (winnerDoc.exists()) {challenge.winner = {_id: winnerDoc.id,;name: winnerDoc.data().name,;image: winnerDoc.data().image;};}};if (challenge.topChefs && challenge.topChefs.length > 0) {const topChefDocs = await Promise.all(;challenge.topChefs.map(chefId => getDoc(doc(db, 'chefs', chefId))););challenge.topChefs = topChefDocs;.filter(doc => doc.exists());.map(doc => ({_id: doc.id,;name: doc.data().name,;image: doc.data().image;}));};if (challenge.bottomChefs && challenge.bottomChefs.length > 0) {const bottomChefDocs = await Promise.all(;challenge.bottomChefs.map(chefId => getDoc(doc(db, 'chefs', chefId))););challenge.bottomChefs = bottomChefDocs;.filter(doc => doc.exists());.map(doc => ({_id: doc.id,;name: doc.data().name,;image: doc.data().image;}));};if (challenge.eliminatedChef) {const eliminatedChefDoc = await getDoc(doc(db, 'chefs', challenge.eliminatedChef));if (eliminatedChefDoc.exists()) {challenge.eliminatedChef = {_id: eliminatedChefDoc.id,;name: eliminatedChefDoc.data().name,;image: eliminatedChefDoc.data().image;};}};return challenge;} catch (error) {console.error('Error fetching challenge from Firestore:', error);const response = await api.get(`/challenges/${id}`);return response.data;};},;getCurrentChallenges: async (season) => {try {if (!season) {throw new Error('Season parameter is required');};const latestChallengeQuery = query(;collection(db, 'challenges'),;where('season', '==', parseInt(season)),;orderBy('airDate', 'desc'),;limit(1););const latestChallengeSnapshot = await getDocs(latestChallengeQuery);if (latestChallengeSnapshot.empty) {throw new Error('No challenges found for this season');};const latestChallenge = {_id: latestChallengeSnapshot.docs[0].id,;...latestChallengeSnapshot.docs[0].data();};const currentChallengesQuery = query(;collection(db, 'challenges'),;where('season', '==', parseInt(season)),;where('week', '==', latestChallenge.week););const currentChallengesSnapshot = await getDocs(currentChallengesQuery);const currentChallenges = currentChallengesSnapshot.docs.map(doc => ({_id: doc.id,;...doc.data();}));currentChallenges.sort((a, b) => {if (a.isQuickfire !== b.isQuickfire) {return a.isQuickfire ? -1 : 1;};return new Date(a.airDate) - new Date(b.airDate);});for (const challenge of currentChallenges) {};return currentChallenges;} catch (error) {console.error('Error fetching current challenges from Firestore:', error);const response = await api.get('/challenges/current', { params: { season } });return response.data;};},;createChallenge: async (challengeData) => {const response = await api.post('/challenges', challengeData);return response.data;},;updateChallenge: async (id, updateData) => {const response = await api.put(`/challenges/${id}`, updateData);return response.data;};};export default ChallengeService
--- client/src/services/chefService.ts ---
import { collection, doc, getDocs, getDoc, query, where, orderBy } from 'firebase/firestore';import { db } from '../config/firebase';import api from './api.js';const ChefService = {getAllChefs: async () => {try {const chefsQuery = query(;collection(db, 'chefs'),;orderBy('stats.totalPoints', 'desc'););const chefsSnapshot = await getDocs(chefsQuery);const chefs = chefsSnapshot.docs.map(doc => ({_id: doc.id,;...doc.data();}));return chefs;} catch (error) {console.error('Error fetching chefs from Firestore:', error);const response = await api.get('/chefs');return response.data;};},;getChefById: async (id) => {try {const chefDoc = await getDoc(doc(db, 'chefs', id));if (!chefDoc.exists()) {throw new Error('Chef not found');};return {_id: chefDoc.id,;...chefDoc.data();};} catch (error) {console.error('Error fetching chef from Firestore:', error);const response = await api.get(`/chefs/${id}`);return response.data;};},;getChefStats: async (id) => {try {const chefDoc = await getDoc(doc(db, 'chefs', id));if (!chefDoc.exists()) {throw new Error('Chef not found');};const chef = chefDoc.data();return chef.stats || {};} catch (error) {console.error('Error fetching chef stats from Firestore:', error);const response = await api.get(`/chefs/${id}/stats`);return response.data;};},;getChefWeeklyPerformance: async (id) => {try {const chefDoc = await getDoc(doc(db, 'chefs', id));if (!chefDoc.exists()) {throw new Error('Chef not found');};const chef = chefDoc.data();return chef.weeklyPerformance || [];} catch (error) {console.error('Error fetching chef weekly performance from Firestore:', error);const response = await api.get(`/chefs/${id}/weekly-performance`);return response.data;}};};export default ChefService
--- client/src/services/leagueService.ts ---
import {collection,;doc,;getDocs,;getDoc,;addDoc,;updateDoc,;query,;where,;arrayUnion,;serverTimestamp;} from 'firebase/firestore';import { db } from '../config/firebase';const LeagueService = {getUserLeagues: async (userId) => {try {const leaguesRef = collection(db, 'leagues');const leaguesQuery = query(;collection(db, 'leagues'),;where(`members.${userId}`, '!=', null););const leaguesSnapshot = await getDocs(leaguesQuery);const leagues = leaguesSnapshot.docs.map(doc => ({_id: doc.id,;...doc.data();}));return leagues;} catch (error) {console.error('Error fetching leagues:', error);throw error;};},;getLeagueById: async (id) => {try {const leagueDoc = await getDoc(doc(db, 'leagues', id));if (!leagueDoc.exists()) {throw new Error('League not found');};return {_id: leagueDoc.id,;...leagueDoc.data();};} catch (error) {console.error('Error fetching league:', error);throw error;};},;createLeague: async (leagueData, userId) => {try {const inviteCode = Math.random().toString(36).substring(2, 8).toUpperCase();const newLeague = {name: leagueData.name,;creator: userId,;season: leagueData.season,;maxMembers: leagueData.maxMembers || 10,;maxRosterSize: leagueData.maxRosterSize || 5,;status: 'draft',;inviteCode,;scoringSettings: leagueData.scoringSettings || {quickfireWin: 10,;challengeWin: 20,;topThree: 5,;bottomThree: -5,;elimination: -15,;finalWinner: 50;},;currentWeek: 1,;members: {[userId]: {role: 'owner',;score: 0,;joinedAt: serverTimestamp()};},;createdAt: serverTimestamp();};const docRef = await addDoc(collection(db, 'leagues'), newLeague);const newLeagueDoc = await getDoc(docRef);const userRef = doc(db, 'users', userId);await updateDoc(userRef, {leagues: arrayUnion(docRef.id);});return {_id: newLeagueDoc.id,;...newLeagueDoc.data();};} catch (error) {console.error('Error creating league:', error);throw error;};},;joinLeagueWithCode: async (inviteCode, userId) => {try {const leaguesQuery = query(;collection(db, 'leagues'),;where('inviteCode', '==', inviteCode););const leaguesSnapshot = await getDocs(leaguesQuery);if (leaguesSnapshot.empty) {throw new Error('League not found with that invite code');};const leagueDoc = leaguesSnapshot.docs[0];const league = leagueDoc.data();const memberCount = Object.keys(league.members || {}).length;if (memberCount >= league.maxMembers) {throw new Error('League is full');};if (league.members && league.members[userId]) {throw new Error('You are already a member of this league');};const leagueRef = doc(db, 'leagues', leagueDoc.id);await updateDoc(leagueRef, {[`members.${userId}`]: {role: 'member',;score: 0,;joinedAt: serverTimestamp()};});const userRef = doc(db, 'users', userId);await updateDoc(userRef, {leagues: arrayUnion(leagueDoc.id);});const updatedLeagueDoc = await getDoc(leagueRef);return {_id: updatedLeagueDoc.id,;...updatedLeagueDoc.data();};} catch (error) {console.error('Error joining league:', error);throw error;};},;};export default LeagueService
--- client/src/services/messageService.ts ---
import { collection, query, where, orderBy, limit, getDocs, addDoc, updateDoc, increment, doc, getDoc, arrayUnion, arrayRemove, serverTimestamp, startAfter, Timestamp } from 'firebase/firestore';import { db } from '../config/firebase';import api from './api';const MessageService = {getLeagueMessages: async (leagueId, limitCount = 50, before = null) => {try {let messagesQuery;if (before) {const beforeDate = new Date(before);messagesQuery = query(;collection(db, 'messages'),;where('league', '==', leagueId),;where('createdAt', '<', beforeDate),;orderBy('createdAt', 'desc'),;limit(limitCount););} else {messagesQuery = query(;collection(db, 'messages'),;where('league', '==', leagueId),;orderBy('createdAt', 'desc'),;limit(limitCount););};const messagesSnapshot = await getDocs(messagesQuery);const messages = [];messagesSnapshot.forEach(doc => {messages.push({_id: doc.id,;...doc.data();});});const populatedMessages = await Promise.all(messages.map(async (message) => {const senderDoc = await getDoc(doc(db, 'users', message.sender));return {...message,;sender: senderDoc.exists() ? {_id: senderDoc.id,;name: senderDoc.data().name,;email: senderDoc.data().email,;avatar: senderDoc.data().avatar || '';} : { _id: message.sender };};}));const currentUserId = localStorage.getItem('userId');if (currentUserId) {populatedMessages.forEach(async (message) => {if (!message.readBy.includes(currentUserId)) {const messageRef = doc(db, 'messages', message._id);await updateDoc(messageRef, {readBy: arrayUnion(currentUserId);});};});};return populatedMessages;} catch (error) {console.error('Error getting messages from Firestore:', error);try {let params = { limit: limitCount };if (before) {params.before = before;};const response = await api.get(`/messages/${leagueId}`, { params });return response.data;} catch (apiError) {console.error('API fallback error:', apiError);throw apiError;}};},;sendMessage: async (leagueId, content, type = 'text') => {try {const currentUserId = localStorage.getItem('userId');if (!currentUserId) {throw new Error('User not authenticated');};const message = {league: leagueId,;sender: currentUserId,;content,;type,;reactions: {likes: [],;hearts: [];},;readBy: [currentUserId],;createdAt: new Date().toISOString();};const messageRef = await addDoc(collection(db, 'messages'), message);const senderDoc = await getDoc(doc(db, 'users', currentUserId));const completeMessage = {_id: messageRef.id,;...message,;sender: senderDoc.exists() ? {_id: senderDoc.id,;name: senderDoc.data().name,;email: senderDoc.data().email,;avatar: senderDoc.data().avatar || '';} : { _id: currentUserId };};return completeMessage;} catch (error) {console.error('Error sending message to Firestore:', error);try {const response = await api.post('/messages', { leagueId, content, type });return response.data;} catch (apiError) {console.error('API fallback error:', apiError);throw apiError;}};},;addReaction: async (messageId, reaction) => {try {if (!['likes', 'hearts'].includes(reaction)) {throw new Error('Invalid reaction type');};const currentUserId = localStorage.getItem('userId');if (!currentUserId) {throw new Error('User not authenticated');};const messageRef = doc(db, 'messages', messageId);const messageDoc = await getDoc(messageRef);if (!messageDoc.exists()) {throw new Error('Message not found');};const message = messageDoc.data();const hasReacted = message.reactions[reaction].includes(currentUserId);if (hasReacted) {await updateDoc(messageRef, {[`reactions.${reaction}`]: arrayRemove(currentUserId);});} else {await updateDoc(messageRef, {[`reactions.${reaction}`]: arrayUnion(currentUserId);});};const updatedDoc = await getDoc(messageRef);return {message: 'Reaction updated',;reactions: updatedDoc.data().reactions;};} catch (error) {console.error('Error updating reaction in Firestore:', error);try {const response = await api.post(`/messages/${messageId}/reaction`, { reaction });return response.data;} catch (apiError) {console.error('API fallback error:', apiError);throw apiError;}};},;getUnreadCount: async (leagueId) => {try {const currentUserId = localStorage.getItem('userId');if (!currentUserId) {throw new Error('User not authenticated');};const totalQuery = query(;collection(db, 'messages'),;where('league', '==', leagueId),;where('sender', '!=', currentUserId););const totalSnapshot = await getDocs(totalQuery);let unreadCount = 0;totalSnapshot.forEach(doc => {const message = doc.data();if (!message.readBy.includes(currentUserId)) {unreadCount++;};});return { unreadCount };} catch (error) {console.error('Error getting unread count from Firestore:', error);try {const response = await api.get(`/messages/unread/${leagueId}`);return response.data;} catch (apiError) {console.error('API fallback error:', apiError);throw apiError;}}};};export default MessageService
--- client/src/services/userService.ts ---
import { doc, getDoc, updateDoc, setDoc } from 'firebase/firestore';import { updateProfile as firebaseUpdateProfile } from 'firebase/auth';import { auth, db } from '../config/firebase';import api from './api.js';const UserService = {getUserProfile: async (userId) => {try {const userDoc = await getDoc(doc(db, 'users', userId));if (!userDoc.exists()) {throw new Error('User not found');};return {_id: userDoc.id,;...userDoc.data();};} catch (error) {console.error('Error fetching user from Firestore:', error);const response = await api.get('/api/auth/profile');return response.data;};},;updateUserProfile: async (userData) => {try {const currentUser = auth.currentUser;if (!currentUser) throw new Error('No user logged in');const updateData = {};if (userData.name) updateData.name = userData.name;if (userData.email) updateData.email = userData.email.toLowerCase();if (userData.avatar) updateData.avatar = userData.avatar;if (Object.keys(updateData).length > 0) {await updateDoc(doc(db, 'users', currentUser.uid), updateData);};if (userData.name) {await firebaseUpdateProfile(currentUser, {displayName: userData.name;});};return {_id: currentUser.uid,;...updateData;};} catch (error) {console.error('Error updating user in Firestore:', error);const response = await api.put('/api/auth/profile', userData);return response.data;}};};export default UserService
--- client/src/vite-env.d.ts ---
interface ImportMetaEnv extends Readonly<Record<string, string>> {readonly VITE_API_URL: string;readonly VITE_SOCKET_URL: string;readonly VITE_FIREBASE_API_KEY: string;readonly VITE_FIREBASE_AUTH_DOMAIN: string;readonly VITE_FIREBASE_PROJECT_ID: string;readonly VITE_FIREBASE_STORAGE_BUCKET: string;readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string;readonly VITE_FIREBASE_APP_ID: string;readonly VITE_FIREBASE_MEASUREMENT_ID: string;};interface ImportMeta {readonly env: ImportMetaEnv;}
--- client/tailwind.config.ts ---
export default {content: [;"./index.html",;"./src/**/*.{js,jsx,ts,tsx}",;],;theme: {extend: {colors: {primary: {50: '#fffbeb',;100: '#fef3c7',;200: '#fde68a',;300: '#fcd34d',;400: '#fbbf24',;500: '#f59e0b',;600: '#d97706',;700: '#b45309',;800: '#92400e',;900: '#78350f',;950: '#451a03',;},;gray: {50: '#f9fafb',;100: '#f3f4f6',;200: '#e5e7eb',;300: '#d1d5db',;400: '#9ca3af',;500: '#6b7280',;600: '#4b5563',;700: '#374151',;800: '#1f2937',;900: '#111827',;950: '#030712',;},;},;fontFamily: {sans: ['Inter var', 'ui-sans-serif', 'system-ui', 'sans-serif'],;display: ['Bebas Neue', 'cursive'],;},;boxShadow: {card: '0 2px 12px rgba(0, 0, 0, 0.08)',;'card-hover': '0 8px 30px rgba(0, 0, 0, 0.12)',;},;animation: {'fade-in': 'fadeIn 0.5s ease-in-out',;'slide-up': 'slideUp 0.5s ease-out',;'slide-down': 'slideDown 0.5s ease-out',;pulse: 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',;},;keyframes: {fadeIn: {'0%': { opacity: '0' },;'100%': { opacity: '1' },;},;slideUp: {'0%': { transform: 'translateY(20px)', opacity: '0' },;'100%': { transform: 'translateY(0)', opacity: '1' },;},;slideDown: {'0%': { transform: 'translateY(-20px)', opacity: '0' },;'100%': { transform: 'translateY(0)', opacity: '1' },;},;},;},;},;plugins: [],}
--- client/tsconfig.json ---
{"compilerOptions": {"target": "ESNext",;"useDefineForClassFields": true,;"lib": ["ESNext", "DOM", "DOM.Iterable"],;"module": "ESNext",;"skipLibCheck": true, // Good for speeding up builds, keep it;"allowJs": false,;"checkJs": false,;"moduleResolution": "bundler", // Perfect for Vite;"esModuleInterop": true,;"allowSyntheticDefaultImports": true,;"allowImportingTsExtensions": false, // Enforces .ts/.tsx, good for consistency;"resolveJsonModule": true,;"isolatedModules": true, // Required for Vite’s fast HMR;"types": ["react", "react-dom", "vite/client", "node",], // Add "vite/client" for Vite types;"noEmit": true, // Vite handles emitting;"jsx": "react-jsx",;"jsxImportSource": "react",;"sourceMap": true,;"inlineSources": true,;"strict": false, // Keep this on for safety; toggle off only temporarily;"noUnusedLocals": true,;"noUnusedParameters": true,;"noFallthroughCasesInSwitch": true,;"baseUrl": ".",;"paths": {"@/*": ["./src/*"];},;"typeRoots": ["./node_modules/@types", "./src/types"];},;"include": ["src", "src/**/*.d.ts", "*.ts", "*.tsx", "addTestLeague.ts"],;"references": [{ "path": "./tsconfig.node.json" }]}
--- client/tsconfig.node.json ---
{"compilerOptions": {"composite": true,;"skipLibCheck": true,;"module": "ESNext",;"moduleResolution": "bundler",;"allowSyntheticDefaultImports": true,;"target": "ES2020", // Consistent, but could bump to ESNext;"types": ["node", "vite/client"] // Already good;},;"include": ["vite.config.js"]}
--- client/vite.config.js ---
import { defineConfig } from 'vite';import react from '@vitejs/plugin-react';import path from 'path';import fs from 'fs';export default defineConfig(({ mode }) => {const env = {VITE_BACKEND_PORT: process.env.VITE_BACKEND_PORT || '5000',;};let backendPort;try {const portFile = fs.readFileSync(path.resolve(__dirname, 'backend-port.json'), 'utf-8');backendPort = JSON.parse(portFile).port || env.VITE_BACKEND_PORT;} catch (e) {backendPort = env.VITE_BACKEND_PORT;};return {plugins: [react()],;resolve: {alias: {'@': path.resolve(__dirname, './src'),;},;},;server: {port: 5173,;proxy: {'/api': {target: `http://localhost:${backendPort}`,;changeOrigin: true,;},;'/socket.io': {target: `http://localhost:${backendPort}`,;ws: true,;},;},;},;esbuild: {target: 'es2020',;},;build: {target: 'es2020',;cssTarget: 'chrome80',;outDir: 'dist',;minify: 'terser',;terserOptions: {compress: {drop_console: false,;},;},;rollupOptions: {output: {manualChunks: {'react-vendor': ['react', 'react-dom', 'react-router-dom'],;'ui-vendor': ['@heroicons/react', 'chart.js', 'react-chartjs-2'],;},;},;},;},;};})