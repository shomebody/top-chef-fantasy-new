=== client + Root Structure ===
top-chef-fantasy/
  .gitignore
  README.md
  client\.env.example
  client\.eslintrc.cjs
  client\index.html
  client\package.json
  client\postcss.config.cjs
  client\public\logo.svg
  client\src\App.jsx
  client\src\components\auth\ProtectedRoute.jsx
  client\src\components\chat\ChatMessage.jsx
  client\src\components\chat\ChatPanel.jsx
  client\src\components\navigation\Header.jsx
  client\src\components\navigation\MobileNav.jsx
  client\src\components\navigation\Sidebar.jsx
  client\src\components\ui\Button.jsx
  client\src\components\ui\Card.jsx
  client\src\components\ui\Input.jsx
  client\src\components\ui\LoadingScreen.jsx
  client\src\components\ui\Logo.jsx
  client\src\components\ui\ThemeToggle.jsx
  client\src\config\firebase.ts
  client\src\context\AuthContext.tsx
  client\src\context\ChefContext.jsx
  client\src\context\LeagueContext.jsx
  client\src\context\SocketContext.jsx
  client\src\context\ThemeContext.jsx
  client\src\context\UserContext.jsx
  client\src\hooks\useAuth.jsx
  client\src\hooks\useChat.jsx
  client\src\hooks\useChef.jsx
  client\src\hooks\useLeague.jsx
  client\src\hooks\useSocket.jsx
  client\src\hooks\useTheme.jsx
  client\src\hooks\useUserProfile.jsx
  client\src\index.css
  client\src\layouts\AuthLayout.jsx
  client\src\layouts\MainLayout.jsx
  client\src\main.jsx
  client\src\pages\ChefRoster.jsx
  client\src\pages\Dashboard.jsx
  client\src\pages\LeagueDetail.jsx
  client\src\pages\Leagues.jsx
  client\src\pages\Login.jsx
  client\src\pages\NotFound.jsx
  client\src\pages\Register.jsx
  client\src\pages\Schedule.jsx
  client\src\pages\Settings.jsx
  client\src\services\api.js
  client\src\services\authService.ts
  client\src\services\challengeService.js
  client\src\services\chefService.js
  client\src\services\leagueService.js
  client\src\services\messageService.js
  client\src\services\userService.js
  client\src\types\axios-retry.d.ts
  client\src\vite-env.d.ts
  client\tailwind.config.ts
  client\tsconfig.json
  client\tsconfig.node.json
  client\vite.config.js
  start.bat
  start.sh

=== client + Root Contents ===

--- .gitignore ---
1: # Dependencies
2: node_modules
3: .pnp
4: .pnp.js
5: 
6: # Testing
7: coverage
8: 
9: # Production
10: build
11: dist
12: dist-ssr
13: 
14: # Environment variables
15: .env
16: .env.local
17: .env.development.local
18: .env.test.local
19: .env.production.local
20: 
21: # Logs
22: logs
23: *.log
24: npm-debug.log*
25: yarn-debug.log*
26: yarn-error.log*
27: pnpm-debug.log*
28: lerna-debug.log*
29: 
30: # Editor directories and files
31: .vscode/*
32: !.vscode/extensions.json
33: .idea
34: .DS_Store
35: *.suo
36: *.ntvs*
37: *.njsproj
38: *.sln
39: *.sw?
40: 
41: # Firebase credentials
42: firebase-service-account.json
43: *-service-account.json
44: service-account*.json
45: firebaseConfig.ts

--- client\.env.example ---
1: # API Configuration
2: VITE_API_URL=http://localhost:5000/api
3: VITE_SOCKET_URL=http://localhost:5000
4: 

--- client\.eslintrc.cjs ---
1: module.exports = {
2:   root: true,
3:   env: { browser: true, es2020: true, node: true },
4:   extends: [
5:     'eslint:recommended',
6:     'plugin:react/recommended',
7:     'plugin:react/jsx-runtime',
8:     'plugin:react-hooks/recommended',
9:     'plugin:@typescript-eslint/recommended' // Added for TypeScript
10:   ],
11:   ignorePatterns: ['dist', '.eslintrc.cjs'],
12:   parser: '@typescript-eslint/parser', // Use TS parser for JS/JSX
13:   parserOptions: { 
14:     ecmaVersion: 'latest', 
15:     sourceType: 'module',
16:     project: './tsconfig.json' // Link to your TS config
17:   },
18:   settings: { react: { version: '19.0' } },
19:   plugins: ['react-refresh', '@typescript-eslint'],
20:   rules: {
21:     'react-refresh/only-export-components': [
22:       'warn',
23:       { allowConstantExport: true }
24:     ],
25:     'react/prop-types': 'off',
26:     'no-unused-vars': 'off', // Turn off base rule
27:     '@typescript-eslint/no-unused-vars': ['warn'], // Use TS version
28:     'no-console': 'off',
29:     '@typescript-eslint/no-explicit-any': 'off' // Relax TS strictness
30:   }
31: };

--- client\index.html ---
1: <!DOCTYPE html>
2: <html lang="en">
3:   <head>
4:     <meta charset="UTF-8" />
5:     <link rel="icon" type="image/svg+xml" href="/logo.svg" />
6:     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
7:     <title>Top Chef Fantasy League</title>
8:     <meta name="description" content="Fantasy league app for Top Chef fans" />
9:     <link rel="preconnect" href="https://fonts.googleapis.com">
10:     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
11:     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Bebas+Neue&display=swap" rel="stylesheet">
12:   </head>
13:   <body class="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
14:     <div id="root"></div>
15:     <script type="module" src="/src/main.jsx"></script>
16:   </body>
17: </html>
18: 

--- client\package.json ---
1: {
2:   "name": "top-chef-fantasy",
3:   "private": true,
4:   "version": "0.1.0",
5:   "type": "module",
6:   "scripts": {
7:     "dev": "vite",
8:     "build": "vite build",
9:     "preview": "vite preview",
10:     "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
11:     "predev": "node -e \"require('child_process').exec('kill-port 5173 5174', (err) => { if (err) console.log('Ports already free or error:', err); })\""
12:   },
13:   "dependencies": {
14:     "@heroicons/react": "^2.1.4",
15:     "axios": "1.8.4",
16:     "axios-retry": "^4.5.0",
17:     "chart.js": "4.4.4",
18:     "date-fns": "4.1.0",
19:     "firebase": "^11.5.0",
20:     "react": "19.0.0",
21:     "react-chartjs-2": "^5.2.0",
22:     "react-dom": "19.0.0",
23:     "react-router-dom": "7.4.0",
24:     "socket.io-client": "^4.7.5"
25:   },
26:   "devDependencies": {
27:     "@types/react": "19.0.12",
28:     "@types/react-dom": "19.0.4",
29:     "@vitejs/plugin-react": "^4.3.4",
30:     "autoprefixer": "^10.4.21",
31:     "eslint": "^8.56.0",
32:     "eslint-plugin-react": "^7.33.2",
33:     "eslint-plugin-react-hooks": "^4.6.0",
34:     "eslint-plugin-react-refresh": "^0.4.5",
35:     "kill-port": "^2.0.1",
36:     "postcss": "^8.5.3",
37:     "tailwindcss": "^3.4.17",
38:     "vite": "^6.2.3"
39:   }
40: }
41: 

--- client\postcss.config.cjs ---
1: module.exports = {
2:   plugins: {
3:     tailwindcss: {},
4:     autoprefixer: {},
5:   },
6: };

--- client\public\logo.svg ---
1: <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">
2:   <circle cx="50" cy="50" r="45" fill="#f59e0b" />
3:   <text x="50" y="50" font-size="50" text-anchor="middle" dominant-baseline="central" fill="white" font-family="Arial, sans-serif" font-weight="bold">TC</text>
4:   <text x="50" y="70" font-size="16" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-weight="bold">FANTASY</text>
5: </svg>
6: 

--- client\src\App.jsx ---
1: // client/src/App.jsx
2: import { useState, useEffect } from 'react';
3: import { Routes, Route, Navigate } from 'react-router-dom';
4: import { useAuth } from './hooks/useAuth';
5: import { useTheme } from './hooks/useTheme';
6: import { LeagueProvider } from './context/LeagueContext';
7: import { ChefProvider } from './context/ChefContext';
8: import { UserProvider } from './context/UserContext';
9: 
10: // Layouts
11: import MainLayout from './layouts/MainLayout';
12: import AuthLayout from './layouts/AuthLayout';
13: 
14: // Pages
15: import Dashboard from './pages/Dashboard';
16: import ChefRoster from './pages/ChefRoster';
17: import Leagues from './pages/Leagues';
18: import LeagueDetail from './pages/LeagueDetail';
19: import Schedule from './pages/Schedule';
20: import Settings from './pages/Settings';
21: import Login from './pages/Login';
22: import Register from './pages/Register';
23: import NotFound from './pages/NotFound';
24: 
25: // Components
26: import ProtectedRoute from './components/auth/ProtectedRoute';
27: import LoadingScreen from './components/ui/LoadingScreen';
28: 
29: const App = () => {
30:   const { isAuthenticated = false, loading = true, user = null, error = null } = useAuth();
31:   const { theme = 'light' } = useTheme();
32:   const [appReady, setAppReady] = useState(false);
33: 
34:   // Debug environment and authentication
35:   useEffect(() => {
36:     console.group('App Environment Check');
37:     console.log('API URL:', import.meta.env.VITE_API_URL);
38:     console.log('Socket URL:', import.meta.env.VITE_SOCKET_URL);
39:     
40:     // Test localStorage
41:     try {
42:       localStorage.setItem('test-key', 'test-value');
43:       const testValue = localStorage.getItem('test-key');
44:       console.log('LocalStorage working:', testValue === 'test-value');
45:       localStorage.removeItem('test-key');
46:     } catch (err) {
47:       console.error('LocalStorage error:', err);
48:     }
49:     
50:     // Check authentication state
51:     const token = localStorage.getItem('token');
52:     console.log('Token in storage:', !!token);
53:     if (token) {
54:       console.log('Token length:', token.length);
55:       console.log('Token preview:', token.substring(0, 10) + '...');
56:     }
57:     
58:     console.groupEnd();
59:   }, []);
60: 
61:   // Debug auth state changes
62:   useEffect(() => {
63:     console.group('Auth State Update');
64:     console.log('isAuthenticated:', isAuthenticated);
65:     console.log('loading:', loading);
66:     console.log('user:', user);
67:     console.log('error:', error);
68:     console.groupEnd();
69:   }, [isAuthenticated, loading, user, error]);
70: 
71:   useEffect(() => {
72:     if (!loading) {
73:       console.log('Auth loading complete, setting appReady timer');
74:       const timer = setTimeout(() => {
75:         setAppReady(true);
76:         console.log('App ready set to true');
77:       }, 300);
78:       return () => {
79:         clearTimeout(timer);
80:         console.log('App ready timer cleared');
81:       };
82:     }
83:   }, [loading]);
84: 
85:   if (loading || !appReady) {
86:     console.log('Rendering LoadingScreen - loading:', loading, 'appReady:', appReady);
87:     return <LoadingScreen />;
88:   }
89: 
90:   console.log('Rendering main App - authenticated:', isAuthenticated);
91:   return (
92:     <div className={`app ${theme === 'dark' ? 'dark' : ''}`}>
93:       <UserProvider>
94:         <LeagueProvider>
95:           <ChefProvider>
96:             <Routes>
97:               {/* Auth Routes */}
98:               <Route element={<AuthLayout />}>
99:                 <Route
100:                   path="/login"
101:                   element={isAuthenticated ? <Navigate to="/" /> : <Login />}
102:                 />
103:                 <Route
104:                   path="/register"
105:                   element={isAuthenticated ? <Navigate to="/" /> : <Register />}
106:                 />
107:               </Route>
108:               {/* Protected Routes */}
109:               <Route element={<ProtectedRoute />}>
110:                 <Route element={<MainLayout />}>
111:                   <Route path="/" element={<Dashboard />} />
112:                   <Route path="/chefs" element={<ChefRoster />} />
113:                   <Route path="/leagues" element={<Leagues />} />
114:                   <Route path="/leagues/:id" element={<LeagueDetail />} />
115:                   <Route path="/schedule" element={<Schedule />} />
116:                   <Route path="/settings" element={<Settings />} />
117:                 </Route>
118:               </Route>
119:               {/* 404 Route */}
120:               <Route path="*" element={<NotFound />} />
121:             </Routes>
122:           </ChefProvider>
123:         </LeagueProvider>
124:       </UserProvider>
125:     </div>
126:   );
127: };
128: 
129: export default App;

--- client\src\components\auth\ProtectedRoute.jsx ---
1: import React from 'react';
2: import { Navigate, Outlet } from 'react-router-dom';
3: import { useAuth } from '../../hooks/useAuth.jsx';
4: import LoadingScreen from '../ui/LoadingScreen.jsx';
5: 
6: const ProtectedRoute = () => {
7:   const { isAuthenticated, loading } = useAuth();
8: 
9:   if (loading) {
10:     return <LoadingScreen />;
11:   }
12: 
13:   return isAuthenticated ? <Outlet /> : <Navigate to="/login" />;
14: };
15: 
16: export default ProtectedRoute;
17: 
18: 

--- client\src\components\chat\ChatMessage.jsx ---
1: 
2: import { formatDistanceToNow } from 'date-fns';
3: 
4: /**
5:  * @typedef {Object} Message
6:  * @property {string} type - The type of the message (e.g., 'system').
7:  * @property {string} content - The content of the message.
8:  * @property {string} [createdAt] - The timestamp of when the message was created.
9:  * @property {Object} [sender] - The sender of the message.
10:  * @property {string} [sender.name] - The name of the sender.
11:  */
12: 
13: /**
14:  * @param {{ message: Message, isOwnMessage: boolean }} props
15:  */
16: const ChatMessage = ({ message, isOwnMessage }) => {
17:   // Format the timestamp
18:   const formattedTime = message.createdAt
19:     ? formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })
20:     : '';
21: 
22:   // System message
23:   if (message.type === 'system') {
24:     return (
25:       <div className="text-center text-xs text-gray-500 dark:text-gray-400 py-2">
26:         {message.content}
27:       </div>
28:     );
29:   }
30: 
31:   return (
32:     <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>
33:       <div className="max-w-[75%]">
34:         {/* Message bubble */}
35:         <div
36:           className={`rounded-lg px-4 py-2 inline-block ${
37:             isOwnMessage
38:               ? 'bg-blue-500 text-white'
39:               : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100'
40:           }`}
41:         >
42:           {!isOwnMessage && (
43:             <div className="font-medium text-xs mb-1">
44:               {message.sender?.name || 'Unknown'}
45:             </div>
46:           )}
47:           <div className="break-words">{message.content}</div>
48:         </div>
49: 
50:         {/* Timestamp */}
51:         <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
52:           {formattedTime}
53:         </div>
54:       </div>
55: 
56:       {/* Avatar */}
57:       <div className="flex-shrink-0 ml-2">
58:         {!isOwnMessage && (
59:           <div className="w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center text-gray-700 dark:text-gray-300">
60:             {message.sender?.name?.charAt(0) || '?'}
61:           </div>
62:         )}
63:       </div>
64:     </div>
65:   );
66: };
67: 
68: export default ChatMessage;

--- client\src\components\chat\ChatPanel.jsx ---
1: import { useState, useEffect, useRef } from 'react';
2: import { useLeague } from '../../hooks/useLeague.jsx';
3: import { useChat } from '../../hooks/useChat.jsx';
4: import { useAuth } from '../../hooks/useAuth.jsx';
5: import ChatMessage from './ChatMessage.jsx';
6: 
7: // JSDoc type definitions for TypeScript checking
8: /**
9:  * @typedef {Object} User
10:  * @property {string} _id
11:  */
12: 
13: /**
14:  * @typedef {Object} League
15:  * @property {string} _id
16:  */
17: 
18: /**
19:  * @typedef {Object} ChatMessage
20:  * @property {string} _id
21:  * @property {Object} [sender]
22:  * @property {string} sender._id
23:  * @property {string} sender.name
24:  * @property {string} content
25:  * @property {string} [createdAt]
26:  */
27: 
28: /**
29:  * Chat Panel Component
30:  * @param {Object} props
31:  * @param {Function} props.onClose - Function to close the chat panel
32:  */
33: const ChatPanel = ({ onClose }) => {
34:   const [message, setMessage] = useState('');
35:   const messagesEndRef = useRef(null);
36:   const inputRef = useRef(null);
37:   
38:   // Get league and user data
39:   const { currentLeague } = useLeague();
40:   const { user } = useAuth();
41: 
42:   // Use chat hook (destructuring directly avoids the void type check issue)
43:   const { 
44:     messages = [], 
45:     loading = false, 
46:     error = null, 
47:     typingUsers = [], 
48:     sendMessage = () => {}, 
49:     sendTypingIndicator = () => {} 
50:   } = useChat(currentLeague?._id);
51: 
52:   // Scroll to bottom when messages change
53:   useEffect(() => {
54:     if (messagesEndRef.current) {
55:       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
56:     }
57:   }, [messages]);
58: 
59:   // Focus input on mount
60:   useEffect(() => {
61:     if (inputRef.current) {
62:       inputRef.current.focus();
63:     }
64:   }, []);
65: 
66:   // Define handlers with proper event types
67:   const handleSendMessage = (e) => {
68:     e.preventDefault();
69:     if (message.trim() && currentLeague) {
70:       // Don't pass any arguments if sendMessage doesn't accept them
71:       sendMessage(message.trim());
72:       setMessage('');
73:     }
74:   };
75: 
76:   const handleInputChange = (e) => {
77:     setMessage(e.target.value);
78:     sendTypingIndicator();
79:   };
80: 
81:   // Define a proper React event handler for onClick
82:   const handleClose = (e) => {
83:     onClose();
84:   };
85: 
86:   return (
87:     <div className="h-full flex flex-col">
88:       {/* Header */}
89:       <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
90:         <h3 className="font-semibold text-gray-900 dark:text-white">League Chat</h3>
91:         <button
92:           onClick={handleClose}
93:           className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
94:           aria-label="Close chat"
95:         >
96:           <svg
97:             xmlns="http://www.w3.org/2000/svg"
98:             className="h-5 w-5"
99:             viewBox="0 0 20 20"
100:             fill="currentColor"
101:           >
102:             <path
103:               fillRule="evenodd"
104:               d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
105:               clipRule="evenodd"
106:             />
107:           </svg>
108:         </button>
109:       </div>
110: 
111:       {/* Messages */}
112:       <div className="flex-1 overflow-y-auto p-4 space-y-4">
113:         {loading ? (
114:           <div className="flex justify-center items-center h-full">
115:             <svg
116:               className="animate-spin h-8 w-8 text-primary-600"
117:               xmlns="http://www.w3.org/2000/svg"
118:               fill="none"
119:               viewBox="0 0 24 24"
120:             >
121:               <circle
122:                 className="opacity-25"
123:                 cx="12"
124:                 cy="12"
125:                 r="10"
126:                 stroke="currentColor"
127:                 strokeWidth="4"
128:               />
129:               <path
130:                 className="opacity-75"
131:                 fill="currentColor"
132:                 d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
133:               />
134:             </svg>
135:           </div>
136:         ) : error ? (
137:           <div className="text-center text-red-500 dark:text-red-400">{error}</div>
138:         ) : (
139:           <>
140:             {messages.length === 0 ? (
141:               <div className="text-center text-gray-500 dark:text-gray-400 py-8">
142:                 No messages yet. Start the conversation!
143:               </div>
144:             ) : (
145:               messages.map((msg) => (
146:                 <ChatMessage
147:                   key={msg._id}
148:                   message={msg}
149:                   isOwnMessage={msg.sender?._id === user?._id}
150:                 />
151:               ))
152:             )}
153: 
154:             {typingUsers.length > 0 && (
155:               <div className="text-gray-500 dark:text-gray-400 text-sm">
156:                 {typingUsers.length === 1
157:                   ? `${typingUsers[0].username} is typing...`
158:                   : `${typingUsers.length} people are typing...`}
159:               </div>
160:             )}
161: 
162:             <div ref={messagesEndRef} />
163:           </>
164:         )}
165:       </div>
166: 
167:       {/* Input */}
168:       <div className="p-4 border-t border-gray-200 dark:border-gray-700">
169:         <form onSubmit={handleSendMessage} className="flex">
170:           <input
171:             ref={inputRef}
172:             type="text"
173:             className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
174:             placeholder="Type a message..."
175:             value={message}
176:             onChange={handleInputChange}
177:             disabled={!currentLeague}
178:           />
179:           <button
180:             type="submit"
181:             className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-r-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
182:             disabled={!message.trim() || !currentLeague}
183:             aria-label="Send message"
184:           >
185:             <svg
186:               xmlns="http://www.w3.org/2000/svg"
187:               className="h-5 w-5"
188:               viewBox="0 0 20 20"
189:               fill="currentColor"
190:             >
191:               <path
192:                 fillRule="evenodd"
193:                 d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z"
194:                 clipRule="evenodd"
195:               />
196:             </svg>
197:           </button>
198:         </form>
199:       </div>
200:     </div>
201:   );
202: };
203: 
204: export default ChatPanel;

--- client\src\components\navigation\Header.jsx ---
1: import React from 'react';
2: import { Link } from 'react-router-dom';
3: import { useAuth } from '../../hooks/useAuth.jsx';
4: import { useLeague } from '../../hooks/useLeague.jsx';
5: import ThemeToggle from '../ui/ThemeToggle.jsx';
6: 
7: const Header = ({ 
8:   toggleChat = () => {}, 
9:   isChatOpen = false 
10: }) => {
11:   // Add defaults for context values
12:   const { user = null } = useAuth();
13:   const { currentLeague = null, leagues = [], switchLeague = () => {} } = useLeague();
14:   
15:   return (
16:     <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center justify-between">
17:       <div className="flex items-center space-x-4">
18:         {/* League selector */}
19:         {leagues.length > 0 && (
20:           <div className="relative">
21:             <select
22:               className="appearance-none bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg py-2 pl-3 pr-10 text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
23:               value={currentLeague?._id || ''}
24:               onChange={(e) => switchLeague(e.target.value)}
25:               aria-label="Select league"
26:             >
27:               {leagues.map((league) => (
28:                 <option key={league._id || Math.random().toString()} value={league._id || ''}>
29:                   {league.name || 'Unnamed League'}
30:                 </option>
31:               ))}
32:             </select>
33:             <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300">
34:               <svg className="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
35:                 <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
36:               </svg>
37:             </div>
38:           </div>
39:         )}
40:         
41:         {/* League actions */}
42:         {currentLeague && (
43:           <div className="hidden md:flex items-center space-x-2">
44:             <Link
45:               to="/leagues"
46:               className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white"
47:             >
48:               View Details
49:             </Link>
50:           </div>
51:         )}
52:       </div>
53:       
54:       <div className="flex items-center space-x-3">
55:         {/* Chat toggle */}
56:         <button
57:           type="button"
58:           onClick={toggleChat}
59:           className="p-2 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none relative"
60:           aria-label={isChatOpen ? 'Close chat' : 'Open chat'}
61:         >
62:           <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
63:             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
64:           </svg>
65:           {/* Notification badge - can be conditionally rendered */}
66:           <span className="absolute top-0 right-0 h-3 w-3 rounded-full bg-primary-500"></span>
67:         </button>
68:         
69:         {/* Theme toggle - visible on desktop */}
70:         <div className="hidden md:block">
71:           <ThemeToggle />
72:         </div>
73:         
74:         {/* User menu */}
75:         <div className="relative">
76:           <Link to="/settings" className="flex items-center space-x-2" aria-label="User settings">
77:             <div className="w-8 h-8 rounded-full bg-primary-200 dark:bg-primary-800 flex items-center justify-center text-primary-700 dark:text-primary-300">
78:               {user?.name?.charAt(0) || '?'}
79:             </div>
80:             <span className="hidden md:inline-block text-sm font-medium text-gray-700 dark:text-gray-200">
81:               {user?.name || 'User'}
82:             </span>
83:           </Link>
84:         </div>
85:       </div>
86:     </header>
87:   );
88: };
89: 
90: export default Header;

--- client\src\components\navigation\MobileNav.jsx ---
1: import { NavLink } from 'react-router-dom';
2: 
3: const MobileNav = ({ toggleChat, isChatOpen }) => {
4:   const getNavClasses = ({ isActive }) => {
5:     return `flex flex-col items-center justify-center text-xs ${
6:       isActive ? 'text-primary-600 dark:text-primary-400' : 'text-gray-600 dark:text-gray-400'
7:     }`;
8:   };
9:   
10:   return (
11:     <div className="md:hidden fixed bottom-0 left-0 right-0 h-16 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 flex items-center justify-around px-4">
12:       <NavLink to="/" className={getNavClasses}>
13:         <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
14:           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
15:         </svg>
16:         <span className="mt-1">Home</span>
17:       </NavLink>
18:       
19:       <NavLink to="/leagues" className={getNavClasses}>
20:         <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
21:         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
22:         </svg>
23:         <span className="mt-1">Leagues</span>
24:       </NavLink>
25:       
26:       <button 
27:   type="button"
28:   onClick={toggleChat}
29:   className="flex flex-col items-center justify-center text-xs text-gray-600 dark:text-gray-400 focus:outline-none relative"
30: >
31:         <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
32:           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
33:         </svg>
34:         <span className="mt-1">Chat</span>
35:         
36:         {/* Notification badge - conditionally rendered */}
37:         <span className="absolute top-0 right-2 h-2 w-2 rounded-full bg-primary-500"></span>
38:       </button>
39:       
40:       <NavLink to="/chefs" className={getNavClasses}>
41:         <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
42:           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
43:         </svg>
44:         <span className="mt-1">Chefs</span>
45:       </NavLink>
46:       
47:       <NavLink to="/settings" className={getNavClasses}>
48:         <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
49:           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
50:           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
51:         </svg>
52:         <span className="mt-1">Settings</span>
53:       </NavLink>
54:     </div>
55:   );
56: };
57: 
58: export default MobileNav;

--- client\src\components\navigation\Sidebar.jsx ---
1: import React from 'react';
2: import { NavLink } from 'react-router-dom';
3: import Logo from '../ui/Logo.jsx';
4: import ThemeToggle from '../ui/ThemeToggle.jsx';
5: import { useAuth } from '../../hooks/useAuth.jsx';
6: 
7: const Sidebar = ({ collapsed, onToggle }) => {
8:   const { logout } = useAuth();
9: 
10:   // Define dynamic TailwindCSS classes for NavLink based on active state
11:   const getNavClasses = ({ isActive }) =>
12:     `flex items-center px-4 py-3 rounded-lg transition-colors ${
13:       isActive
14:         ? 'bg-blue-500 text-white'
15:         : 'text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
16:     }`;
17: 
18:   return (
19:     <div className="h-full flex flex-col bg-white dark:bg-gray-800">
20:       {/* Logo and collapse toggle */}
21:       <div className="py-4 flex items-center justify-between px-4">
22:         {!collapsed && <Logo size="md" />}
23:         <button
24:           onClick={onToggle}
25:           className="p-1.5 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
26:           aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
27:         >
28:           {collapsed ? (
29:             <svg
30:               xmlns="http://www.w3.org/2000/svg"
31:               className="h-5 w-5"
32:               viewBox="0 0 20 20"
33:               fill="currentColor"
34:             >
35:               <path
36:                 fillRule="evenodd"
37:                 d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
38:                 clipRule="evenodd"
39:               />
40:             </svg>
41:           ) : (
42:             <svg
43:               xmlns="http://www.w3.org/2000/svg"
44:               className="h-5 w-5"
45:               viewBox="0 0 20 20"
46:               fill="currentColor"
47:             >
48:               <path
49:                 fillRule="evenodd"
50:                 d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
51:                 clipRule="evenodd"
52:               />
53:             </svg>
54:           )}
55:         </button>
56:       </div>
57: 
58:       {/* Navigation links */}
59:       <nav className="mt-2 flex-1 px-2">
60:         <ul className="space-y-1">
61:           <li>
62:             <NavLink to="/" className={getNavClasses}>
63:               <svg
64:                 xmlns="http://www.w3.org/2000/svg"
65:                 className="h-5 w-5"
66:                 viewBox="0 0 20 20"
67:                 fill="currentColor"
68:               >
69:                 <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
70:               </svg>
71:               {!collapsed && <span className="ml-3">Dashboard</span>}
72:             </NavLink>
73:           </li>
74:           <li>
75:             <NavLink to="/leagues" className={getNavClasses}>
76:               <svg
77:                 xmlns="http://www.w3.org/2000/svg"
78:                 className="h-5 w-5"
79:                 viewBox="0 0 20 20"
80:                 fill="currentColor"
81:               >
82:                 <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
83:               </svg>
84:               {!collapsed && <span className="ml-3">Leagues</span>}
85:             </NavLink>
86:           </li>
87:           <li>
88:             <NavLink to="/chefs" className={getNavClasses}>
89:               <svg
90:                 xmlns="http://www.w3.org/2000/svg"
91:                 className="h-5 w-5"
92:                 viewBox="0 0 20 20"
93:                 fill="currentColor"
94:               >
95:                 <path
96:                   fillRule="evenodd"
97:                   d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
98:                   clipRule="evenodd"
99:                 />
100:               </svg>
101:               {!collapsed && <span className="ml-3">Chefs</span>}
102:             </NavLink>
103:           </li>
104:           <li>
105:             <NavLink to="/schedule" className={getNavClasses}>
106:               <svg
107:                 xmlns="http://www.w3.org/2000/svg"
108:                 className="h-5 w-5"
109:                 viewBox="0 0 20 20"
110:                 fill="currentColor"
111:               >
112:                 <path
113:                   fillRule="evenodd"
114:                   d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
115:                   clipRule="evenodd"
116:                 />
117:               </svg>
118:               {!collapsed && <span className="ml-3">Schedule</span>}
119:             </NavLink>
120:           </li>
121:         </ul>
122:       </nav>
123: 
124:       {/* Bottom section */}
125:       <div className="mt-auto px-2">
126:         <div className="py-4 border-t border-gray-200 dark:border-gray-700">
127:           <ul className="space-y-1">
128:             <li>
129:               <NavLink to="/settings" className={getNavClasses}>
130:                 <svg
131:                   xmlns="http://www.w3.org/2000/svg"
132:                   className="h-5 w-5"
133:                   viewBox="0 0 20 20"
134:                   fill="currentColor"
135:                 >
136:                   <path
137:                     fillRule="evenodd"
138:                     d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
139:                     clipRule="evenodd"
140:                   />
141:                 </svg>
142:                 {!collapsed && <span className="ml-3">Settings</span>}
143:               </NavLink>
144:             </li>
145:             <li>
146:               <button
147:                 onClick={logout}
148:                 className="w-full flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors"
149:               >
150:                 <svg
151:                   xmlns="http://www.w3.org/2000/svg"
152:                   className="h-5 w-5"
153:                   viewBox="0 0 20 20"
154:                   fill="currentColor"
155:                 >
156:                   <path
157:                     fillRule="evenodd"
158:                     d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 10h-3a1 1 0 110-2h3a1 1 0 110 2zm-7-4a2 2 0 100-4 2 2 0 000 4zm5 4a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a5 5 0 0110 0v2z"
159:                     clipRule="evenodd"
160:                   />
161:                 </svg>
162:                 {!collapsed && <span className="ml-3">Logout</span>}
163:               </button>
164:             </li>
165:             {!collapsed && (
166:               <li className="mt-3 flex justify-center">
167:                 <ThemeToggle />
168:               </li>
169:             )}
170:           </ul>
171:         </div>
172:       </div>
173:     </div>
174:   );
175: };
176: 
177: export default Sidebar;

--- client\src\components\ui\Button.jsx ---
1: import React from 'react';
2: 
3: /**
4:  * Button component with proper TypeScript support
5:  */
6: const Button = ({ 
7:   children = null, 
8:   variant = 'primary', 
9:   size = 'md', 
10:   fullWidth = false, 
11:   isLoading = false, 
12:   disabled = false, 
13:   icon = null,
14:   onClick = () => {},
15:   type = 'button', 
16:   className = '',
17:   ...props 
18: }) => {
19:   // Narrow the type to only allowed HTML button types
20:   const buttonType = (type === 'submit' || type === 'reset' || type === 'button') ? type : 'button';
21:   
22:   const baseClasses = 'inline-flex items-center justify-center rounded-lg font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2';
23:   
24:   const variantClasses = {
25:     primary: 'bg-primary-600 hover:bg-primary-700 text-white focus:ring-primary-500',
26:     secondary: 'bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200 focus:ring-gray-500',
27:     outline: 'border border-gray-300 hover:bg-gray-50 text-gray-700 dark:border-gray-600 dark:hover:bg-gray-800 dark:text-gray-300 focus:ring-gray-500',
28:     danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
29:   };
30:   
31:   const sizeClasses = {
32:     sm: 'px-3 py-1.5 text-sm',
33:     md: 'px-4 py-2',
34:     lg: 'px-6 py-3 text-lg',
35:   };
36:   
37:   const classes = `
38:     ${baseClasses}
39:     ${variantClasses[variant] || variantClasses.primary}
40:     ${sizeClasses[size] || sizeClasses.md}
41:     ${fullWidth ? 'w-full' : ''}
42:     ${isLoading || disabled ? 'opacity-60 cursor-not-allowed' : ''}
43:     ${className}
44:   `;
45:   
46:   return (
47:     <button
48:       type={buttonType}
49:       onClick={onClick}
50:       disabled={disabled || isLoading}
51:       className={classes}
52:       {...props}
53:     >
54:       {isLoading ? (
55:         <>
56:           <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true">
57:             <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
58:             <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
59:           </svg>
60:           {children}
61:         </>
62:       ) : (
63:         <>
64:           {icon && <span className="mr-2">{icon}</span>}
65:           {children}
66:         </>
67:       )}
68:     </button>
69:   );
70: };
71: 
72: export default Button;

--- client\src\components\ui\Card.jsx ---
1: import React from 'react';
2: 
3: const Card = ({ 
4:   children, 
5:   title = '',
6:   subtitle = '',
7:   action = null,
8:   className = '',
9:   padding = 'md',
10:   hover = false,
11:   bordered = false
12: }) => {
13:   const paddingClasses = {
14:     none: '',
15:     sm: 'p-3',
16:     md: 'p-4',
17:     lg: 'p-6'
18:   };
19:   
20:   const borderClass = bordered ? 'border border-gray-200 dark:border-gray-700' : '';
21:   const hoverClass = hover ? 'hover:shadow-card-hover hover:-translate-y-1' : '';
22:   
23:   const cardClass = `
24:     bg-white dark:bg-gray-800 rounded-lg shadow-sm
25:     ${borderClass}
26:     ${hoverClass}
27:     ${className}
28:     transition-all duration-200
29:   `;
30:   
31:   return (
32:     <div className={cardClass}>
33:       {(title || action) && (
34:         <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
35:           <div>
36:             {title && <h3 className="font-semibold text-gray-900 dark:text-white">{title}</h3>}
37:             {subtitle && <p className="text-sm text-gray-500 dark:text-gray-400">{subtitle}</p>}
38:           </div>
39:           {action && <div>{action}</div>}
40:         </div>
41:       )}
42:       <div className={paddingClasses[padding] || paddingClasses.md}>
43:         {children}
44:       </div>
45:     </div>
46:   );
47: };
48: 
49: export default Card;

--- client\src\components\ui\Input.jsx ---
1: // @ts-nocheck
2: import React, { forwardRef } from 'react';
3: 
4: /**
5:  * Input component
6:  */
7: const Input = forwardRef(function Input(props, ref) {
8:   // Destructure props with defaults after function declaration
9:   const {
10:     label = '',
11:     error = '',
12:     type = 'text',
13:     id = '',
14:     name = '',
15:     placeholder = '',
16:     required = false,
17:     disabled = false,
18:     helper = '',
19:     className = '',
20:     onChange = () => {},
21:     ...rest
22:   } = props;
23: 
24:   const inputId = id || name || `input-${Math.random().toString(36).substr(2, 9)}`;
25: 
26:   const inputClasses = `w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} ${disabled ? 'bg-gray-100 dark:bg-gray-700 cursor-not-allowed' : 'bg-white dark:bg-gray-800'} dark:text-white ${className}`;
27: 
28:   return (
29:     <div className="mb-4">
30:       {label && (
31:         <label htmlFor={inputId} className="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
32:           {label}
33:           {required && <span className="text-red-500 ml-1">*</span>}
34:         </label>
35:       )}
36:       <input
37:         ref={ref}
38:         type={type}
39:         id={inputId}
40:         name={name}
41:         className={inputClasses}
42:         placeholder={placeholder}
43:         disabled={disabled}
44:         required={required}
45:         onChange={onChange}
46:         aria-invalid={!!error}
47:         aria-describedby={error ? `${inputId}-error` : helper ? `${inputId}-helper` : undefined}
48:         {...rest}
49:       />
50:       {error && (
51:         <p className="mt-1 text-sm text-red-600 dark:text-red-400" id={`${inputId}-error`}>
52:           {error}
53:         </p>
54:       )}
55:       {helper && !error && (
56:         <p className="mt-1 text-sm text-gray-500 dark:text-gray-400" id={`${inputId}-helper`}>
57:           {helper}
58:         </p>
59:       )}
60:     </div>
61:   );
62: });
63: 
64: Input.displayName = 'Input';
65: 
66: export default Input;

--- client\src\components\ui\LoadingScreen.jsx ---
1: import React from 'react';
2: import Logo from './Logo.jsx';
3: 
4: const LoadingScreen = () => {
5:   return (
6:     <div className="fixed inset-0 flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
7:       <div className="text-center">
8:         <Logo size="lg" />
9:         <div className="mt-8">
10:           <svg className="animate-spin h-10 w-10 text-primary-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
11:             <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
12:             <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
13:           </svg>
14:         </div>
15:         <p className="mt-4 text-gray-600 dark:text-gray-300">Loading your fantasy experience...</p>
16:       </div>
17:     </div>
18:   );
19: };
20: 
21: export default LoadingScreen;
22: 
23: 

--- client\src\components\ui\Logo.jsx ---
1: import React from 'react';
2: import { Link } from 'react-router-dom';
3: 
4: const Logo = ({ size = 'md' }) => {
5:   const sizeClasses = {
6:     sm: 'text-xl',
7:     md: 'text-2xl',
8:     lg: 'text-3xl'
9:   };
10: 
11:   return (
12:     <Link to="/" className="flex items-center">
13:       <span className="font-display text-primary-600 dark:text-primary-400">
14:         Top Chef Fantasy
15:       </span>
16:     </Link>
17:   );
18: };
19: 
20: export default Logo;
21: 
22: 

--- client\src\components\ui\ThemeToggle.jsx ---
1: import React from 'react';
2: import { useTheme } from '../../hooks/useTheme.jsx';
3: 
4: const ThemeToggle = () => {
5:   const { theme, toggleTheme } = useTheme();
6:   
7:   return (
8:     <button
9:       onClick={toggleTheme}
10:       className="p-2 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
11:       aria-label={theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'}
12:     >
13:       {theme === 'dark' ? (
14:         <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
15:           <path fillRule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clipRule="evenodd" />
16:         </svg>
17:       ) : (
18:         <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
19:           <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
20:         </svg>
21:       )}
22:     </button>
23:   );
24: };
25: 
26: export default ThemeToggle;
27: 
28: 

--- client\src\config\firebase.ts ---
1: // client/src/config/firebase.ts
2: import { initializeApp, type FirebaseApp } from 'firebase/app';
3: import { getAuth, type Auth } from 'firebase/auth';
4: import { getFirestore, type Firestore } from 'firebase/firestore';
5: import { getStorage, type FirebaseStorage } from 'firebase/storage';
6: 
7: // Firebase configuration from typed environment variables
8: const firebaseConfig = {
9:   apiKey: import.meta.env.VITE_FIREBASE_API_KEY as string,
10:   authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN as string,
11:   projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID as string,
12:   storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET as string,
13:   messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID as string,
14:   appId: import.meta.env.VITE_FIREBASE_APP_ID as string,
15: };
16: 
17: // Initialize Firebase
18: const app: FirebaseApp = initializeApp(firebaseConfig);
19: const auth: Auth = getAuth(app);
20: const db: Firestore = getFirestore(app);
21: const storage: FirebaseStorage = getStorage(app);
22: 
23: export { app, auth, db, storage };

--- client\src\context\AuthContext.tsx ---
1: // client/src/context/AuthContext.tsx
2: import { createContext, useState, useEffect, useMemo, useCallback, type ReactNode } from 'react';
3: import { onAuthStateChanged, type User } from 'firebase/auth';
4: import { doc, getDoc } from 'firebase/firestore';
5: import { auth, db } from '../config/firebase';
6: import AuthService from '../services/authService';
7: 
8: interface AuthContextType {
9:   user: {
10:     _id: string;
11:     name: string;
12:     email: string;
13:     emailVerified: boolean;
14:     isAdmin?: boolean;
15:   } | null;
16:   isAuthenticated: boolean;
17:   loading: boolean;
18:   error: string | null;
19:   login: (email: string, password: string) => Promise<any>;
20:   logout: () => Promise<void>;
21:   register: (userData: { email: string; password: string; name: string }) => Promise<any>;
22:   updateProfile: (userData: { name?: string; avatar?: string }) => Promise<any>;
23:   setError: (error: string | null) => void;
24: }
25: 
26: export const AuthContext = createContext<AuthContextType>({
27:   user: null,
28:   isAuthenticated: false,
29:   loading: true,
30:   error: null,
31:   login: async () => null,
32:   logout: async () => {},
33:   register: async () => null,
34:   updateProfile: async () => null,
35:   setError: () => {},
36: });
37: 
38: export function AuthProvider({ children }: { children: ReactNode }) {
39:   const [user, setUser] = useState<AuthContextType['user']>(null);
40:   const [isAuthenticated, setIsAuthenticated] = useState(false);
41:   const [loading, setLoading] = useState(true);
42:   const [error, setError] = useState<string | null>(null);
43: 
44:   useEffect(() => {
45:     const unsubscribe = onAuthStateChanged(auth, async (firebaseUser: User | null) => {
46:       setLoading(true);
47: 
48:       if (firebaseUser) {
49:         try {
50:           const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
51: 
52:           if (userDoc.exists()) {
53:             setUser({
54:               _id: firebaseUser.uid,
55:               ...userDoc.data(),
56:               emailVerified: firebaseUser.emailVerified,
57:             } as AuthContextType['user']);
58:             setIsAuthenticated(true);
59:           } else {
60:             console.warn('User document not found in Firestore');
61:             setUser({
62:               _id: firebaseUser.uid,
63:               name: firebaseUser.displayName || '',
64:               email: firebaseUser.email || '',
65:               emailVerified: firebaseUser.emailVerified,
66:             });
67:             setIsAuthenticated(true);
68:           }
69:         } catch (error) {
70:           console.error('Error fetching user profile:', error);
71:           setError('Failed to load user profile');
72:           setIsAuthenticated(false);
73:           setUser(null);
74:         }
75:       } else {
76:         setUser(null);
77:         setIsAuthenticated(false);
78:       }
79: 
80:       setLoading(false);
81:     });
82: 
83:     return () => unsubscribe();
84:   }, []);
85: 
86:   const login = useCallback(async (email: string, password: string) => {
87:     try {
88:       setLoading(true);
89:       setError(null);
90: 
91:       const user = await AuthService.login(email, password);
92:       return user;
93:     } catch (error: unknown) {
94:       console.error('Login error:', error);
95:       setError(mapAuthErrorToMessage(error));
96:       throw error;
97:     } finally {
98:       setLoading(false);
99:     }
100:   }, []);
101: 
102:   const logout = useCallback(async () => {
103:     try {
104:       await AuthService.logout();
105:     } catch (error: unknown) {
106:       console.error('Logout error:', error);
107:       setError(mapAuthErrorToMessage(error));
108:     }
109:   }, []);
110: 
111:   const register = useCallback(async (userData: { email: string; password: string; name: string }) => {
112:     try {
113:       setLoading(true);
114:       setError(null);
115: 
116:       const user = await AuthService.register(userData);
117:       return user;
118:     } catch (error: unknown) {
119:       console.error('Registration error:', error);
120:       setError(mapAuthErrorToMessage(error));
121:       throw error;
122:     } finally {
123:       setLoading(false);
124:     }
125:   }, []);
126: 
127:   const updateProfile = useCallback(async (userData: { name?: string; avatar?: string }) => {
128:     try {
129:       setLoading(true);
130:       setError(null);
131: 
132:       const updatedUser = await AuthService.updateProfile(userData);
133: 
134:       setUser((prev) => ({
135:         ...prev!,
136:         ...updatedUser,
137:       }));
138: 
139:       return updatedUser;
140:     } catch (error: unknown) {
141:       console.error('Update profile error:', error);
142:       setError(mapAuthErrorToMessage(error));
143:       throw error;
144:     } finally {
145:       setLoading(false);
146:     }
147:   }, []);
148: 
149:   const mapAuthErrorToMessage = (error: unknown): string => {
150:     const errorCode = (error as any).code;
151:     switch (errorCode) {
152:       case 'auth/invalid-email':
153:         return 'Invalid email address format';
154:       case 'auth/user-disabled':
155:         return 'This account has been disabled';
156:       case 'auth/user-not-found':
157:         return 'No account found with this email';
158:       case 'auth/wrong-password':
159:         return 'Incorrect password';
160:       case 'auth/email-already-in-use':
161:         return 'Email already in use';
162:       case 'auth/weak-password':
163:         return 'Password is too weak';
164:       case 'auth/operation-not-allowed':
165:         return 'Operation not allowed';
166:       case 'auth/account-exists-with-different-credential':
167:         return 'An account already exists with the same email address but different sign-in credentials';
168:       case 'auth/popup-closed-by-user':
169:         return 'Sign-in popup was closed before completing the sign-in';
170:       default:
171:         return (error as any).message || 'Authentication failed';
172:     }
173:   };
174: 
175:   const value = useMemo(
176:     () => ({
177:       user,
178:       isAuthenticated,
179:       loading,
180:       error,
181:       login,
182:       logout,
183:       register,
184:       updateProfile,
185:       setError,
186:     }),
187:     [user, isAuthenticated, loading, error, login, logout, register, updateProfile]
188:   );
189: 
190:   return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
191: }

--- client\src\context\ChefContext.jsx ---
1: import React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';
2: import { collection, query, orderBy, onSnapshot, doc, getDoc } from 'firebase/firestore';
3: import { db } from '../config/firebase';
4: import { useAuth } from '../hooks/useAuth.jsx';
5: 
6: export const ChefContext = createContext({
7:   chefs: [],
8:   activeChefs: [],
9:   eliminatedChefs: [],
10:   loading: true,
11:   error: null,
12:   getChefById: async () => ({}),
13:   refreshChefs: () => {},
14: });
15: 
16: export const ChefProvider = ({ children }) => {
17:   const [chefs, setChefs] = useState([]);
18:   const [loading, setLoading] = useState(true);
19:   const [error, setError] = useState(null);
20:   const { isAuthenticated } = useAuth();
21: 
22:   const fetchChefs = useCallback(async () => {
23:     try {
24:       setLoading(true);
25:       const chefsQuery = query(
26:         collection(db, 'chefs'),
27:         orderBy('stats.totalPoints', 'desc')
28:       );
29:       
30:       const unsubscribe = onSnapshot(chefsQuery, (snapshot) => {
31:         const chefData = snapshot.docs.map(doc => ({
32:           _id: doc.id,
33:           ...doc.data()
34:         }));
35:         setChefs(chefData);
36:         setLoading(false);
37:         setError(null);
38:       }, (err) => {
39:         console.error('Error in chefs snapshot:', err);
40:         setError('Failed to load chefs data');
41:         setLoading(false);
42:       });
43:       
44:       return unsubscribe;
45:     } catch (err) {
46:       console.error('Error setting up chefs listener:', err);
47:       setError('Failed to load chefs data');
48:       setLoading(false);
49:     }
50:   }, []);
51: 
52:   const getChefById = useCallback(async (id) => {
53:     try {
54:       const chefDoc = await getDoc(doc(db, 'chefs', id));
55:       
56:       if (!chefDoc.exists()) {
57:         throw new Error('Chef not found');
58:       }
59:       
60:       return {
61:         _id: chefDoc.id,
62:         ...chefDoc.data()
63:       };
64:     } catch (error) {
65:       console.error('Error fetching chef by ID:', error);
66:       setError('Failed to load chef details');
67:       throw error;
68:     }
69:   }, []);
70: 
71:   useEffect(() => {
72:     let unsubscribe = () => {};
73:     
74:     if (isAuthenticated) {
75:       fetchChefs()
76:         .then(unsub => {
77:           unsubscribe = unsub || (() => {});
78:         })
79:         .catch(err => {
80:           console.error('Failed to set up chef listener:', err);
81:           setError('Failed to load chefs data');
82:         });
83:     }
84:     
85:     return () => {
86:       unsubscribe();
87:     };
88:   }, [isAuthenticated, fetchChefs]);
89: 
90:   const activeChefs = useMemo(() => 
91:     chefs.filter(chef => chef.status === 'active'),
92:   [chefs]);
93: 
94:   const eliminatedChefs = useMemo(() => 
95:     chefs.filter(chef => chef.status === 'eliminated'),
96:   [chefs]);
97: 
98:   const value = useMemo(() => ({
99:     chefs,
100:     activeChefs,
101:     eliminatedChefs,
102:     loading,
103:     error,
104:     getChefById,
105:     refreshChefs: fetchChefs
106:   }), [chefs, activeChefs, eliminatedChefs, loading, error, getChefById, fetchChefs]);
107: 
108:   return (
109:     <ChefContext.Provider value={value}>
110:       {children}
111:     </ChefContext.Provider>
112:   );
113: };

--- client\src\context\LeagueContext.jsx ---
1: import React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';
2: import { useAuth } from '../hooks/useAuth.jsx';
3: import { useSocket } from '../hooks/useSocket.jsx';
4: import api from '../services/api.js';
5: 
6: // Create context with default values
7: export const LeagueContext = createContext({
8:   leagues: [],
9:   currentLeague: null,
10:   chefs: [],
11:   leaderboard: [],
12:   challenges: [],
13:   loading: true,
14:   error: null,
15:   fetchUserLeagues: async () => [],
16:   fetchLeagueDetails: async () => ({}),
17:   createLeague: async () => ({}),
18:   joinLeagueWithCode: async () => ({}),
19:   switchLeague: () => {},
20:   updateLeague: async () => ({}),
21: });
22: 
23: export const LeagueProvider = ({ children }) => {
24:   const [leagues, setLeagues] = useState([]);
25:   const [currentLeague, setCurrentLeague] = useState(null);
26:   const [chefs, setChefs] = useState([]);
27:   const [leaderboard, setLeaderboard] = useState([]);
28:   const [challenges, setChallenges] = useState([]);
29:   const [loading, setLoading] = useState(true);
30:   const [error, setError] = useState(null);
31: 
32:   const { user = null, isAuthenticated = false } = useAuth();
33:   const { socket = null, connected = false, EVENTS, joinLeague = () => {} } = useSocket();
34: 
35:   // Memoized event handlers
36:   const handleLeagueUpdate = useCallback((data) => {
37:     if (data.leagueId === currentLeague?._id) {
38:       setCurrentLeague((prev) => ({ ...prev, ...data.updates }));
39:       if (data.updates.members) {
40:         fetchLeagueDetails(currentLeague._id)
41:           .catch(err => console.error('Error refreshing league details:', err));
42:       }
43:     }
44:   }, [currentLeague]);
45: 
46:   const handleScoreUpdate = useCallback((data) => {
47:     if (data.leagueId === currentLeague?._id) {
48:       setLeaderboard((prevLeaderboard) =>
49:         prevLeaderboard
50:           .map((item) =>
51:             item.user._id === data.userId ? { ...item, score: data.newScore } : item
52:           )
53:           .sort((a, b) => b.score - a.score)
54:       );
55:     }
56:   }, [currentLeague]);
57: 
58:   const fetchUserLeagues = useCallback(async () => {
59:     try {
60:       setLoading(true);
61:       const response = await api.get('/leagues');
62:       const data = response.data || [];
63:       setLeagues(data);
64: 
65:       if (data.length > 0 && !currentLeague) {
66:         setCurrentLeague(data[0]);
67:       }
68: 
69:       setError(null);
70:       return data;
71:     } catch (err) {
72:       console.error('Error fetching leagues:', err);
73:       setError('Failed to load your leagues');
74:       throw err;
75:     } finally {
76:       setLoading(false);
77:     }
78:   }, [currentLeague]);
79: 
80:   const fetchLeagueDetails = useCallback(async (leagueId) => {
81:     try {
82:       setLoading(true);
83: 
84:       const leagueResponse = await api.get(`/leagues/${leagueId}`);
85:       setCurrentLeague(leagueResponse.data);
86: 
87:       const chefsResponse = await api.get('/chefs');
88:       setChefs(chefsResponse.data || []);
89: 
90:       const leaderboardResponse = await api.get(`/leagues/${leagueId}/leaderboard`);
91:       setLeaderboard(leaderboardResponse.data || []);
92: 
93:       const challengesResponse = await api.get('/challenges', {
94:         params: { season: leagueResponse.data.season },
95:       });
96:       setChallenges(challengesResponse.data || []);
97: 
98:       setError(null);
99:       return leagueResponse.data;
100:     } catch (err) {
101:       console.error('Error fetching league details:', err.response?.data || err.message);
102:       setError('Failed to load league details');
103:       throw err;
104:     } finally {
105:       setLoading(false);
106:     }
107:   }, []);
108: 
109:   // Load user's leagues
110:   useEffect(() => {
111:     if (isAuthenticated) {
112:       fetchUserLeagues()
113:         .catch(err => {
114:           console.error('Failed to load leagues:', err);
115:           setError('Failed to load your leagues. Please refresh the page.');
116:         });
117:     }
118:   }, [isAuthenticated, fetchUserLeagues]);
119: 
120:   // Listen for league updates from socket
121:   useEffect(() => {
122:     if (socket && connected && currentLeague?._id) {
123:       joinLeague(currentLeague._id);
124: 
125:       const leagueUpdateEvent = EVENTS?.LEAGUE_UPDATE || 'league_update';
126:       const scoreUpdateEvent = EVENTS?.SCORE_UPDATE || 'score_update';
127:       
128:       socket.on(leagueUpdateEvent, handleLeagueUpdate);
129:       socket.on(scoreUpdateEvent, handleScoreUpdate);
130: 
131:       return () => {
132:         socket.off(leagueUpdateEvent, handleLeagueUpdate);
133:         socket.off(scoreUpdateEvent, handleScoreUpdate);
134:       };
135:     }
136:   }, [socket, connected, currentLeague, EVENTS, joinLeague, handleLeagueUpdate, handleScoreUpdate]);
137: 
138:   const createLeague = useCallback(async (leagueData) => {
139:     try {
140:       setLoading(true);
141:       const response = await api.post('/leagues', leagueData);
142:       setLeagues((prevLeagues) => [...prevLeagues, response.data]);
143:       setCurrentLeague(response.data);
144:       setError(null);
145:       return response.data;
146:     } catch (err) {
147:       console.error('Error creating league:', err.response?.data || err.message);
148:       setError('Failed to create league');
149:       throw err;
150:     } finally {
151:       setLoading(false);
152:     }
153:   }, []);
154: 
155:   const joinLeagueWithCode = useCallback(async (inviteCode) => {
156:     try {
157:       setLoading(true);
158:       const response = await api.post('/leagues/join', { inviteCode });
159:       setLeagues((prevLeagues) => [...prevLeagues, response.data]);
160:       setCurrentLeague(response.data);
161:       setError(null);
162:       return response.data;
163:     } catch (err) {
164:       console.error('Error joining league:', err.response?.data || err.message);
165:       setError('Failed to join league');
166:       throw err;
167:     } finally {
168:       setLoading(false);
169:     }
170:   }, []);
171: 
172:   const switchLeague = useCallback((leagueId) => {
173:     const league = leagues.find((l) => l._id === leagueId);
174:     if (league) {
175:       setCurrentLeague(league);
176:       fetchLeagueDetails(leagueId)
177:         .catch(err => {
178:           console.error('Error switching league:', err);
179:           setError('Failed to load league details');
180:         });
181:     }
182:   }, [leagues, fetchLeagueDetails]);
183: 
184:   const updateLeague = useCallback(async (leagueId, updateData) => {
185:     try {
186:       setLoading(true);
187:       const response = await api.put(`/leagues/${leagueId}`, updateData);
188:       
189:       // Update the leagues list
190:       setLeagues(prevLeagues => 
191:         prevLeagues.map(league => 
192:           league._id === leagueId ? response.data : league
193:         )
194:       );
195:       
196:       // Update current league if it's the one being updated
197:       if (currentLeague?._id === leagueId) {
198:         setCurrentLeague(response.data);
199:       }
200:       
201:       setError(null);
202:       return response.data;
203:     } catch (err) {
204:       console.error('Error updating league:', err.response?.data || err.message);
205:       setError('Failed to update league');
206:       throw err;
207:     } finally {
208:       setLoading(false);
209:     }
210:   }, [currentLeague]);
211: 
212:   const contextValue = useMemo(() => ({
213:     leagues,
214:     currentLeague,
215:     chefs,
216:     leaderboard,
217:     challenges,
218:     loading,
219:     error,
220:     fetchUserLeagues,
221:     fetchLeagueDetails,
222:     createLeague,
223:     joinLeagueWithCode,
224:     switchLeague,
225:     updateLeague
226:   }), [
227:     leagues, 
228:     currentLeague, 
229:     chefs, 
230:     leaderboard, 
231:     challenges, 
232:     loading, 
233:     error, 
234:     fetchUserLeagues, 
235:     fetchLeagueDetails, 
236:     createLeague, 
237:     joinLeagueWithCode, 
238:     switchLeague, 
239:     updateLeague
240:   ]);
241: 
242:   return (
243:     <LeagueContext.Provider value={contextValue}>
244:       {children}
245:     </LeagueContext.Provider>
246:   );
247: };

--- client\src\context\SocketContext.jsx ---
1: import { createContext, useState, useEffect, useMemo, useCallback } from 'react';
2: import { io } from 'socket.io-client';
3: import { useAuth } from '../hooks/useAuth.jsx';
4: 
5: // Socket event constants
6: export const EVENTS = {
7:   CONNECTION: 'connection',
8:   DISCONNECT: 'disconnect',
9:   JOIN_LEAGUE: 'join_league',
10:   LEAVE_LEAGUE: 'leave_league',
11:   SEND_MESSAGE: 'send_message',
12:   CHAT_MESSAGE: 'chat_message',
13:   CHEF_UPDATE: 'chef_update',
14:   LEAGUE_UPDATE: 'league_update',
15:   USER_TYPING: 'user_typing',
16:   USER_JOINED: 'user_joined',
17:   USER_LEFT: 'user_left',
18:   SCORE_UPDATE: 'score_update'
19: };
20: 
21: // Create SocketContext with default values
22: export const SocketContext = createContext({
23:   socket: null,
24:   connected: false,
25:   EVENTS,
26:   joinLeague: () => {},
27:   leaveLeague: () => {},
28:   sendMessage: () => {},
29:   sendTyping: () => {}
30: });
31: 
32: export const SocketProvider = ({ children }) => {
33:   const [socket, setSocket] = useState(null);
34:   const [connected, setConnected] = useState(false);
35:   const { user } = useAuth();
36: 
37:   useEffect(() => {
38:     const token = localStorage.getItem('token');
39:     if (!token) return;
40: 
41:     const socketUrl = import.meta.env.VITE_SOCKET_URL || 'http://localhost:5000';
42:     const newSocket = io(socketUrl, {
43:       auth: { token },
44:       reconnection: true,
45:       reconnectionAttempts: 5
46:     });
47: 
48:     newSocket.on('connect', () => {
49:       setConnected(true);
50:     });
51: 
52:     newSocket.on('disconnect', () => {
53:       setConnected(false);
54:     });
55: 
56:     newSocket.on('connect_error', (error) => {
57:       console.error('Socket connection failed:', error);
58:       setConnected(false);
59:     });
60: 
61:     setSocket(newSocket);
62: 
63:     return () => {
64:       newSocket.disconnect();
65:       setSocket(null);
66:       setConnected(false);
67:     };
68:   }, [user?._id]); // Triggers on login/logout when user._id changes
69: 
70:   const joinLeague = useCallback((leagueId) => {
71:     if (socket && connected) {
72:       socket.emit(EVENTS.JOIN_LEAGUE, { leagueId });
73:     }
74:   }, [socket, connected]);
75: 
76:   const leaveLeague = useCallback((leagueId) => {
77:     if (socket && connected) {
78:       socket.emit(EVENTS.LEAVE_LEAGUE, { leagueId });
79:     }
80:   }, [socket, connected]);
81: 
82:   const sendMessage = useCallback((message) => {
83:     if (socket && connected) {
84:       socket.emit(EVENTS.SEND_MESSAGE, message);
85:     }
86:   }, [socket, connected]);
87: 
88:   const sendTyping = useCallback((leagueId) => {
89:     if (socket && connected) {
90:       socket.emit(EVENTS.USER_TYPING, { leagueId });
91:     }
92:   }, [socket, connected]);
93: 
94:   const value = useMemo(() => ({
95:     socket,
96:     connected,
97:     EVENTS,
98:     joinLeague,
99:     leaveLeague,
100:     sendMessage,
101:     sendTyping
102:   }), [socket, connected, joinLeague, leaveLeague, sendMessage, sendTyping]);
103: 
104:   return <SocketContext.Provider value={value}>{children}</SocketContext.Provider>;
105: };

--- client\src\context\ThemeContext.jsx ---
1: import React, { createContext, useState, useEffect } from 'react';
2: 
3: export const ThemeContext = createContext({
4:   theme: 'light',
5:   toggleTheme: () => {},
6:   isDark: false
7: });
8: 
9: export const ThemeProvider = ({ children }) => {
10:   const getInitialTheme = () => {
11:     if (typeof window !== 'undefined' && window.localStorage) {
12:       const storedTheme = window.localStorage.getItem('theme');
13:       if (typeof storedTheme === 'string') {
14:         return storedTheme;
15:       }
16: 
17:       const userMedia = window.matchMedia('(prefers-color-scheme: dark)');
18:       if (userMedia.matches) {
19:         return 'dark';
20:       }
21:     }
22: 
23:     return 'light';
24:   };
25: 
26:   const [theme, setTheme] = useState(getInitialTheme);
27: 
28:   const toggleTheme = () => {
29:     setTheme(theme === 'dark' ? 'light' : 'dark');
30:   };
31: 
32:   useEffect(() => {
33:     localStorage.setItem('theme', theme);
34:     
35:     // Apply theme to document
36:     if (theme === 'dark') {
37:       document.documentElement.classList.add('dark');
38:     } else {
39:       document.documentElement.classList.remove('dark');
40:     }
41:   }, [theme]);
42: 
43:   const contextValue = {
44:     theme,
45:     toggleTheme,
46:     isDark: theme === 'dark'
47:   };
48: 
49:   return (
50:     <ThemeContext.Provider value={contextValue}>
51:       {children}
52:     </ThemeContext.Provider>
53:   );
54: };

--- client\src\context\UserContext.jsx ---
1: // client/src/context/UserContext.jsx
2: import React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';
3: import { doc, getDoc, updateDoc, onSnapshot } from 'firebase/firestore';
4: import { updateProfile } from 'firebase/auth';
5: import { auth, db } from '../config/firebase';
6: import { useAuth } from '../hooks/useAuth.jsx';
7: 
8: export const UserContext = createContext({
9:   userProfile: null,
10:   loading: true,
11:   error: null,
12:   updateUserProfile: async () => ({})
13: });
14: 
15: export const UserProvider = ({ children }) => {
16:   const [userProfile, setUserProfile] = useState(null);
17:   const [loading, setLoading] = useState(true);
18:   const [error, setError] = useState(null);
19:   const { user, isAuthenticated } = useAuth();
20: 
21:   useEffect(() => {
22:     let unsubscribe = () => {};
23:     
24:     if (isAuthenticated && user?._id) {
25:       try {
26:         setLoading(true);
27:         const userRef = doc(db, 'users', user._id);
28:         
29:         unsubscribe = onSnapshot(userRef, (doc) => {
30:           if (doc.exists()) {
31:             setUserProfile({
32:               _id: doc.id,
33:               ...doc.data()
34:             });
35:           } else {
36:             setUserProfile(null);
37:           }
38:           setLoading(false);
39:         }, (err) => {
40:           console.error('Error in user profile snapshot:', err);
41:           setError('Failed to load user profile');
42:           setLoading(false);
43:         });
44:       } catch (err) {
45:         console.error('Error setting up user profile listener:', err);
46:         setError('Failed to load user profile');
47:         setLoading(false);
48:       }
49:     } else {
50:       setUserProfile(null);
51:       setLoading(false);
52:     }
53:     
54:     return () => {
55:       unsubscribe();
56:     };
57:   }, [isAuthenticated, user]);
58: 
59:   const updateUserProfile = useCallback(async (userData) => {
60:     try {
61:       if (!isAuthenticated || !user?._id) {
62:         throw new Error('Not authenticated');
63:       }
64:       
65:       setLoading(true);
66:       const userRef = doc(db, 'users', user._id);
67:       
68:       const updates = {};
69:       if (userData.name) updates.name = userData.name;
70:       if (userData.email) updates.email = userData.email.toLowerCase();
71:       if (userData.avatar) updates.avatar = userData.avatar;
72:       
73:       await updateDoc(userRef, updates);
74:       
75:       if (userData.name && auth.currentUser) {
76:         await updateProfile(auth.currentUser, {
77:           displayName: userData.name
78:         });
79:       }
80:       
81:       return {
82:         _id: user._id,
83:         ...updates
84:       };
85:     } catch (err) {
86:       console.error('Error updating user profile:', err);
87:       setError('Failed to update user profile');
88:       throw err;
89:     } finally {
90:       setLoading(false);
91:     }
92:   }, [isAuthenticated, user]);
93: 
94:   const value = useMemo(() => ({
95:     userProfile,
96:     loading,
97:     error,
98:     updateUserProfile
99:   }), [userProfile, loading, error, updateUserProfile]);
100: 
101:   return (
102:     <UserContext.Provider value={value}>
103:       {children}
104:     </UserContext.Provider>
105:   );
106: };

--- client\src\hooks\useAuth.jsx ---
1: // client/src/hooks/useAuth.jsx
2: import { useContext } from 'react';
3: import { AuthContext } from '../context/AuthContext';
4: 
5: export const useAuth = () => {
6:   const context = useContext(AuthContext);
7:   
8:   if (!context) {
9:     throw new Error('useAuth must be used within an AuthProvider');
10:   }
11:   
12:   // Ensure required fields are always defined, React 19-friendly
13:   const safeContext = {
14:     isAuthenticated: context.isAuthenticated ?? false, // Default to false if undefined
15:     loading: context.loading ?? true, // Default to true if undefined
16:     ...context, // Spread rest of context (e.g., user, setUser)
17:   };
18:   
19:   return safeContext;
20: };

--- client\src\hooks\useChat.jsx ---
1: import { useState, useEffect, useCallback } from 'react';
2: import { useSocket } from './useSocket.jsx';
3: import { useAuth } from './useAuth.jsx';
4: import api from '../services/api.js';
5: 
6: export const useChat = (leagueId) => {
7:   const [messages, setMessages] = useState([]);
8:   const [loading, setLoading] = useState(true);
9:   const [error, setError] = useState(null);
10:   const [typingUsers, setTypingUsers] = useState([]);
11: 
12:   const { socket, connected, EVENTS, joinLeague, leaveLeague, sendMessage: socketSendMessage, sendTyping } = useSocket();
13:   const { user } = useAuth();
14: 
15:   // Fetch chat history when leagueId changes
16:   const fetchMessages = useCallback(async () => {
17:     if (!leagueId) return;
18:     try {
19:       setLoading(true);
20:       const response = await api.get(`/messages/${leagueId}`);
21:       setMessages(response.data.reverse()); // Newest messages at the bottom
22:       setError(null);
23:     } catch (err) {
24:       console.error('Error fetching messages:', err);
25:       setError(err.response?.data?.message || 'Failed to load chat history');
26:     } finally {
27:       setLoading(false);
28:     }
29:   }, [leagueId]);
30: 
31:   // Handle new message from socket
32:   const handleNewMessage = useCallback((message) => {
33:     setMessages((prev) => [...prev, message]);
34:     setTypingUsers((prev) => prev.filter((u) => u.userId !== message.userId));
35:   }, []);
36: 
37:   // Handle user typing notification
38:   const handleUserTyping = useCallback(({ userId, username }) => {
39:     if (userId === user?._id) return;
40: 
41:     setTypingUsers((prev) => {
42:       if (!prev.some((u) => u.userId === userId)) {
43:         const newTypingUsers = [...prev, { userId, username }];
44:         setTimeout(() => {
45:           setTypingUsers((current) => current.filter((u) => u.userId !== userId));
46:         }, 3000);
47:         return newTypingUsers;
48:       }
49:       return prev;
50:     });
51:   }, [user]);
52: 
53:   // Handle user joined notification
54:   const handleUserJoined = useCallback(({ userId, username }) => {
55:     const systemMessage = {
56:       _id: Date.now().toString(),
57:       content: `${username} joined the chat`,
58:       type: 'system',
59:       createdAt: new Date().toISOString(),
60:     };
61:     setMessages((prev) => [...prev, systemMessage]);
62:   }, []);
63: 
64:   // Handle user left notification
65:   const handleUserLeft = useCallback(({ userId, username }) => {
66:     const systemMessage = {
67:       _id: Date.now().toString(),
68:       content: `${username} left the chat`,
69:       type: 'system',
70:       createdAt: new Date().toISOString(),
71:     };
72:     setMessages((prev) => [...prev, systemMessage]);
73:     setTypingUsers((prev) => prev.filter((u) => u.userId !== userId));
74:   }, []);
75: 
76:   // Socket setup
77:   useEffect(() => {
78:     if (!leagueId) return;
79: 
80:     fetchMessages();
81: 
82:     if (socket && connected) {
83:       joinLeague(leagueId);
84: 
85:       socket.on(EVENTS.CHAT_MESSAGE, handleNewMessage);
86:       socket.on(EVENTS.USER_TYPING, handleUserTyping);
87:       socket.on(EVENTS.USER_JOINED, handleUserJoined);
88:       socket.on(EVENTS.USER_LEFT, handleUserLeft);
89:       socket.on('error', (err) => setError(`Socket error: ${err.message}`));
90: 
91:       return () => {
92:         leaveLeague(leagueId);
93:         socket.off(EVENTS.CHAT_MESSAGE, handleNewMessage);
94:         socket.off(EVENTS.USER_TYPING, handleUserTyping);
95:         socket.off(EVENTS.USER_JOINED, handleUserJoined);
96:         socket.off(EVENTS.USER_LEFT, handleUserLeft);
97:         socket.off('error');
98:       };
99:     }
100:   }, [socket, connected, leagueId, fetchMessages, handleNewMessage, handleUserTyping, handleUserJoined, handleUserLeft]);
101: 
102:   // Send a new message
103:   const sendMessage = useCallback(
104:     async (content, type = 'text') => {
105:       if (!content || !leagueId || !user) return;
106: 
107:       const message = {
108:         leagueId,
109:         content,
110:         type,
111:         sender: { _id: user._id, name: user.name },
112:         createdAt: new Date().toISOString(),
113:       };
114: 
115:       try {
116:         socketSendMessage(message);
117:       } catch (err) {
118:         console.error('Error sending message:', err);
119:         setError('Failed to send message');
120:       }
121:     },
122:     [leagueId, socketSendMessage, user]
123:   );
124: 
125:   // Send typing indicator
126:   const sendTypingIndicator = useCallback(() => {
127:     if (leagueId && connected) {
128:       sendTyping(leagueId);
129:     }
130:   }, [leagueId, sendTyping, connected]);
131: 
132:   return {
133:     messages,
134:     loading,
135:     error,
136:     typingUsers,
137:     sendMessage,
138:     sendTypingIndicator,
139:     refreshMessages: fetchMessages,
140:   };
141: };

--- client\src\hooks\useChef.jsx ---
1: // client/src/hooks/useChef.jsx
2: import { useContext } from 'react';
3: import { ChefContext } from '../context/ChefContext.jsx';
4: 
5: export const useChef = () => {
6:   const context = useContext(ChefContext);
7:   
8:   if (!context) {
9:     throw new Error('useChef must be used within a ChefProvider');
10:   }
11:   
12:   return context;
13: };

--- client\src\hooks\useLeague.jsx ---
1: import { useContext } from 'react';
2: import { LeagueContext } from '../context/LeagueContext.jsx';
3: 
4: export const useLeague = () => {
5:   const context = useContext(LeagueContext);
6:   
7:   if (!context) {
8:     throw new Error('useLeague must be used within a LeagueProvider');
9:   }
10:   
11:   return context;
12: };
13: 
14: 

--- client\src\hooks\useSocket.jsx ---
1: import { useContext } from 'react';
2: import { SocketContext } from '../context/SocketContext.jsx';
3: 
4: export const useSocket = () => {
5:   const context = useContext(SocketContext);
6:   
7:   if (!context) {
8:     throw new Error('useSocket must be used within a SocketProvider');
9:   }
10:   
11:   return context;
12: };
13: 
14: 

--- client\src\hooks\useTheme.jsx ---
1: import { useContext } from 'react';
2: import { ThemeContext } from '../context/ThemeContext.jsx';
3: 
4: export const useTheme = () => {
5:   const context = useContext(ThemeContext);
6:   
7:   if (!context) {
8:     throw new Error('useTheme must be used within a ThemeProvider');
9:   }
10:   
11:   return context;
12: };
13: 
14: 

--- client\src\hooks\useUserProfile.jsx ---
1: // client/src/hooks/useUserProfile.jsx
2: import { useContext } from 'react';
3: import { UserContext } from '../context/UserContext.jsx';
4: 
5: export const useUserProfile = () => {
6:   const context = useContext(UserContext);
7:   
8:   if (!context) {
9:     throw new Error('useUserProfile must be used within a UserProvider');
10:   }
11:   
12:   return context;
13: };

--- client\src\index.css ---
1: @tailwind base;
2: @tailwind components;
3: @tailwind utilities;
4: 
5: /* Base styles */
6: @layer base {
7:   body {
8:     font-family: 'Inter', sans-serif;
9:     -webkit-font-smoothing: antialiased;
10:     -moz-osx-font-smoothing: grayscale;
11:     @apply bg-white dark:bg-gray-900 text-gray-900 dark:text-white;
12:   }
13:   
14:   /* Accessibility focus styles */
15:   :focus-visible {
16:     @apply outline-none ring-2 ring-primary-500 ring-offset-2 dark:ring-offset-gray-900;
17:   }
18: }
19: 
20: /* Custom utility classes */
21: @layer components {
22:   /* Button base */
23:   .btn {
24:     @apply px-4 py-2 rounded-lg font-medium transition-all duration-200 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed;
25:   }
26:   
27:   /* Button variants */
28:   .btn-primary {
29:     @apply bg-primary-600 hover:bg-primary-700 text-white shadow-sm;
30:   }
31:   
32:   .btn-secondary {
33:     @apply bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200;
34:   }
35:   
36:   .btn-outline {
37:     @apply border border-gray-300 hover:bg-gray-50 text-gray-700 dark:border-gray-600 dark:hover:bg-gray-800 dark:text-gray-300;
38:   }
39:   
40:   .btn-danger {
41:     @apply bg-red-600 hover:bg-red-700 text-white;
42:   }
43:   
44:   /* Button sizes */
45:   .btn-sm {
46:     @apply px-3 py-1.5 text-sm;
47:   }
48:   
49:   .btn-lg {
50:     @apply px-6 py-3 text-lg;
51:   }
52:   
53:   /* Card components */
54:   .card {
55:     @apply bg-white dark:bg-gray-800 rounded-xl shadow-card transition-all duration-200;
56:   }
57:   
58:   .card-hover {
59:     @apply hover:shadow-card-hover hover:-translate-y-1;
60:   }
61:   
62:   /* Form elements */
63:   .input {
64:     @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed;
65:   }
66:   
67:   .input-error {
68:     @apply border-red-500 focus:ring-red-500;
69:   }
70:   
71:   .error-message {
72:     @apply text-sm text-red-600 dark:text-red-400 mt-1;
73:   }
74:   
75:   .label {
76:     @apply block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300;
77:   }
78: }
79: 
80: /* Page transitions */
81: @layer utilities {
82:   .page-enter {
83:     @apply opacity-0;
84:   }
85:   
86:   .page-enter-active {
87:     @apply opacity-100 transition-opacity duration-300;
88:   }
89:   
90:   .page-exit {
91:     @apply opacity-100;
92:   }
93:   
94:   .page-exit-active {
95:     @apply opacity-0 transition-opacity duration-200;
96:   }
97: }

--- client\src\layouts\AuthLayout.jsx ---
1: import React from 'react';
2: import { Outlet } from 'react-router-dom';
3: import { useTheme } from '../hooks/useTheme.jsx';
4: import Logo from '../components/ui/Logo.jsx';
5: import ThemeToggle from '../components/ui/ThemeToggle.jsx';
6: 
7: const AuthLayout = () => {
8:   const { theme } = useTheme();
9: 
10:   return (
11:     <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
12:       <header className="py-4 px-6 flex justify-between items-center">
13:         <Logo />
14:         <ThemeToggle />
15:       </header>
16:       
17:       <main className="flex-grow flex items-center justify-center p-6">
18:         <div className="w-full max-w-md">
19:           <Outlet />
20:         </div>
21:       </main>
22:       
23:       <footer className="py-4 px-6 text-center text-sm text-gray-500 dark:text-gray-400">
24:         <p>Top Chef Fantasy League &copy; {new Date().getFullYear()}</p>
25:       </footer>
26:     </div>
27:   );
28: };
29: 
30: export default AuthLayout;
31: 
32: 

--- client\src\layouts\MainLayout.jsx ---
1: import React, { useState } from 'react';
2: import { Outlet } from 'react-router-dom';
3: import Sidebar from '../components/navigation/Sidebar.jsx';
4: import Header from '../components/navigation/Header.jsx';
5: import ChatPanel from '../components/chat/ChatPanel.jsx';
6: import MobileNav from '../components/navigation/MobileNav.jsx';
7: import { useAuth } from '../hooks/useAuth.jsx';
8: import { useTheme } from '../hooks/useTheme.jsx';
9: 
10: const MainLayout = () => {
11:   const { user } = useAuth();
12:   const { theme } = useTheme();
13:   const [isChatOpen, setIsChatOpen] = useState(false);
14:   const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
15: 
16:   const toggleChat = () => {
17:     setIsChatOpen(!isChatOpen);
18:   };
19: 
20:   const toggleSidebar = () => {
21:     setIsSidebarCollapsed(!isSidebarCollapsed);
22:   };
23: 
24:   return (
25:     <div className="flex h-screen overflow-hidden">
26:       {/* Sidebar - desktop */}
27:       <div className="bg-white dark:bg-gray-800 border-r border-gray-200">
28:         <Sidebar 
29:           user={user} 
30:           collapsed={isSidebarCollapsed} 
31:           onToggle={toggleSidebar} 
32:         />
33:       </div>
34: 
35:       {/* Main content */}
36:       <div className="flex flex-col flex-1 h-full overflow-hidden">
37:         {/* Header */}
38:         <Header toggleChat={toggleChat} isChatOpen={isChatOpen} />
39: 
40:         {/* Content area */}
41:         <div className="flex flex-1 overflow-hidden">
42:           <main className="flex-1 overflow-y-auto p-4 md:p-6">
43:             <Outlet />
44:           </main>
45: 
46:           {/* Chat panel */}
47:           <div 
48:             className="bg-white dark:bg-gray-800 border-r border-gray-200"
49:           >
50:             {isChatOpen && <ChatPanel onClose={toggleChat} />}
51:           </div>
52:         </div>
53: 
54:         {/* Mobile navigation */}
55:         <MobileNav toggleChat={toggleChat} isChatOpen={isChatOpen} />
56:       </div>
57:     </div>
58:   );
59: };
60: 
61: export default MainLayout;
62: 
63: 

--- client\src\main.jsx ---
1: import React from 'react';
2: import { createRoot } from 'react-dom/client';
3: import './index.css';
4: import App from './App.jsx';
5: import { AuthProvider } from './context/AuthContext.jsx';
6: import { ThemeProvider } from './context/ThemeContext.jsx';
7: import { SocketProvider } from './context/SocketContext.jsx';
8: import { BrowserRouter } from 'react-router-dom';
9: 
10: // React 19 createRoot 
11: const container = document.getElementById('root');
12: const root = createRoot(container);
13: 
14: root.render(
15:   <React.StrictMode>
16:     <BrowserRouter>
17:       <AuthProvider>
18:         <ThemeProvider>
19:           <SocketProvider>
20:             <App />
21:           </SocketProvider>
22:         </ThemeProvider>
23:       </AuthProvider>
24:     </BrowserRouter>
25:   </React.StrictMode>
26: );
27: 
28: 

--- client\src\pages\ChefRoster.jsx ---
1: // client/src/pages/ChefRoster.jsx
2: import React, { useState } from 'react';
3: import { useChef } from '../hooks/useChef.jsx';
4: import { useLeague } from '../hooks/useLeague.jsx';
5: import Card from '../components/ui/Card.jsx';
6: import Button from '../components/ui/Button.jsx';
7: 
8: const ChefRoster = () => {
9:   const { chefs, loading, error } = useChef();
10:   const { currentLeague } = useLeague();
11:   const [selectedChef, setSelectedChef] = useState(null);
12:   
13:   const handleSelectChef = (chef) => {
14:     setSelectedChef(chef);
15:   };
16:   
17:   const closeChefDetails = () => {
18:     setSelectedChef(null);
19:   };
20:   
21:   if (loading) {
22:     return (
23:       <div className="flex justify-center items-center h-full">
24:         <svg className="animate-spin h-10 w-10 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
25:           <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
26:           <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
27:         </svg>
28:       </div>
29:     );
30:   }
31:   
32:   return (
33:     <div className="space-y-6">
34:       <div className="flex justify-between items-center">
35:         <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Chef Roster</h1>
36:         {currentLeague && currentLeague.status === 'draft' && (
37:           <Button variant="primary" size="sm">Draft Chef</Button>
38:         )}
39:       </div>
40:       
41:       {error && (
42:         <div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg">
43:           {error}
44:         </div>
45:       )}
46:       
47:       <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
48:         {chefs && chefs.length > 0 ? (
49:           chefs.map((chef) => (
50:             <Card 
51:               key={chef._id} 
52:               className="cursor-pointer card-hover"
53:               onClick={() => handleSelectChef(chef)}
54:             >
55:               <div className="flex items-center space-x-4">
56:                 <div className="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center">
57:                   {chef.image ? (
58:                     <img 
59:                       src={chef.image} 
60:                       alt={chef.name} 
61:                       className="w-full h-full object-cover rounded-full"
62:                     />
63:                   ) : (
64:                     <span className="text-2xl text-gray-600 dark:text-gray-400">
65:                       {chef.name.charAt(0)}
66:                     </span>
67:                   )}
68:                 </div>
69:                 
70:                 <div>
71:                   <h3 className="font-medium text-gray-900 dark:text-white">{chef.name}</h3>
72:                   <p className="text-sm text-gray-600 dark:text-gray-400">{chef.specialty}</p>
73:                   <div className="mt-2 flex items-center">
74:                     <span className="text-xs font-medium px-2 py-1 rounded-full">
75:                       {chef.status}
76:                     </span>
77:                     <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">
78:                       {chef.stats.totalPoints} pts
79:                     </span>
80:                   </div>
81:                 </div>
82:               </div>
83:             </Card>
84:           ))
85:         ) : (
86:           <div className="col-span-full text-center py-10 text-gray-500 dark:text-gray-400">
87:             No chefs available.
88:           </div>
89:         )}
90:       </div>
91:       
92:       {selectedChef && (
93:         <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
94:           <div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-2xl max-h-[90vh] overflow-auto">
95:             <div className="p-6">
96:               <div className="flex justify-between items-start">
97:                 <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{selectedChef.name}</h2>
98:                 <button
99:                   onClick={closeChefDetails}
100:                   className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
101:                 >
102:                   <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
103:                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
104:                   </svg>
105:                 </button>
106:               </div>
107:               
108:               <div className="mt-6 space-y-6">
109:                 <div className="flex flex-col sm:flex-row gap-6">
110:                   <div className="w-full sm:w-1/3">
111:                     <div className="aspect-square bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center mb-4">
112:                       {selectedChef.image ? (
113:                         <img 
114:                           src={selectedChef.image} 
115:                           alt={selectedChef.name} 
116:                           className="w-full h-full object-cover rounded-lg"
117:                         />
118:                       ) : (
119:                         <span className="text-6xl text-gray-600 dark:text-gray-400">
120:                           {selectedChef.name.charAt(0)}
121:                         </span>
122:                       )}
123:                     </div>
124:                     
125:                     <div className="space-y-3">
126:                       <div>
127:                         <span className="text-sm text-gray-600 dark:text-gray-400">Status</span>
128:                         <p className="font-medium capitalize">{selectedChef.status}</p>
129:                       </div>
130:                       <div>
131:                         <span className="text-sm text-gray-600 dark:text-gray-400">Specialty</span>
132:                         <p className="font-medium">{selectedChef.specialty}</p>
133:                       </div>
134:                       <div>
135:                         <span className="text-sm text-gray-600 dark:text-gray-400">Hometown</span>
136:                         <p className="font-medium">{selectedChef.hometown}</p>
137:                       </div>
138:                     </div>
139:                   </div>
140:                   
141:                   <div className="w-full sm:w-2/3">
142:                     <h3 className="font-medium text-lg mb-3">Bio</h3>
143:                     <p className="text-gray-700 dark:text-gray-300 mb-6">{selectedChef.bio}</p>
144:                     
145:                     <h3 className="font-medium text-lg mb-3">Statistics</h3>
146:                     <div className="grid grid-cols-2 gap-4">
147:                       <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
148:                         <span className="text-sm text-gray-600 dark:text-gray-400">Challenge Wins</span>
149:                         <p className="text-xl font-semibold">{selectedChef.stats.challengeWins}</p>
150:                       </div>
151:                       <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
152:                         <span className="text-sm text-gray-600 dark:text-gray-400">Quickfire Wins</span>
153:                         <p className="text-xl font-semibold">{selectedChef.stats.quickfireWins}</p>
154:                       </div>
155:                       <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
156:                         <span className="text-sm text-gray-600 dark:text-gray-400">Total Points</span>
157:                         <p className="text-xl font-semibold">{selectedChef.stats.totalPoints}</p>
158:                       </div>
159:                       <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
160:                         <span className="text-sm text-gray-600 dark:text-gray-400">Eliminations</span>
161:                         <p className="text-xl font-semibold">{selectedChef.stats.eliminations}</p>
162:                       </div>
163:                     </div>
164:                     
165:                     {currentLeague && currentLeague.status === 'draft' && (
166:                       <div className="mt-6">
167:                         <Button variant="primary" fullWidth>Draft Chef</Button>
168:                       </div>
169:                     )}
170:                   </div>
171:                 </div>
172:                 
173:                 <div>
174:                   <h3 className="font-medium text-lg mb-3">Weekly Performance</h3>
175:                   {selectedChef.weeklyPerformance && selectedChef.weeklyPerformance.length > 0 ? (
176:                     <div className="overflow-x-auto">
177:                       <table className="min-w-full">
178:                         <thead>
179:                           <tr className="border-b border-gray-200 dark:border-gray-700">
180:                             <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Week</th>
181:                             <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Points</th>
182:                             <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Rank</th>
183:                             <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Highlights</th>
184:                           </tr>
185:                         </thead>
186:                         <tbody>
187:                           {selectedChef.weeklyPerformance.map((week) => (
188:                             <tr key={week.week} className="border-b border-gray-200 dark:border-gray-700">
189:                               <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
190:                                 Week {week.week}
191:                               </td>
192:                               <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
193:                                 {week.points}
194:                               </td>
195:                               <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
196:                                 {week.rank}
197:                               </td>
198:                               <td className="px-4 py-3 text-sm text-gray-700 dark:text-gray-300">
199:                                 {week.highlights}
200:                               </td>
201:                             </tr>
202:                           ))}
203:                         </tbody>
204:                       </table>
205:                     </div>
206:                   ) : (
207:                     <p className="text-gray-500 dark:text-gray-400">No performance data available.</p>
208:                   )}
209:                 </div>
210:               </div>
211:             </div>
212:           </div>
213:         </div>
214:       )}
215:     </div>
216:   );
217: };
218: 
219: export default ChefRoster;

--- client\src\pages\Dashboard.jsx ---
1: import { useEffect } from 'react';
2: import { useLeague } from '../hooks/useLeague.jsx';
3: import Card from '../components/ui/Card.jsx';
4: import Button from '../components/ui/Button.jsx';
5: import { Link } from 'react-router-dom';
6: 
7: 
8: const Dashboard = () => {
9:   const { currentLeague, leaderboard, loading, error, fetchLeagueDetails } = useLeague();
10:   
11:   useEffect(() => {
12:     if (currentLeague?._id) {
13:       fetchLeagueDetails(currentLeague._id);
14:     }
15:   }, [currentLeague?._id, fetchLeagueDetails]);
16:   
17:   if (loading) {
18:     return (
19:       <div className="flex justify-center items-center h-full">
20:         <svg className="animate-spin h-10 w-10 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
21:           <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
22:           <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
23:         </svg>
24:       </div>
25:     );
26:   }
27:   
28:   if (!currentLeague) {
29:     return (
30:       <div className="flex flex-col items-center justify-center h-full text-center">
31:         <div className="text-4xl font-display text-primary-600 mb-4">Welcome!</div>
32:         <p className="text-gray-600 dark:text-gray-400 mb-8 max-w-md">
33:           It looks like you're not part of any leagues yet. Create or join a league to get started!
34:         </p>
35:         <div className="flex space-x-4">
36:           <Link to="/leagues">
37:             <Button variant="primary">Browse Leagues</Button>
38:           </Link>
39:         </div>
40:         
41:         {/* Firebase Connection Test */}
42:         <div className="mt-8 w-full max-w-md">
43:           <FirebaseTest />
44:         </div>
45:       </div>
46:     );
47:   }
48:   
49:   return (
50:     <div className="space-y-6">
51:       <div className="flex justify-between items-center">
52:         <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
53:         <Link to="/leagues">
54:           <Button variant="outline" size="sm">League Details</Button>
55:         </Link>
56:       </div>
57:       
58:       {/* Firebase Connection Test */}
59:       <Card title="Firebase Connection">
60:         <FirebaseTest />
61:       </Card>
62:       
63:       {/* League Overview */}
64:       <Card title={currentLeague?.name} subtitle="Season">
65:         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
66:           <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
67:             <div className="text-sm text-gray-600 dark:text-gray-400">League Status</div>
68:             <div className="text-xl font-semibold mt-1 capitalize">{currentLeague.status}</div>
69:           </div>
70:           
71:           <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
72:             <div className="text-sm text-gray-600 dark:text-gray-400">Current Week</div>
73:             <div className="text-xl font-semibold mt-1">Week {currentLeague.currentWeek}</div>
74:           </div>
75:           
76:           <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
77:             <div className="text-sm text-gray-600 dark:text-gray-400">Members</div>
78:             <div className="text-xl font-semibold mt-1">
79:               {currentLeague.members?.length || 0} / {currentLeague.maxMembers}
80:             </div>
81:           </div>
82:         </div>
83:       </Card>
84:       
85:       {/* Leaderboard */}
86:       <Card title="Leaderboard" subtitle="Current standings">
87:         <div className="overflow-x-auto">
88:           <table className="min-w-full">
89:             <thead className="border-b border-gray-200 dark:border-gray-700">
90:               <tr>
91:                 <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Rank</th>
92:                 <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Player</th>
93:                 <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Score</th>
94:                 <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Roster Size</th>
95:               </tr>
96:             </thead>
97:             <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
98:               {leaderboard && leaderboard.length > 0 ? (
99:                 leaderboard.map((entry, index) => (
100:                   <tr key={entry.user._id} className="hover:bg-gray-50 dark:hover:bg-gray-800">
101:                     <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
102:                       {index + 1}
103:                     </td>
104:                     <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
105:                       {entry.user.name}
106:                     </td>
107:                     <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
108:                       {entry.score}
109:                     </td>
110:                     <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
111:                       {entry.rosterCount} / {currentLeague.maxRosterSize}
112:                     </td>
113:                   </tr>
114:                 ))
115:               ) : (
116:                 <tr>
117:                   <td colSpan="4" className="px-4 py-6 text-center text-gray-500 dark:text-gray-400">
118:                     No leaderboard data available
119:                   </td>
120:                 </tr>
121:               )}
122:             </tbody>
123:           </table>
124:         </div>
125:       </Card>
126:       
127:       {/* Quick Actions */}
128:       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
129:         <Card title="Quick Actions">
130:           <div className="space-y-4">
131:             <p className="text-gray-600 dark:text-gray-400">
132:               Manage your fantasy experience with these quick actions
133:             </p>
134:             <div className="flex flex-wrap gap-3">
135:               <Link to="/chefs">
136:                 <Button variant="secondary" size="sm">View Chefs</Button>
137:               </Link>
138:               <Link to="/schedule">
139:                 <Button variant="secondary" size="sm">View Schedule</Button>
140:               </Link>
141:               <Button variant="outline" size="sm">Manage Roster</Button>
142:             </div>
143:           </div>
144:         </Card>
145:         
146:         <Card title="Current Challenge" subtitle="Week">
147:           <div className="space-y-4">
148:             <p className="text-gray-600 dark:text-gray-400">
149:               Make your picks for this week's challenge before it airs!
150:             </p>
151:             <Button variant="primary" size="sm">Make Predictions</Button>
152:           </div>
153:         </Card>
154:       </div>
155:     </div>
156:   );
157: };
158: 
159: export default Dashboard;

--- client\src\pages\LeagueDetail.jsx ---
1: import React, { useEffect, useState } from 'react';
2: import { useParams, Navigate, Link } from 'react-router-dom';
3: import { useLeague } from '../hooks/useLeague.jsx';
4: import { useChat } from '../hooks/useChat.jsx';
5: import { useAuth } from '../hooks/useAuth.jsx';
6: import Card from '../components/ui/Card.jsx';
7: import Button from '../components/ui/Button.jsx';
8: 
9: const LeagueDetail = () => {
10:   const { id } = useParams();
11:   const { leagues = [], currentLeague = null, leaderboard = [], loading = false, error = null, fetchLeagueDetails = () => {}, switchLeague = () => {} } = useLeague();
12:   const { user = null } = useAuth();
13:   const [activeTab, setActiveTab] = useState('overview');
14:   const [chatInput, setChatInput] = useState('');
15:   const [chatError, setChatError] = useState('');
16:   const [localError, setLocalError] = useState('');
17:   
18:   // Get chat functionality with proper defaults for React 19
19:   const { 
20:     messages = [], 
21:     sendMessage = () => {}, 
22:     typingUsers = [],
23:     loading: chatLoading = false,
24:     error: chatFetchError = null
25:   } = useChat(id);
26: 
27:   useEffect(() => {
28:     if (id) {
29:       if (!currentLeague || currentLeague._id !== id) {
30:         switchLeague(id);
31:       }
32:       
33:       fetchLeagueDetails(id)
34:         .catch(err => {
35:           console.error('Fetch league details failed:', err);
36:           setLocalError('Failed to load league details. Please try again.');
37:         });
38:     }
39:   }, [id, currentLeague, fetchLeagueDetails, switchLeague]);
40: 
41:   // Check if the league exists in the user's leagues
42:   const leagueExists = leagues.some((league) => league._id === id);
43: 
44:   if (!leagueExists && !loading) {
45:     return <Navigate to="/leagues" />;
46:   }
47: 
48:   const handleSendMessage = async (e) => {
49:     e.preventDefault();
50:     if (chatInput.trim() && id) {
51:       try {
52:         await sendMessage(chatInput.trim());
53:         setChatInput('');
54:         setChatError('');
55:       } catch (err) {
56:         console.error('Chat send error:', err);
57:         setChatError('Failed to send message. Please try again.');
58:       }
59:     }
60:   };
61: 
62:   const isLeagueAdmin = currentLeague?.members?.some(
63:     member => member.user._id === user?._id && 
64:     (member.role === 'owner' || member.role === 'admin')
65:   );
66: 
67:   if (loading) {
68:     return (
69:       <div className="flex justify-center items-center h-screen">
70:         <svg
71:           className="animate-spin h-10 w-10 text-blue-600"
72:           xmlns="http://www.w3.org/2000/svg"
73:           fill="none"
74:           viewBox="0 0 24 24"
75:         >
76:           <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
77:           <path
78:             className="opacity-75"
79:             fill="currentColor"
80:             d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
81:           ></path>
82:         </svg>
83:       </div>
84:     );
85:   }
86: 
87:   if (error || localError) {
88:     return (
89:       <div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg m-6">
90:         {error || localError}
91:       </div>
92:     );
93:   }
94: 
95:   return (
96:     <div className="space-y-6 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen">
97:       {/* League Header */}
98:       <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
99:         <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
100:           <div>
101:             <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{currentLeague?.name || 'League'}</h1>
102:             <p className="text-sm text-gray-600 dark:text-gray-400">
103:               Season {currentLeague?.season || ''} • {currentLeague?.members?.length || 0} Members
104:             </p>
105:           </div>
106:           <div className="flex flex-wrap gap-3">
107:             <Button 
108:               variant="outline" 
109:               size="sm"
110:               onClick={() => {
111:                 if (currentLeague?.inviteCode) {
112:                   navigator.clipboard.writeText(currentLeague.inviteCode)
113:                     .then(() => alert('Invite code copied!'))
114:                     .catch(err => console.error('Failed to copy:', err));
115:                 }
116:               }}
117:             >
118:               Copy Invite Code
119:             </Button>
120:             {isLeagueAdmin && (
121:               <Button 
122:                 variant="primary" 
123:                 size="sm"
124:                 onClick={() => {
125:                   if (currentLeague?.status === 'draft') {
126:                     // Add draft start logic
127:                     console.log('Starting draft...');
128:                   } else {
129:                     // Set active tab to settings
130:                     setActiveTab('settings');
131:                   }
132:                 }}
133:               >
134:                 {currentLeague?.status === 'draft' ? 'Start Draft' : 'Manage League'}
135:               </Button>
136:             )}
137:           </div>
138:         </div>
139:         <div className="mt-4">
140:           <span
141:             className={`inline-block px-3 py-1 text-xs font-medium rounded-full ${
142:               currentLeague?.status === 'draft'
143:                 ? 'bg-yellow-100 text-yellow-800'
144:                 : 'bg-green-100 text-green-800'
145:             }`}
146:           >
147:             {currentLeague?.status || 'Unknown'} • Week {currentLeague?.currentWeek || 'N/A'}
148:           </span>
149:         </div>
150:       </div>
151: 
152:       {/* Tabs */}
153:       <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm overflow-hidden">
154:         <div className="flex border-b border-gray-200 dark:border-gray-700">
155:           {['overview', 'members', 'settings', 'chat'].map((tab) => (
156:             <button
157:               key={tab}
158:               type="button"
159:               className={`flex-1 px-4 py-2 text-sm font-medium ${
160:                 activeTab === tab
161:                   ? 'border-b-2 border-blue-500 text-blue-500'
162:                   : 'text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white'
163:               }`}
164:               onClick={() => setActiveTab(tab)}
165:             >
166:               {tab.charAt(0).toUpperCase() + tab.slice(1)}
167:             </button>
168:           ))}
169:         </div>
170: 
171:         {/* Tab Content */}
172:         <div className="p-6">
173:           {/* Overview Tab */}
174:           {activeTab === 'overview' && (
175:             <div className="space-y-6">
176:               <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
177:                 <Card title="League Status">
178:                   <div className="text-3xl font-bold mb-2 capitalize">{currentLeague?.status || 'Unknown'}</div>
179:                   <p className="text-gray-600 dark:text-gray-400">
180:                     {currentLeague?.status === 'draft'
181:                       ? 'Draft in progress'
182:                       : `Week ${currentLeague?.currentWeek || '?'} of competition`}
183:                   </p>
184:                 </Card>
185:                 <Card title="Scoring System">
186:                   <div className="space-y-1 text-sm">
187:                     <div className="flex justify-between">
188:                       <span>Challenge Win</span>
189:                       <span className="font-medium">{currentLeague?.scoringSettings?.challengeWin || 20} pts</span>
190:                     </div>
191:                     <div className="flex justify-between">
192:                       <span>Quickfire Win</span>
193:                       <span className="font-medium">{currentLeague?.scoringSettings?.quickfireWin || 10} pts</span>
194:                     </div>
195:                     <div className="flex justify-between">
196:                       <span>Top Three</span>
197:                       <span className="font-medium">{currentLeague?.scoringSettings?.topThree || 5} pts</span>
198:                     </div>
199:                     <div className="flex justify-between">
200:                       <span>Bottom Three</span>
201:                       <span className="font-medium">{currentLeague?.scoringSettings?.bottomThree || -5} pts</span>
202:                     </div>
203:                   </div>
204:                 </Card>
205:                 <Card title="Invite Code">
206:                   <div className="bg-gray-100 dark:bg-gray-700 py-2 px-4 rounded-lg font-mono text-lg mb-2">
207:                     {currentLeague?.inviteCode || 'N/A'}
208:                   </div>
209:                   <Button
210:                     variant="outline"
211:                     size="sm"
212:                     onClick={() => {
213:                       if (currentLeague?.inviteCode) {
214:                         navigator.clipboard.writeText(currentLeague.inviteCode)
215:                           .then(() => alert('Invite code copied!'))
216:                           .catch(err => console.error('Failed to copy:', err));
217:                       }
218:                     }}
219:                   >
220:                     Copy to Clipboard
221:                   </Button>
222:                 </Card>
223:               </div>
224:               <Card title="Leaderboard">
225:                 <div className="overflow-x-auto">
226:                   <table className="min-w-full">
227:                     <thead className="border-b border-gray-200 dark:border-gray-700">
228:                       <tr>
229:                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
230:                           Rank
231:                         </th>
232:                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
233:                           Player
234:                         </th>
235:                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
236:                           Score
237:                         </th>
238:                         <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
239:                           Roster Size
240:                         </th>
241:                       </tr>
242:                     </thead>
243:                     <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
244:                       {leaderboard && leaderboard.length > 0 ? (
245:                         leaderboard.map((entry, index) => (
246:                           <tr key={entry.user._id || index} className="hover:bg-gray-50 dark:hover:bg-gray-800">
247:                             <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
248:                               {index + 1}
249:                             </td>
250:                             <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
251:                               {entry.user.name || 'Unknown'}
252:                             </td>
253:                             <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
254:                               {entry.score || 0}
255:                             </td>
256:                             <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
257:                               {entry.rosterCount || 0} / {currentLeague?.maxRosterSize || 'N/A'}
258:                             </td>
259:                           </tr>
260:                         ))
261:                       ) : (
262:                         <tr>
263:                           <td
264:                             colSpan="4"
265:                             className="px-4 py-6 text-center text-gray-500 dark:text-gray-400"
266:                           >
267:                             No leaderboard data available
268:                           </td>
269:                         </tr>
270:                       )}
271:                     </tbody>
272:                   </table>
273:                 </div>
274:               </Card>
275:             </div>
276:           )}
277: 
278:           {/* Members Tab */}
279:           {activeTab === 'members' && (
280:             <div className="space-y-6">
281:               {currentLeague?.members && currentLeague.members.length > 0 ? (
282:                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
283:                   {currentLeague.members.map((member) => (
284:                     <Card key={member.user._id || Math.random().toString()}>
285:                       <div className="flex items-center space-x-4">
286:                         <div className="w-12 h-12 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-gray-700 dark:text-gray-300 font-medium">
287:                           {member.user.name?.charAt(0) || '?'}
288:                         </div>
289:                         <div>
290:                           <h3 className="font-medium text-gray-900 dark:text-white">{member.user.name || 'Unknown'}</h3>
291:                           <div className="flex items-center space-x-2 text-sm">
292:                             <span
293:                               className={`inline-block px-2 py-1 text-xs font-medium rounded-full ${
294:                                 member.role === 'owner' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
295:                               }`}
296:                             >
297:                               {member.role || 'member'}
298:                             </span>
299:                             <span className="text-gray-600 dark:text-gray-400">Score: {member.score || 0}</span>
300:                           </div>
301:                         </div>
302:                       </div>
303:                     </Card>
304:                   ))}
305:                 </div>
306:               ) : (
307:                 <div className="text-center py-6">
308:                   <p className="text-gray-500 dark:text-gray-400">No members in this league yet.</p>
309:                 </div>
310:               )}
311:             </div>
312:           )}
313: 
314:           {/* Settings Tab */}
315:           {activeTab === 'settings' && (
316:             <div className="space-y-6">
317:               <Card title="League Settings">
318:                 <p className="text-gray-600 dark:text-gray-400 mb-4">
319:                   Only league owners and admins can modify league settings.
320:                 </p>
321:                 <form onSubmit={(e) => {
322:                   e.preventDefault();
323:                   // Implement form submission logic here
324:                   console.log('Settings form submitted');
325:                   
326:                   // Example implementation (you'd need to add state for these fields)
327:                   // const payload = {
328:                   //   name: leagueName,
329:                   //   maxMembers: parseInt(maxMembers),
330:                   //   maxRosterSize: parseInt(maxRosterSize),
331:                   // };
332:                   // 
333:                   // api.put(`/leagues/${currentLeague?._id}`, payload)
334:                   //   .then(() => setSuccess("League updated successfully"))
335:                   //   .catch(err => setLocalError(err.message || "Failed to update league"));
336:                 }}>
337:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
338:                     <div>
339:                       <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
340:                         League Name
341:                       </label>
342:                       <input
343:                         type="text"
344:                         defaultValue={currentLeague?.name || ''}
345:                         readOnly={!isLeagueAdmin}
346:                         className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
347:                       />
348:                     </div>
349:                     <div>
350:                       <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
351:                         Season
352:                       </label>
353:                       <input
354:                         type="number"
355:                         defaultValue={currentLeague?.season || ''}
356:                         readOnly={!isLeagueAdmin}
357:                         className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
358:                       />
359:                     </div>
360:                     <div>
361:                       <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
362:                         Max Members
363:                       </label>
364:                       <input
365:                         type="number"
366:                         defaultValue={currentLeague?.maxMembers || ''}
367:                         readOnly={!isLeagueAdmin}
368:                         className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
369:                       />
370:                     </div>
371:                     <div>
372:                       <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
373:                         Max Roster Size
374:                       </label>
375:                       <input
376:                         type="number"
377:                         defaultValue={currentLeague?.maxRosterSize || ''}
378:                         readOnly={!isLeagueAdmin}
379:                         className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
380:                       />
381:                     </div>
382:                   </div>
383:                   <Button 
384:                     type="submit"
385:                     variant="primary" 
386:                     className="mt-6" 
387:                     disabled={!isLeagueAdmin}
388:                   >
389:                     Update Settings
390:                   </Button>
391:                 </form>
392:               </Card>
393:               <Card title="Danger Zone" className="border border-red-300 dark:border-red-700">
394:                 <p className="text-gray-600 dark:text-gray-400 mb-4">
395:                   These actions cannot be undone. Please be certain.
396:                 </p>
397:                 <Button 
398:                   variant="danger" 
399:                   type="button"
400:                   onClick={() => {
401:                     // Implement leave league with confirmation
402:                     if (window.confirm("Are you sure you want to leave this league?")) {
403:                       // API call would go here
404:                       console.log("User confirmed leaving league");
405:                     }
406:                   }}
407:                 >
408:                   Leave League
409:                 </Button>
410:               </Card>
411:             </div>
412:           )}
413: 
414:           {/* Chat Tab */}
415:           {activeTab === 'chat' && (
416:             <div className="space-y-6">
417:               {chatError && (
418:                 <div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-3 rounded-lg">
419:                   {chatError}
420:                 </div>
421:               )}
422:               <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 h-96 overflow-y-auto flex flex-col space-y-4">
423:                 {messages && messages.length > 0 ? (
424:                   messages.map((message) => (
425:                     <div key={message._id || Math.random().toString()} className="flex flex-col">
426:                       <div className="flex items-center space-x-2">
427:                         <div className="font-medium text-gray-900 dark:text-white">
428:                           {message.sender?.name || 'Unknown'}
429:                         </div>
430:                         <div className="text-xs text-gray-500 dark:text-gray-400">
431:                           {message.createdAt ? new Date(message.createdAt).toLocaleTimeString() : ''}
432:                         </div>
433:                       </div>
434:                       <div className="pl-6 text-gray-700 dark:text-gray-300">{message.content || ''}</div>
435:                     </div>
436:                   ))
437:                 ) : (
438:                   <div className="text-center py-6 text-gray-500 dark:text-gray-400">
439:                     No messages yet. Start the conversation!
440:                   </div>
441:                 )}
442:                 {typingUsers && typingUsers.length > 0 && (
443:                   <div className="text-gray-500 dark:text-gray-400 text-sm">
444:                     {typingUsers.length === 1
445:                       ? `${typingUsers[0].username || 'Someone'} is typing...`
446:                       : `${typingUsers.length} people are typing...`}
447:                   </div>
448:                 )}
449:               </div>
450:               <form onSubmit={handleSendMessage} className="flex gap-2">
451:                 <input
452:                   type="text"
453:                   className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
454:                   placeholder="Type a message..."
455:                   value={chatInput}
456:                   onChange={(e) => setChatInput(e.target.value)}
457:                 />
458:                 <Button
459:                   type="submit"
460:                   variant="primary"
461:                   disabled={!chatInput.trim()}
462:                 >
463:                   <svg
464:                     xmlns="http://www.w3.org/2000/svg"
465:                     className="h-5 w-5"
466:                     viewBox="0 0 20 20"
467:                     fill="currentColor"
468:                   >
469:                     <path
470:                       fillRule="evenodd"
471:                       d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z"
472:                       clipRule="evenodd"
473:                     />
474:                   </svg>
475:                 </Button>
476:               </form>
477:             </div>
478:           )}
479:         </div>
480:       </div>
481:     </div>
482:   );
483: };
484: 
485: export default LeagueDetail;

--- client\src\pages\Leagues.jsx ---
1: import React, { useEffect, useState } from 'react';
2: import { Link } from 'react-router-dom';
3: import { useLeague } from '../hooks/useLeague.jsx';
4: import Card from '../components/ui/Card.jsx';
5: import Button from '../components/ui/Button.jsx';
6: import Input from '../components/ui/Input.jsx';
7: 
8: const Leagues = () => {
9:   const { leagues, loading, error, fetchUserLeagues, createLeague, joinLeagueWithCode } = useLeague();
10:   const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
11:   const [isJoinModalOpen, setIsJoinModalOpen] = useState(false);
12:   const [joinCode, setJoinCode] = useState('');
13:   const [newLeague, setNewLeague] = useState({
14:     name: '',
15:     season: 22,
16:     maxMembers: 10,
17:     maxRosterSize: 5
18:   });
19:   const [formError, setFormError] = useState('');
20:   const [isSubmitting, setIsSubmitting] = useState(false);
21: 
22:   useEffect(() => {
23:     fetchUserLeagues();
24:   }, [fetchUserLeagues]);
25: 
26:   const handleCreateSubmit = async (e) => {
27:     e.preventDefault();
28:     setFormError('');
29:     
30:     if (!newLeague.name) {
31:       setFormError('Please provide a league name');
32:       return;
33:     }
34:     
35:     try {
36:       setIsSubmitting(true);
37:       await createLeague(newLeague);
38:       setIsCreateModalOpen(false);
39:       setNewLeague({
40:         name: '',
41:         season: 22,
42:         maxMembers: 10,
43:         maxRosterSize: 5
44:       });
45:     } catch (err) {
46:       console.error('Error creating league:', err);
47:       setFormError(err.response?.data?.message || 'Failed to create league');
48:     } finally {
49:       setIsSubmitting(false);
50:     }
51:   };
52:   
53:   const handleJoinSubmit = async (e) => {
54:     e.preventDefault();
55:     setFormError('');
56:     
57:     if (!joinCode) {
58:       setFormError('Please provide an invite code');
59:       return;
60:     }
61:     
62:     try {
63:       setIsSubmitting(true);
64:       await joinLeagueWithCode(joinCode);
65:       setIsJoinModalOpen(false);
66:       setJoinCode('');
67:     } catch (err) {
68:       console.error('Error joining league:', err);
69:       setFormError(err.response?.data?.message || 'Failed to join league');
70:     } finally {
71:       setIsSubmitting(false);
72:     }
73:   };
74: 
75:   return (
76:     <div className="space-y-6">
77:       <div className="flex justify-between items-center">
78:         <h1 className="text-2xl font-bold text-gray-900 dark:text-white">My Leagues</h1>
79:         <div className="flex space-x-3">
80:           <Button 
81:             variant="outline" 
82:             onClick={() => setIsJoinModalOpen(true)}
83:           >
84:             Join League
85:           </Button>
86:           <Button 
87:             variant="primary" 
88:             onClick={() => setIsCreateModalOpen(true)}
89:           >
90:             Create League
91:           </Button>
92:         </div>
93:       </div>
94:       
95:       {error && (
96:         <div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg">
97:           {error}
98:         </div>
99:       )}
100:       
101:       {loading ? (
102:         <div className="flex justify-center items-center py-12">
103:           <svg className="animate-spin h-10 w-10 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
104:             <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
105:             <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
106:           </svg>
107:         </div>
108:       ) : leagues.length > 0 ? (
109:         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
110:           {leagues.map((league) => (
111:             <Card 
112:               key={league._id}
113:               className="card-hover"
114:               padding="none"
115:             >
116:               <Link to={`/leagues/${league._id}`} className="block">
117:                 <div className="p-6 border-b border-gray-200 dark:border-gray-700">
118:                   <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
119:                     {league.name}
120:                   </h3>
121:                   <p className="text-sm text-gray-600 dark:text-gray-400">
122:                     Season {league.season}
123:                   </p>
124:                 </div>
125:                 
126:                 <div className="px-6 py-4">
127:                   <div className="grid grid-cols-2 gap-4">
128:                     <div>
129:                       <span className="text-xs text-gray-600 dark:text-gray-400">Status</span>
130:                       <p className="font-medium capitalize">{league.status}</p>
131:                     </div>
132:                     <div>
133:                       <span className="text-xs text-gray-600 dark:text-gray-400">Current Week</span>
134:                       <p className="font-medium">Week {league.currentWeek}</p>
135:                     </div>
136:                     <div>
137:                       <span className="text-xs text-gray-600 dark:text-gray-400">Members</span>
138:                       <p className="font-medium">{league.members?.length || 0} / {league.maxMembers}</p>
139:                     </div>
140:                     <div>
141:                       <span className="text-xs text-gray-600 dark:text-gray-400">Roster Size</span>
142:                       <p className="font-medium">{league.maxRosterSize} chefs</p>
143:                     </div>
144:                   </div>
145:                 </div>
146:                 
147:                 <div className="px-6 py-4 bg-gray-50 dark:bg-gray-700/30 rounded-b-xl">
148:                   <div className="flex justify-between items-center">
149:                     <div className="text-sm text-gray-600 dark:text-gray-400">
150:                       Created {new Date(league.createdAt).toLocaleDateString()}
151:                     </div>
152:                     <div className="text-sm font-medium text-primary-600 dark:text-primary-400">
153:                       View League &rarr;
154:                     </div>
155:                   </div>
156:                 </div>
157:               </Link>
158:             </Card>
159:           ))}
160:         </div>
161:       ) : (
162:         <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
163:           <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
164:             No leagues yet
165:           </h3>
166:           <p className="text-gray-600 dark:text-gray-400 mb-6">
167:             Create a new league or join an existing one.
168:           </p>
169:           <div className="flex justify-center space-x-4">
170:             <Button 
171:               variant="outline" 
172:               onClick={() => setIsJoinModalOpen(true)}
173:             >
174:               Join League
175:             </Button>
176:             <Button 
177:               variant="primary" 
178:               onClick={() => setIsCreateModalOpen(true)}
179:             >
180:               Create League
181:             </Button>
182:           </div>
183:         </div>
184:       )}
185:       
186:       {isCreateModalOpen && (
187:         <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
188:           <div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-md">
189:             <div className="p-6">
190:               <div className="flex justify-between items-center mb-6">
191:                 <h2 className="text-xl font-bold text-gray-900 dark:text-white">Create New League</h2>
192:                 <button
193:                   onClick={() => setIsCreateModalOpen(false)}
194:                   className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
195:                 >
196:                   <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
197:                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
198:                   </svg>
199:                 </button>
200:               </div>
201:               
202:               {formError && (
203:                 <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
204:                   {formError}
205:                 </div>
206:               )}
207:               
208:               <form onSubmit={handleCreateSubmit}>
209:                 <Input
210:                   label="League Name"
211:                   id="name"
212:                   placeholder="Enter league name"
213:                   value={newLeague.name}
214:                   onChange={(e) => setNewLeague({...newLeague, name: e.target.value})}
215:                   required
216:                 />
217:                 <div className="grid grid-cols-2 gap-4">
218:                   <Input
219:                     label="Season"
220:                     id="season"
221:                     type="number"
222:                     min="1"
223:                     placeholder="Season number"
224:                     value={newLeague.season}
225:                     onChange={(e) => setNewLeague({...newLeague, season: parseInt(e.target.value)})}
226:                     required
227:                   />
228:                   <Input
229:                     label="Max Members"
230:                     id="maxMembers"
231:                     type="number"
232:                     min="2"
233:                     max="20"
234:                     placeholder="Maximum members"
235:                     value={newLeague.maxMembers}
236:                     onChange={(e) => setNewLeague({...newLeague, maxMembers: parseInt(e.target.value)})}
237:                     required
238:                   />
239:                 </div>
240:                 <Input
241:                   label="Max Roster Size"
242:                   id="maxRosterSize"
243:                   type="number"
244:                   min="1"
245:                   max="10"
246:                   placeholder="Chefs per roster"
247:                   value={newLeague.maxRosterSize}
248:                   onChange={(e) => setNewLeague({...newLeague, maxRosterSize: parseInt(e.target.value)})}
249:                   required
250:                 />
251:                 <div className="mt-6 flex justify-end space-x-3">
252:                   <Button
253:                     type="button"
254:                     variant="outline"
255:                     onClick={() => setIsCreateModalOpen(false)}
256:                   >
257:                     Cancel
258:                   </Button>
259:                   <Button
260:                     type="submit"
261:                     variant="primary"
262:                     isLoading={isSubmitting}
263:                   >
264:                     Create League
265:                   </Button>
266:                 </div>
267:               </form>
268:             </div>
269:           </div>
270:         </div>
271:       )}
272:       
273:       {isJoinModalOpen && (
274:         <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
275:           <div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-md">
276:             <div className="p-6">
277:               <div className="flex justify-between items-center mb-6">
278:                 <h2 className="text-xl font-bold text-gray-900 dark:text-white">Join a League</h2>
279:                 <button
280:                   onClick={() => setIsJoinModalOpen(false)}
281:                   className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
282:                 >
283:                   <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
284:                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
285:                   </svg>
286:                 </button>
287:               </div>
288:               
289:               {formError && (
290:                 <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
291:                   {formError}
292:                 </div>
293:               )}
294:               
295:               <form onSubmit={handleJoinSubmit}>
296:                 <Input
297:                   label="Invite Code"
298:                   id="inviteCode"
299:                   placeholder="Enter the league invite code"
300:                   value={joinCode}
301:                   onChange={(e) => setJoinCode(e.target.value)}
302:                   required
303:                 />
304:                 <div className="mt-6 flex justify-end space-x-3">
305:                   <Button
306:                     type="button"
307:                     variant="outline"
308:                     onClick={() => setIsJoinModalOpen(false)}
309:                   >
310:                     Cancel
311:                   </Button>
312:                   <Button
313:                     type="submit"
314:                     variant="primary"
315:                     isLoading={isSubmitting}
316:                   >
317:                     Join League
318:                   </Button>
319:                 </div>
320:               </form>
321:             </div>
322:           </div>
323:         </div>
324:       )}
325:     </div>
326:   );
327: };
328: 
329: export default Leagues;

--- client\src\pages\Login.jsx ---
1: // client/src/pages/Login.jsx
2: import { useState } from 'react';
3: import { Link } from 'react-router-dom';
4: import { useAuth } from '../hooks/useAuth';
5: import Card from '../components/ui/Card';
6: import Input from '../components/ui/Input';
7: import Button from '../components/ui/Button';
8: import AuthService from '../services/authService'; // Corrected import
9: 
10: const Login = () => {
11:   const [email, setEmail] = useState('');
12:   const [password, setPassword] = useState('');
13:   const [formError, setFormError] = useState('');
14:   const { login, loading, error, setError } = useAuth();
15: 
16:   const handleSubmit = async (e) => {
17:     e.preventDefault();
18:     setFormError('');
19:     
20:     if (!email || !password) {
21:       setFormError('Please fill in all fields');
22:       return;
23:     }
24:     
25:     try {
26:       const result = await login(email, password);
27:       console.log('Login successful:', !!result);
28:     } catch (err) {
29:       console.error('Login error:', err.response?.data || err.message);
30:     }
31:   };
32: 
33:   const handleGoogleLogin = async () => {
34:     try {
35:       await AuthService.signInWithGoogle();
36:       // AuthContext will handle state update after popup or redirect
37:     } catch (err) {
38:       setFormError(err.message || 'Failed to sign in with Google');
39:       console.error('Google login error:', err);
40:     }
41:   };
42: 
43:   const handleForgotPassword = async () => {
44:     if (!email) {
45:       setFormError('Please enter your email address');
46:       return;
47:     }
48:     
49:     try {
50:       await AuthService.sendPasswordResetEmail(email);
51:       setFormError('');
52:       alert('Password reset email sent! Check your inbox.');
53:     } catch (err) {
54:       setFormError(err.message || 'Failed to send reset email');
55:       console.error('Password reset error:', err);
56:     }
57:   };
58: 
59:   return (
60:     <Card padding="lg" className="animate-fade-in">
61:       <div className="text-center mb-6">
62:         <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Welcome Back</h1>
63:         <p className="text-gray-600 dark:text-gray-400">Log in to your Top Chef Fantasy account</p>
64:       </div>
65:       
66:       {(error || formError) && (
67:         <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
68:           {error || formError}
69:         </div>
70:       )}
71:       
72:       <form onSubmit={handleSubmit}>
73:         <Input
74:           label="Email Address"
75:           type="email"
76:           id="email"
77:           placeholder="Enter your email"
78:           value={email}
79:           onChange={(e) => setEmail(e.target.value)}
80:           required
81:         />
82:         
83:         <Input
84:           label="Password"
85:           type="password"
86:           id="password"
87:           placeholder="Enter your password"
88:           value={password}
89:           onChange={(e) => setPassword(e.target.value)}
90:           required
91:         />
92:         
93:         <div className="flex items-center justify-between mb-6">
94:           <div className="flex items-center">
95:             <input
96:               id="remember-me"
97:               type="checkbox"
98:               className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
99:             />
100:             <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
101:               Remember me
102:             </label>
103:           </div>
104:           
105:           <button 
106:             type="button"
107:             onClick={handleForgotPassword}
108:             className="text-sm text-primary-600 hover:text-primary-500 dark:text-primary-400"
109:           >
110:             Forgot your password?
111:           </button>
112:         </div>
113:         
114:         <Button
115:           type="submit"
116:           variant="primary"
117:           fullWidth
118:           isLoading={loading}
119:         >
120:           Sign In
121:         </Button>
122:       </form>
123:       
124:       <div className="mt-6 relative">
125:         <div className="absolute inset-0 flex items-center">
126:           <div className="w-full border-t border-gray-300 dark:border-gray-600"></div>
127:         </div>
128:         <div className="relative flex justify-center text-sm">
129:           <span className="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">Or continue with</span>
130:         </div>
131:       </div>
132:       
133:       <div className="mt-6">
134:         <Button
135:           type="button"
136:           variant="outline"
137:           fullWidth
138:           onClick={handleGoogleLogin}
139:           className="flex items-center justify-center"
140:         >
141:           <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24" aria-hidden="true">
142:             <path 
143:               fill="currentColor" 
144:               d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
145:             />
146:           </svg>
147:           Sign in with Google
148:         </Button>
149:       </div>
150:       
151:       <div className="mt-6 text-center">
152:         <p className="text-sm text-gray-600 dark:text-gray-400">
153:           Don't have an account?{' '}
154:           <Link to="/register" className="text-primary-600 hover:text-primary-500 dark:text-primary-400 font-medium">
155:             Sign up
156:           </Link>
157:         </p>
158:       </div>
159:     </Card>
160:   );
161: };
162: 
163: export default Login;

--- client\src\pages\NotFound.jsx ---
1: import React from 'react';
2: import { Link } from 'react-router-dom';
3: import Button from '../components/ui/Button.jsx';
4: 
5: const NotFound = () => {
6:   return (
7:     <div className="min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col items-center justify-center p-4">
8:       <div className="text-center">
9:         <h1 className="text-9xl font-display font-bold text-primary-600 dark:text-primary-500">404</h1>
10:         <p className="text-2xl font-semibold text-gray-800 dark:text-gray-200 mt-4">Page Not Found</p>
11:         <p className="text-gray-600 dark:text-gray-400 mt-2 max-w-md mx-auto">
12:           The page you are looking for might have been removed, had its name changed, or is temporarily unavailable.
13:         </p>
14:         
15:         <div className="mt-8">
16:           <Link to="/">
17:             <Button variant="primary" size="lg">
18:               Back to Home
19:             </Button>
20:           </Link>
21:         </div>
22:       </div>
23:     </div>
24:   );
25: };
26: 
27: export default NotFound;

--- client\src\pages\Register.jsx ---
1: // client/src/pages/Register.jsx
2: import { useState } from 'react';
3: import { Link } from 'react-router-dom';
4: import { useAuth } from '../hooks/useAuth';
5: import { authService } from '../services/authService'; // Fixed to use named export
6: import Card from '../components/ui/Card';
7: import Input from '../components/ui/Input';
8: import Button from '../components/ui/Button';
9: 
10: const Register = () => {
11:   const [name, setName] = useState('');
12:   const [email, setEmail] = useState('');
13:   const [password, setPassword] = useState('');
14:   const [confirmPassword, setConfirmPassword] = useState('');
15:   const [formError, setFormError] = useState('');
16:   
17:   const { register, loading, error } = useAuth();
18:   
19:   const handleSubmit = async (e) => {
20:     e.preventDefault();
21:     setFormError('');
22:     console.log('Form Submitted:', { name, email, password });
23:     
24:     if (!name || !email || !password || !confirmPassword) {
25:       setFormError('Please fill in all fields');
26:       console.log('Validation failed: Missing fields');
27:       return;
28:     }
29:     
30:     if (password !== confirmPassword) {
31:       setFormError('Passwords do not match');
32:       console.log('Validation failed: Passwords mismatch');
33:       return;
34:     }
35:     
36:     if (password.length < 6) {
37:       setFormError('Password must be at least 6 characters');
38:       console.log('Validation failed: Password too short');
39:       return;
40:     }
41:     
42:     try {
43:       console.log('Starting registration...');
44:       const userProfile = await authService.register({ name, email, password });
45:       console.log('Registered User:', userProfile);
46:       const tokenResult = await authService.getToken();
47:       console.log('Firebase ID Token:', tokenResult);
48:       console.log('Calling useAuth register...');
49:       await register({ name, email, password });
50:       console.log('Registration complete');
51:     } catch (err) {
52:       console.error('Registration error:', err.message);
53:       setFormError(err.message || 'Failed to register');
54:     }
55:   };
56:   
57:   return (
58:     <Card padding="lg" className="animate-fade-in">
59:       <div className="text-center mb-6">
60:         <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Create an Account</h1>
61:         <p className="text-gray-600 dark:text-gray-400">Join the Top Chef Fantasy community</p>
62:       </div>
63:       
64:       {(error || formError) && (
65:         <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
66:           {error || formError}
67:         </div>
68:       )}
69:       
70:       <form onSubmit={handleSubmit}>
71:         <Input
72:           label="Name"
73:           type="text"
74:           id="name"
75:           placeholder="Enter your name"
76:           value={name}
77:           onChange={(e) => setName(e.target.value)}
78:           required
79:         />
80:         <Input
81:           label="Email Address"
82:           type="email"
83:           id="email"
84:           placeholder="Enter your email"
85:           value={email}
86:           onChange={(e) => setEmail(e.target.value)}
87:           required
88:         />
89:         <Input
90:           label="Password"
91:           type="password"
92:           id="password"
93:           placeholder="Create a password"
94:           value={password}
95:           onChange={(e) => setPassword(e.target.value)}
96:           helper="Password must be at least 6 characters"
97:           required
98:         />
99:         <Input
100:           label="Confirm Password"
101:           type="password"
102:           id="confirmPassword"
103:           placeholder="Confirm your password"
104:           value={confirmPassword}
105:           onChange={(e) => setConfirmPassword(e.target.value)}
106:           required
107:         />
108:         <div className="mb-6">
109:           <div className="flex items-center">
110:             <input
111:               id="terms"
112:               type="checkbox"
113:               className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
114:               required
115:             />
116:             <label htmlFor="terms" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
117:               I agree to the{' '}
118:               <a href="#" className="text-primary-600 hover:text-primary-500 dark:text-primary-400">
119:                 Terms of Service
120:               </a>{' '}
121:               and{' '}
122:               <a href="#" className="text-primary-600 hover:text-primary-500 dark:text-primary-400">
123:                 Privacy Policy
124:               </a>
125:             </label>
126:           </div>
127:         </div>
128:         <Button
129:           type="submit"
130:           variant="primary"
131:           fullWidth
132:           isLoading={loading}
133:         >
134:           Create Account
135:         </Button>
136:       </form>
137:       
138:       <div className="mt-6 text-center">
139:         <p className="text-sm text-gray-600 dark:text-gray-400">
140:           Already have an account?{' '}
141:           <Link to="/login" className="text-primary-600 hover:text-primary-500 dark:text-primary-400 font-medium">
142:             Sign in
143:           </Link>
144:         </p>
145:       </div>
146:     </Card>
147:   );
148: };
149: 
150: export default Register;

--- client\src\pages\Schedule.jsx ---
1: import React, { useEffect, useState } from 'react';
2: import { useLeague } from '../hooks/useLeague.jsx';
3: import Card from '../components/ui/Card.jsx';
4: 
5: const Schedule = () => {
6:   const { challenges, currentLeague, loading, error, fetchLeagueDetails } = useLeague();
7:   const [selectedChallenge, setSelectedChallenge] = useState(null);
8:   
9:   useEffect(() => {
10:     if (currentLeague?._id) {
11:       fetchLeagueDetails(currentLeague._id);
12:     }
13:   }, [currentLeague?._id, fetchLeagueDetails]);
14:   
15:   const handleSelectChallenge = (challenge) => {
16:     setSelectedChallenge(challenge);
17:   };
18:   
19:   const closeDetails = () => {
20:     setSelectedChallenge(null);
21:   };
22:   
23:   if (loading) {
24:     return (
25:       <div className="flex justify-center items-center h-full">
26:         <svg className="animate-spin h-10 w-10 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
27:           <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
28:           <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
29:         </svg>
30:       </div>
31:     );
32:   }
33:   
34:   return (
35:     <div className="space-y-6">
36:       <div className="flex justify-between items-center">
37:         <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Challenge Schedule</h1>
38:       </div>
39:       
40:       {error && (
41:         <div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg">
42:           {error}
43:         </div>
44:       )}
45:       
46:       {!currentLeague ? (
47:         <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
48:           <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
49:             No league selected
50:           </h3>
51:           <p className="text-gray-600 dark:text-gray-400">
52:             Please select a league to view challenge schedule.
53:           </p>
54:         </div>
55:       ) : challenges && challenges.length > 0 ? (
56:         <div className="space-y-6">
57:           <Card title="Current Week: Week">
58:             <div className="space-y-4">
59:               {challenges
60:                 .filter(challenge => challenge.week === currentLeague.currentWeek)
61:                 .map(challenge => (
62:                   <div
63:                     key={challenge._id}
64:                     className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
65:                     onClick={() => handleSelectChallenge(challenge)}
66:                   >
67:                     <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2">
68:                       <div>
69:                         <div className="flex items-center gap-2">
70:                           <h3 className="font-medium">{challenge.title}</h3>
71:                           <span className="text-xs px-2 py-0.5 rounded-full">
72:                             {challenge.isQuickfire ? 'Quickfire' : 'Elimination'}
73:                           </span>
74:                         </div>
75:                         <p className="text-sm text-gray-600 dark:text-gray-400">
76:                           {challenge.location} • {new Date(challenge.airDate).toLocaleDateString()}
77:                         </p>
78:                       </div>
79:                       <div>
80:                         <span className="text-xs px-2 py-0.5 rounded-full">
81:                           {challenge.status}
82:                         </span>
83:                       </div>
84:                     </div>
85:                   </div>
86:                 ))}
87:             </div>
88:           </Card>
89:           
90:           <Card title="Season Schedule">
91:             <div className="space-y-6">
92:               {Array.from(new Set(challenges.map(c => c.week))).sort((a, b) => a - b).map(week => (
93:                 <div key={week} className="space-y-2">
94:                   <h3 className="font-medium text-gray-900 dark:text-white">Week {week}</h3>
95:                   <div className="space-y-2 ml-4">
96:                     {challenges
97:                       .filter(challenge => challenge.week === week)
98:                       .map(challenge => (
99:                         <div
100:                           key={challenge._id}
101:                           className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
102:                           onClick={() => handleSelectChallenge(challenge)}
103:                         >
104:                           <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2">
105:                             <div>
106:                               <div className="flex items-center gap-2">
107:                                 <h4 className="font-medium text-sm">{challenge.title}</h4>
108:                                 <span className="text-xs px-2 py-0.5 rounded-full">
109:                                   {challenge.isQuickfire ? 'Quickfire' : 'Elimination'}
110:                                 </span>
111:                               </div>
112:                               <p className="text-xs text-gray-600 dark:text-gray-400">
113:                                 {challenge.location} • {new Date(challenge.airDate).toLocaleDateString()}
114:                               </p>
115:                             </div>
116:                             <div>
117:                               <span className="text-xs px-2 py-0.5 rounded-full">
118:                                 {challenge.status}
119:                               </span>
120:                             </div>
121:                           </div>
122:                         </div>
123:                       ))}
124:                   </div>
125:                 </div>
126:               ))}
127:             </div>
128:           </Card>
129:         </div>
130:       ) : (
131:         <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
132:           <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
133:             No challenges available
134:           </h3>
135:           <p className="text-gray-600 dark:text-gray-400">
136:             There are no challenges scheduled for this league yet.
137:           </p>
138:         </div>
139:       )}
140:       
141:       {selectedChallenge && (
142:         <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
143:           <div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-2xl max-h-[90vh] overflow-auto">
144:             <div className="p-6">
145:               <div className="flex justify-between items-start">
146:                 <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{selectedChallenge.title}</h2>
147:                 <button
148:                   onClick={closeDetails}
149:                   className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
150:                 >
151:                   <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
152:                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
153:                   </svg>
154:                 </button>
155:               </div>
156:               
157:               <div className="flex items-center space-x-2 mt-2">
158:                 <span className="text-xs px-2 py-0.5 rounded-full">
159:                   {selectedChallenge.isQuickfire ? 'Quickfire' : 'Elimination'}
160:                 </span>
161:                 <span className="text-xs px-2 py-0.5 rounded-full">
162:                   {selectedChallenge.status}
163:                 </span>
164:               </div>
165:               
166:               <div className="mt-6 space-y-6">
167:                 <div>
168:                   <h3 className="font-medium text-lg mb-2">Challenge Details</h3>
169:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
170:                     <div>
171:                       <span className="text-sm text-gray-600 dark:text-gray-400">Location</span>
172:                       <p className="font-medium">{selectedChallenge.location}</p>
173:                     </div>
174:                     <div>
175:                       <span className="text-sm text-gray-600 dark:text-gray-400">Air Date</span>
176:                       <p className="font-medium">{new Date(selectedChallenge.airDate).toLocaleDateString()}</p>
177:                     </div>
178:                     {selectedChallenge.guest && (
179:                       <div>
180:                         <span className="text-sm text-gray-600 dark:text-gray-400">Guest Judge</span>
181:                         <p className="font-medium">{selectedChallenge.guest}</p>
182:                       </div>
183:                     )}
184:                   </div>
185:                 </div>
186:                 
187:                 <div>
188:                   <h3 className="font-medium text-lg mb-2">Description</h3>
189:                   <p className="text-gray-700 dark:text-gray-300">{selectedChallenge.description}</p>
190:                 </div>
191:                 
192:                 {selectedChallenge.status === 'completed' && (
193:                   <div>
194:                     <h3 className="font-medium text-lg mb-2">Results</h3>
195:                     {selectedChallenge.winner && (
196:                       <div className="mb-4">
197:                         <span className="text-sm text-gray-600 dark:text-gray-400">Winner</span>
198:                         <p className="font-medium">{selectedChallenge.winner.name}</p>
199:                       </div>
200:                     )}
201:                     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
202:                       {selectedChallenge.topChefs && selectedChallenge.topChefs.length > 0 && (
203:                         <div>
204:                           <span className="text-sm text-gray-600 dark:text-gray-400">Top Performers</span>
205:                           <ul className="mt-1 space-y-1">
206:                             {selectedChallenge.topChefs.map(chef => (
207:                               <li key={chef._id} className="text-gray-700 dark:text-gray-300">
208:                                 {chef.name}
209:                               </li>
210:                             ))}
211:                           </ul>
212:                         </div>
213:                       )}
214:                       {selectedChallenge.bottomChefs && selectedChallenge.bottomChefs.length > 0 && (
215:                         <div>
216:                           <span className="text-sm text-gray-600 dark:text-gray-400">Bottom Performers</span>
217:                           <ul className="mt-1 space-y-1">
218:                             {selectedChallenge.bottomChefs.map(chef => (
219:                               <li key={chef._id} className="text-gray-700 dark:text-gray-300">
220:                                 {chef.name}
221:                               </li>
222:                             ))}
223:                           </ul>
224:                         </div>
225:                       )}
226:                     </div>
227:                     {selectedChallenge.eliminatedChef && (
228:                       <div className="mt-4">
229:                         <span className="text-sm text-gray-600 dark:text-gray-400">Eliminated</span>
230:                         <p className="font-medium text-red-600 dark:text-red-400">
231:                           {selectedChallenge.eliminatedChef.name}
232:                         </p>
233:                       </div>
234:                     )}
235:                   </div>
236:                 )}
237:               </div>
238:             </div>
239:           </div>
240:         </div>
241:       )}
242:     </div>
243:   );
244: };
245: 
246: export default Schedule;

--- client\src\pages\Settings.jsx ---
1: // client/src/pages/Settings.jsx (partial update)
2: import React, { useState, useEffect } from 'react';
3: import { useAuth } from '../hooks/useAuth.jsx';
4: import { useTheme } from '../hooks/useTheme.jsx';
5: import { useLeague } from '../hooks/useLeague.jsx';
6: import UserService from '../services/userService.js';
7: import Card from '../components/ui/Card.jsx';
8: import Input from '../components/ui/Input.jsx';
9: import Button from '../components/ui/Button.jsx';
10: 
11: const Settings = () => {
12:   const { user, updateProfile, error: authError, loading } = useAuth();
13:   const { theme, toggleTheme } = useTheme();
14:   const { currentLeague, fetchLeagueDetails } = useLeague();
15: 
16:   const isLeagueAdmin = currentLeague?.members?.some(
17:     (m) => m.user.toString() === user?._id && (m.role === 'owner' || m.role === 'admin')
18:   );
19: 
20:   const [formData, setFormData] = useState({
21:     name: user?.name || '',
22:     email: user?.email || '',
23:     currentPassword: '',
24:     newPassword: '',
25:     confirmPassword: '',
26:     emailNotifications: user?.emailNotifications || false,
27:     pushNotifications: user?.pushNotifications || false,
28:     leagueName: currentLeague?.name || '',
29:     maxMembers: currentLeague?.maxMembers || 10,
30:     maxRosterSize: currentLeague?.maxRosterSize || 5,
31:   });
32: 
33:   const [section, setSection] = useState('profile');
34:   const [formError, setFormError] = useState('');
35:   const [formSuccess, setFormSuccess] = useState('');
36: 
37:   const handleInputChange = (e) => {
38:     const { name, value, type, checked } = e.target;
39:     setFormData({
40:       ...formData,
41:       [name]: type === 'checkbox' ? checked : value,
42:     });
43:   };
44: 
45:   const handleProfileSubmit = async (e) => {
46:     e.preventDefault();
47:     setFormError('');
48:     setFormSuccess('');
49: 
50:     if (!formData.name || !formData.email) {
51:       setFormError('Name and email are required');
52:       return;
53:     }
54: 
55:     try {
56:       // Use the UserService directly
57:       await UserService.updateUserProfile({
58:         name: formData.name,
59:         email: formData.email,
60:       });
61:       setFormSuccess('Profile updated successfully');
62:     } catch (err) {
63:       console.error('Profile update error:', err);
64:       setFormError(err.message || 'Failed to update profile');
65:     }
66:   };
67: 
68:   const handlePasswordSubmit = async (e) => {
69:     e.preventDefault();
70:     setFormError('');
71:     setFormSuccess('');
72: 
73:     if (!formData.currentPassword) {
74:       setFormError('Current password is required');
75:       return;
76:     }
77:     if (formData.newPassword !== formData.confirmPassword) {
78:       setFormError('New passwords do not match');
79:       return;
80:     }
81:     if (formData.newPassword && formData.newPassword.length < 6) {
82:       setFormError('Password must be at least 6 characters');
83:       return;
84:     }
85: 
86:     try {
87:       await updateProfile({
88:         password: formData.newPassword,
89:         currentPassword: formData.currentPassword,
90:       });
91:       setFormSuccess('Password updated successfully');
92:       setFormData({
93:         ...formData,
94:         currentPassword: '',
95:         newPassword: '',
96:         confirmPassword: '',
97:       });
98:     } catch (err) {
99:       setFormError(err.response?.data?.message || 'Failed to update password');
100:     }
101:   };
102: 
103:   const handlePreferencesSubmit = async (e) => {
104:     e.preventDefault();
105:     setFormError('');
106:     setFormSuccess('');
107: 
108:     try {
109:       await api.put('/api/users/profile', {
110:         emailNotifications: formData.emailNotifications,
111:         pushNotifications: formData.pushNotifications,
112:       }, {
113:         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
114:       });
115:       setFormSuccess('Preferences updated successfully');
116:     } catch (err) {
117:       setFormError(err.response?.data?.message || 'Failed to update preferences');
118:     }
119:   };
120: 
121:   const handleLeagueSubmit = async (e) => {
122:     e.preventDefault();
123:     if (!isLeagueAdmin) return;
124: 
125:     setFormError('');
126:     setFormSuccess('');
127: 
128:     try {
129:       await api.put(`/api/leagues/${currentLeague?._id}`, {
130:         name: formData.leagueName,
131:         maxMembers: parseInt(formData.maxMembers, 10),
132:         maxRosterSize: parseInt(formData.maxRosterSize, 10),
133:       }, {
134:         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
135:       });
136:       await fetchLeagueDetails(currentLeague._id); // Error handling added
137:       setFormSuccess('League settings updated successfully');
138:     } catch (err) {
139:       console.error('League update error:', err);
140:       setFormError(err.response?.data?.message || 'Failed to update league settings');
141:     }
142:   };
143: 
144:   return (
145:     <div className="space-y-6 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen">
146:       <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Settings</h1>
147: 
148:       {/* Tabs */}
149:       <div className="flex space-x-4 border-b border-gray-200 dark:border-gray-700">
150:         {['profile', 'password', 'preferences', 'league'].map((tab) => (
151:           <button
152:             key={tab}
153:             className={`px-4 py-2 border-b-2 ${
154:               section === tab
155:                 ? 'border-blue-500 text-blue-500'
156:                 : 'border-transparent text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white'
157:             }`}
158:             onClick={() => setSection(tab)}
159:           >
160:             {tab.charAt(0).toUpperCase() + tab.slice(1)}
161:           </button>
162:         ))}
163:       </div>
164: 
165:       {/* Profile Settings */}
166:       {section === 'profile' && (
167:         <Card title="Profile Settings">
168:           {(authError || formError) && (
169:             <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
170:               {authError || formError}
171:             </div>
172:           )}
173:           {formSuccess && (
174:             <div className="mb-4 p-3 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 rounded-lg">
175:               {formSuccess}
176:             </div>
177:           )}
178:           <form onSubmit={handleProfileSubmit} className="space-y-4">
179:             <Input
180:               label="Name"
181:               id="name"
182:               name="name"
183:               value={formData.name}
184:               onChange={handleInputChange}
185:               required
186:             />
187:             <Input
188:               label="Email Address"
189:               type="email"
190:               id="email"
191:               name="email"
192:               value={formData.email}
193:               onChange={handleInputChange}
194:               required
195:             />
196:             <Button type="submit" variant="primary" isLoading={loading}>
197:               Update Profile
198:             </Button>
199:           </form>
200:         </Card>
201:       )}
202: 
203:       {/* Password Settings */}
204:       {section === 'password' && (
205:         <Card title="Password Settings">
206:           {(authError || formError) && (
207:             <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
208:               {authError || formError}
209:             </div>
210:           )}
211:           {formSuccess && (
212:             <div className="mb-4 p-3 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 rounded-lg">
213:               {formSuccess}
214:             </div>
215:           )}
216:           <form onSubmit={handlePasswordSubmit} className="space-y-4">
217:             <Input
218:               label="Current Password"
219:               type="password"
220:               id="currentPassword"
221:               name="currentPassword"
222:               value={formData.currentPassword}
223:               onChange={handleInputChange}
224:               required
225:             />
226:             <Input
227:               label="New Password"
228:               type="password"
229:               id="newPassword"
230:               name="newPassword"
231:               value={formData.newPassword}
232:               onChange={handleInputChange}
233:               helper="Password must be at least 6 characters"
234:             />
235:             <Input
236:               label="Confirm New Password"
237:               type="password"
238:               id="confirmPassword"
239:               name="confirmPassword"
240:               value={formData.confirmPassword}
241:               onChange={handleInputChange}
242:             />
243:             <Button type="submit" variant="primary" isLoading={loading}>
244:               Update Password
245:             </Button>
246:           </form>
247:         </Card>
248:       )}
249: 
250:       {/* Preferences */}
251:       {section === 'preferences' && (
252:         <div className="space-y-6">
253:           <Card title="Theme Preferences">
254:             <div className="flex items-center justify-between py-2">
255:               <div>
256:                 <h3 className="font-medium text-gray-900 dark:text-white">Dark Mode</h3>
257:                 <p className="text-sm text-gray-600 dark:text-gray-400">
258:                   Toggle between light and dark theme
259:                 </p>
260:               </div>
261:               <div className="relative inline-block w-12 h-6">
262:                 <input
263:                   type="checkbox"
264:                   id="toggle"
265:                   name="toggle"
266:                   checked={theme === 'dark'}
267:                   onChange={toggleTheme}
268:                   className="absolute w-0 h-0 opacity-0"
269:                   aria-label="Toggle dark mode"
270:                 />
271:                 <label
272:                   htmlFor="toggle"
273:                   className={`block h-6 w-12 rounded-full cursor-pointer transition-colors ${
274:                     theme === 'dark' ? 'bg-blue-500' : 'bg-gray-300'
275:                   }`}
276:                 >
277:                   <span
278:                     className={`absolute top-0 left-0 w-6 h-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out ${
279:                       theme === 'dark' ? 'translate-x-6' : 'translate-x-0'
280:                     }`}
281:                   ></span>
282:                 </label>
283:               </div>
284:             </div>
285:           </Card>
286: 
287:           <Card title="Notification Preferences">
288:             {(authError || formError) && (
289:               <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
290:                 {authError || formError}
291:               </div>
292:             )}
293:             {formSuccess && (
294:               <div className="mb-4 p-3 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 rounded-lg">
295:               {formSuccess}
296:             </div>
297:           )}
298:           <form onSubmit={handlePreferencesSubmit} className="space-y-4">
299:             <div className="flex items-center justify-between py-2">
300:               <div>
301:                 <h3 className="font-medium text-gray-900 dark:text-white">Email Notifications</h3>
302:                 <p className="text-sm text-gray-600 dark:text-gray-400">
303:                   Receive updates via email
304:                 </p>
305:               </div>
306:               <div className="relative inline-block w-12 h-6">
307:                 <input
308:                   type="checkbox"
309:                   id="emailNotifications"
310:                   name="emailNotifications"
311:                   checked={formData.emailNotifications}
312:                   onChange={handleInputChange}
313:                   className="absolute w-0 h-0 opacity-0"
314:                 />
315:                 <label
316:                   htmlFor="emailNotifications"
317:                   className={`block h-6 w-12 rounded-full cursor-pointer transition-colors ${
318:                     formData.emailNotifications ? 'bg-blue-500' : 'bg-gray-300'
319:                   }`}
320:                 >
321:                   <span
322:                     className={`absolute top-0 left-0 w-6 h-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out ${
323:                       formData.emailNotifications ? 'translate-x-6' : 'translate-x-0'
324:                     }`}
325:                   ></span>
326:                 </label>
327:               </div>
328:             </div>
329:             <div className="flex items-center justify-between py-2">
330:               <div>
331:                 <h3 className="font-medium text-gray-900 dark:text-white">Push Notifications</h3>
332:                 <p className="text-sm text-gray-600 dark:text-gray-400">
333:                   Receive alerts on your device
334:                 </p>
335:               </div>
336:               <div className="relative inline-block w-12 h-6">
337:                 <input
338:                   type="checkbox"
339:                   id="pushNotifications"
340:                   name="pushNotifications"
341:                   checked={formData.pushNotifications}
342:                   onChange={handleInputChange}
343:                   className="absolute w-0 h-0 opacity-0"
344:                 />
345:                 <label
346:                   htmlFor="pushNotifications"
347:                   className={`block h-6 w-12 rounded-full cursor-pointer transition-colors ${
348:                     formData.pushNotifications ? 'bg-blue-500' : 'bg-gray-300'
349:                   }`}
350:                 >
351:                   <span
352:                     className={`absolute top-0 left-0 w-6 h-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out ${
353:                       formData.pushNotifications ? 'translate-x-6' : 'translate-x-0'
354:                     }`}
355:                   ></span>
356:                 </label>
357:               </div>
358:             </div>
359:             <Button type="submit" variant="primary" isLoading={loading}>
360:               Save Preferences
361:             </Button>
362:           </form>
363:         </Card>
364:       </div>
365:     )}
366: 
367:     {/* League Settings */}
368:     {section === 'league' && (
369:       <Card title="League Settings">
370:         {(authError || formError) && (
371:           <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">
372:             {authError || formError}
373:           </div>
374:         )}
375:         {formSuccess && (
376:           <div className="mb-4 p-3 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 rounded-lg">
377:             {formSuccess}
378:           </div>
379:         )}
380:         {!currentLeague ? (
381:           <p className="text-gray-600 dark:text-gray-400">Select a league to edit its settings.</p>
382:         ) : (
383:           <form onSubmit={handleLeagueSubmit} className="space-y-4">
384:             <Input
385:               label="League Name"
386:               id="leagueName"
387:               name="leagueName"
388:               value={formData.leagueName}
389:               onChange={handleInputChange}
390:               disabled={!isLeagueAdmin}
391:               required
392:             />
393:             <Input
394:               label="Max Members"
395:               type="number"
396:               id="maxMembers"
397:               name="maxMembers"
398:               value={formData.maxMembers}
399:               onChange={handleInputChange}
400:               disabled={!isLeagueAdmin}
401:               required
402:             />
403:             <Input
404:               label="Max Roster Size"
405:               type="number"
406:               id="maxRosterSize"
407:               name="maxRosterSize"
408:               value={formData.maxRosterSize}
409:               onChange={handleInputChange}
410:               disabled={!isLeagueAdmin}
411:               required
412:             />
413:             <Button type="submit" variant="primary" isLoading={loading} disabled={!isLeagueAdmin}>
414:               Save League Settings
415:             </Button>
416:           </form>
417:         )}
418:       </Card>
419:     )}
420:   </div>
421: );
422: };
423: 
424: export default Settings;

--- client\src\services\api.js ---
1: import axios from 'axios';
2: import axiosRetry from 'axios-retry';
3: 
4: // Create an axios instance with default config
5: const api = axios.create({
6:   baseURL: import.meta.env.VITE_API_URL || 'http://localhost:5000/api', // Updated fallback
7:   headers: {
8:     'Content-Type': 'application/json',
9:   },
10:   timeout: 10000,
11:   withCredentials: true, // Optional, for cookies/credentials
12: });
13: 
14: // Add retry logic for network errors
15: axiosRetry(api, {
16:   retries: 3,
17:   retryDelay: (retryCount) => retryCount * 1000,
18:   retryCondition: (error) => axiosRetry.isNetworkOrIdempotentRequestError(error),
19: });
20: 
21: // Request interceptor for adding auth token
22: api.interceptors.request.use(
23:   (config) => {
24:     console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);
25:     const token = localStorage.getItem('token');
26:     if (token) {
27:       config.headers['Authorization'] = `Bearer ${token}`;
28:     }
29:     return config;
30:   },
31:   (error) => {
32:     console.error('Request Interceptor Error:', error);
33:     return Promise.reject(error);
34:   }
35: );
36: 
37: // Response interceptor for handling errors
38: api.interceptors.response.use(
39:   (response) => {
40:     console.log(`API Response: ${response.status} ${response.config.url}`);
41:     return response;
42:   },
43:   (error) => {
44:     console.error('Response Interceptor Error:', error);
45:     console.error('Status:', error.response?.status, 'Data:', error.response?.data);
46: 
47:     const originalRequest = error.config;
48: 
49:     if (error.response?.status === 401 && !originalRequest._retry) {
50:       originalRequest._retry = true;
51:       localStorage.removeItem('token');
52:       window.location.href = '/login';
53:       return Promise.reject(error);
54:     }
55: 
56:     if (error.response?.status === 500) {
57:       console.error('Server Error Details:', error.response.data);
58:     }
59: 
60:     return Promise.reject(error);
61:   }
62: );
63: 
64: export default api;

--- client\src\services\authService.ts ---
1: // client/src/services/authService.ts
2: import {
3:   createUserWithEmailAndPassword,
4:   signInWithEmailAndPassword,
5:   signOut,
6:   sendPasswordResetEmail,
7:   sendEmailVerification,
8:   updateProfile as updateFirebaseProfile,
9:   confirmPasswordReset,
10:   verifyPasswordResetCode,
11:   applyActionCode,
12:   GoogleAuthProvider,
13:   signInWithPopup,
14:   signInWithRedirect,
15:   onAuthStateChanged,
16:   type UserCredential,
17:   type User,
18: } from 'firebase/auth';
19: import { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';
20: import { auth, db } from '../config/firebase';
21: 
22: export const getToken = async (): Promise<string | null> => {
23:   const currentUser = auth.currentUser;
24:   if (!currentUser) return null;
25:   try {
26:     const token = await currentUser.getIdToken();
27:     console.debug('Token retrieved', { userId: currentUser.uid });
28:     return token;
29:   } catch (error: unknown) {
30:     console.error('Error getting token', { error: String(error) });
31:     return null;
32:   }
33: };
34: 
35: interface UserData {
36:   email: string;
37:   password: string;
38:   name: string;
39: }
40: 
41: interface UserProfile {
42:   _id: string;
43:   name: string;
44:   email: string;
45:   isAdmin: boolean;
46:   emailVerified: boolean;
47: }
48: 
49: const AuthService = {
50:   register: async (userData: UserData): Promise<UserProfile> => {
51:     try {
52:       const userCredential: UserCredential = await createUserWithEmailAndPassword(
53:         auth,
54:         userData.email,
55:         userData.password
56:       );
57: 
58:       await updateFirebaseProfile(userCredential.user, {
59:         displayName: userData.name,
60:       });
61: 
62:       await sendEmailVerification(userCredential.user);
63: 
64:       await setDoc(doc(db, 'users', userCredential.user.uid), {
65:         name: userData.name,
66:         email: userData.email,
67:         avatar: userCredential.user.photoURL || '',
68:         isAdmin: false,
69:         leagues: [],
70:         authProvider: 'email',
71:         createdAt: serverTimestamp(),
72:       });
73: 
74:       console.info('User registered successfully', {
75:         userId: userCredential.user.uid,
76:         email: userData.email,
77:       });
78: 
79:       return {
80:         _id: userCredential.user.uid,
81:         name: userData.name,
82:         email: userData.email,
83:         isAdmin: false,
84:         emailVerified: false,
85:       };
86:     } catch (error: unknown) {
87:       console.error('Registration error', {
88:         error: String(error),
89:         email: userData?.email,
90:       });
91:       throw error;
92:     }
93:   },
94: 
95:   signInWithGoogle: async (): Promise<UserProfile> => {
96:     try {
97:       const provider = new GoogleAuthProvider();
98:       let userCredential: UserCredential;
99: 
100:       try {
101:         userCredential = await signInWithPopup(auth, provider);
102:       } catch (popupError: unknown) {
103:         if ((popupError as any).code === 'auth/popup-blocked') {
104:           console.warn('Popup blocked, falling back to redirect');
105:           await signInWithRedirect(auth, provider);
106:           return new Promise((resolve, reject) => {
107:             const unsubscribe = onAuthStateChanged(auth, (user) => {
108:               if (user) {
109:                 unsubscribe();
110:                 handleGoogleUser(user).then(resolve).catch(reject);
111:               }
112:             }, (error) => {
113:               unsubscribe();
114:               reject(error);
115:             });
116:           });
117:         } else {
118:           throw popupError;
119:         }
120:       }
121: 
122:       return await handleGoogleUser(userCredential.user);
123:     } catch (error: unknown) {
124:       console.error('Google sign-in error', { error: String(error) });
125:       throw error;
126:     }
127:   },
128: 
129:   login: async (email: string, password: string): Promise<UserProfile> => {
130:     try {
131:       const userCredential: UserCredential = await signInWithEmailAndPassword(auth, email, password);
132:       const userDoc = await getDoc(doc(db, 'users', userCredential.user.uid));
133: 
134:       if (userDoc.exists()) {
135:         const userData = userDoc.data();
136:         console.info('User logged in', { userId: userCredential.user.uid, email });
137:         return {
138:           _id: userCredential.user.uid,
139:           name: userData.name as string,
140:           email: userData.email as string,
141:           isAdmin: (userData.isAdmin as boolean) || false,
142:           emailVerified: userCredential.user.emailVerified,
143:         };
144:       } else {
145:         console.warn('User profile not found in Firestore', { userId: userCredential.user.uid });
146:         throw new Error('User profile not found');
147:       }
148:     } catch (error: unknown) {
149:       console.error('Login error', { error: String(error), email });
150:       throw error;
151:     }
152:   },
153: 
154:   logout: async (): Promise<boolean> => {
155:     try {
156:       await signOut(auth);
157:       console.info('User logged out');
158:       return true;
159:     } catch (error: unknown) {
160:       console.error('Logout error', { error: String(error) });
161:       throw error;
162:     }
163:   },
164: 
165:   sendPasswordResetEmail: async (email: string): Promise<boolean> => {
166:     try {
167:       await sendPasswordResetEmail(auth, email);
168:       console.info('Password reset email sent', { email });
169:       return true;
170:     } catch (error: unknown) {
171:       console.error('Password reset error', { error: String(error), email });
172:       throw error;
173:     }
174:   },
175: 
176:   confirmPasswordReset: async (code: string, newPassword: string): Promise<boolean> => {
177:     try {
178:       await confirmPasswordReset(auth, code, newPassword);
179:       console.info('Password reset confirmed');
180:       return true;
181:     } catch (error: unknown) {
182:       console.error('Confirm password reset error', { error: String(error) });
183:       throw error;
184:     }
185:   },
186: 
187:   verifyPasswordResetCode: async (code: string): Promise<string> => {
188:     try {
189:       const email = await verifyPasswordResetCode(auth, code);
190:       console.info('Password reset code verified', { email });
191:       return email;
192:     } catch (error: unknown) {
193:       console.error('Verify password reset code error', { error: String(error) });
194:       throw error;
195:     }
196:   },
197: 
198:   sendVerificationEmail: async (): Promise<boolean> => {
199:     try {
200:       const currentUser = auth.currentUser;
201:       if (!currentUser) throw new Error('No user logged in');
202: 
203:       await sendEmailVerification(currentUser);
204:       console.info('Verification email sent', { userId: currentUser.uid });
205:       return true;
206:     } catch (error: unknown) {
207:       console.error('Send verification email error', { error: String(error) });
208:       throw error;
209:     }
210:   },
211: 
212:   verifyEmail: async (actionCode: string): Promise<boolean> => {
213:     try {
214:       await applyActionCode(auth, actionCode);
215:       console.info('Email verified with action code');
216:       return true;
217:     } catch (error: unknown) {
218:       console.error('Email verification error', { error: String(error) });
219:       throw error;
220:     }
221:   },
222: 
223:   updateProfile: async (userData: { name?: string; avatar?: string }): Promise<Partial<UserProfile>> => {
224:     try {
225:       const currentUser = auth.currentUser;
226:       if (!currentUser) throw new Error('No user logged in');
227: 
228:       const updateData: { name?: string; avatar?: string } = {};
229:       if (userData.name) {
230:         await updateFirebaseProfile(currentUser, {
231:           displayName: userData.name,
232:         });
233:         updateData.name = userData.name;
234:       }
235: 
236:       if (userData.avatar) {
237:         await updateFirebaseProfile(currentUser, {
238:           photoURL: userData.avatar,
239:         });
240:         updateData.avatar = userData.avatar;
241:       }
242: 
243:       if (Object.keys(updateData).length > 0) {
244:         const userRef = doc(db, 'users', currentUser.uid);
245:         await updateDoc(userRef, updateData);
246:         console.info('User profile updated', { userId: currentUser.uid, updates: updateData });
247:       }
248: 
249:       return {
250:         _id: currentUser.uid,
251:         ...updateData,
252:       };
253:     } catch (error: unknown) {
254:       console.error('Update profile error', { error: String(error) });
255:       throw error;
256:     }
257:   },
258: 
259:   getCurrentUser: async (): Promise<UserProfile | null> => {
260:     try {
261:       const currentUser = auth.currentUser;
262:       if (!currentUser) {
263:         console.debug('No current user found');
264:         return null;
265:       }
266: 
267:       const userDoc = await getDoc(doc(db, 'users', currentUser.uid));
268:       if (userDoc.exists()) {
269:         console.debug('Current user fetched', { userId: currentUser.uid });
270:         return {
271:           _id: currentUser.uid,
272:           name: (userDoc.data().name as string) || currentUser.displayName || '',
273:           email: (userDoc.data().email as string) || currentUser.email || '',
274:           isAdmin: (userDoc.data().isAdmin as boolean) || false,
275:           emailVerified: currentUser.emailVerified,
276:         };
277:       }
278:       console.warn('User document not found for current user', { userId: currentUser.uid });
279:       return null;
280:     } catch (error: unknown) {
281:       console.error('Get current user error', { error: String(error) });
282:       throw error;
283:     }
284:   },
285: 
286:   onAuthStateChanged: (callback: (user: User | null) => void): (() => void) => {
287:     const unsubscribe = onAuthStateChanged(
288:       auth,
289:       (user) => {
290:         if (user) {
291:           console.debug('Auth state changed: user signed in', { userId: user.uid });
292:         } else {
293:           console.debug('Auth state changed: user signed out');
294:         }
295:         callback(user);
296:       },
297:       (error) => {
298:         console.error('Auth state observer error', { error: String(error) });
299:       }
300:     );
301:     return unsubscribe;
302:   },
303: };
304: 
305: // Helper function for Google user handling
306: async function handleGoogleUser(user: User): Promise<UserProfile> {
307:   const userDoc = await getDoc(doc(db, 'users', user.uid));
308: 
309:   if (!userDoc.exists()) {
310:     await setDoc(doc(db, 'users', user.uid), {
311:       name: user.displayName,
312:       email: user.email,
313:       avatar: user.photoURL || '',
314:       isAdmin: false,
315:       leagues: [],
316:       authProvider: 'google',
317:       createdAt: serverTimestamp(),
318:     });
319:     console.info('New Google user created', { userId: user.uid });
320:   } else {
321:     console.info('Google user signed in', { userId: user.uid });
322:   }
323: 
324:   return {
325:     _id: user.uid,
326:     name: user.displayName || '',
327:     email: user.email || '',
328:     isAdmin: userDoc.exists() ? (userDoc.data().isAdmin as boolean) || false : false,
329:     emailVerified: user.emailVerified,
330:   };
331: }
332: 
333: // Export both named and default for flexibility
334: export const authService = AuthService;
335: export default AuthService;

--- client\src\services\challengeService.js ---
1: import { collection, doc, getDocs, getDoc, addDoc, updateDoc, query, where, orderBy, limit } from 'firebase/firestore';
2: import { db } from '../config/firebase';
3: import api from './api.js';
4: 
5: const ChallengeService = {
6:   // Get all challenges - Firestore implementation
7:   getAllChallenges: async (season) => {
8:     try {
9:       let challengesQuery;
10:       
11:       if (season) {
12:         challengesQuery = query(
13:           collection(db, 'challenges'),
14:           where('season', '==', parseInt(season)),
15:           orderBy('week')
16:         );
17:       } else {
18:         challengesQuery = query(
19:           collection(db, 'challenges'),
20:           orderBy('season'),
21:           orderBy('week')
22:         );
23:       }
24:       
25:       const challengesSnapshot = await getDocs(challengesQuery);
26:       
27:       const challenges = challengesSnapshot.docs.map(doc => ({
28:         _id: doc.id,
29:         ...doc.data()
30:       }));
31:       
32:       // For each challenge, populate chef references
33:       for (const challenge of challenges) {
34:         // Populate winner
35:         if (challenge.winner) {
36:           const winnerDoc = await getDoc(doc(db, 'chefs', challenge.winner));
37:           if (winnerDoc.exists()) {
38:             challenge.winner = {
39:               _id: winnerDoc.id,
40:               name: winnerDoc.data().name,
41:               image: winnerDoc.data().image
42:             };
43:           }
44:         }
45:         
46:         // Populate topChefs
47:         if (challenge.topChefs && challenge.topChefs.length > 0) {
48:           const topChefDocs = await Promise.all(
49:             challenge.topChefs.map(chefId => getDoc(doc(db, 'chefs', chefId)))
50:           );
51:           
52:           challenge.topChefs = topChefDocs
53:             .filter(doc => doc.exists())
54:             .map(doc => ({
55:               _id: doc.id,
56:               name: doc.data().name,
57:               image: doc.data().image
58:             }));
59:         }
60:         
61:         // Populate bottomChefs
62:         if (challenge.bottomChefs && challenge.bottomChefs.length > 0) {
63:           const bottomChefDocs = await Promise.all(
64:             challenge.bottomChefs.map(chefId => getDoc(doc(db, 'chefs', chefId)))
65:           );
66:           
67:           challenge.bottomChefs = bottomChefDocs
68:             .filter(doc => doc.exists())
69:             .map(doc => ({
70:               _id: doc.id,
71:               name: doc.data().name,
72:               image: doc.data().image
73:             }));
74:         }
75:         
76:         // Populate eliminatedChef
77:         if (challenge.eliminatedChef) {
78:           const eliminatedChefDoc = await getDoc(doc(db, 'chefs', challenge.eliminatedChef));
79:           if (eliminatedChefDoc.exists()) {
80:             challenge.eliminatedChef = {
81:               _id: eliminatedChefDoc.id,
82:               name: eliminatedChefDoc.data().name,
83:               image: eliminatedChefDoc.data().image
84:             };
85:           }
86:         }
87:       }
88:       
89:       return challenges;
90:     } catch (error) {
91:       console.error('Error fetching challenges from Firestore:', error);
92:       
93:       // Fallback to API
94:       const response = await api.get('/challenges', { params: { season } });
95:       return response.data;
96:     }
97:   },
98:   
99:   // Get a challenge by ID
100:   getChallengeById: async (id) => {
101:     try {
102:       const challengeDoc = await getDoc(doc(db, 'challenges', id));
103:       
104:       if (!challengeDoc.exists()) {
105:         throw new Error('Challenge not found');
106:       }
107:       
108:       const challenge = {
109:         _id: challengeDoc.id,
110:         ...challengeDoc.data()
111:       };
112:       
113:       // Populate chef references (same as in getAllChallenges)
114:       if (challenge.winner) {
115:         const winnerDoc = await getDoc(doc(db, 'chefs', challenge.winner));
116:         if (winnerDoc.exists()) {
117:           challenge.winner = {
118:             _id: winnerDoc.id,
119:             name: winnerDoc.data().name,
120:             image: winnerDoc.data().image
121:           };
122:         }
123:       }
124:       
125:       if (challenge.topChefs && challenge.topChefs.length > 0) {
126:         const topChefDocs = await Promise.all(
127:           challenge.topChefs.map(chefId => getDoc(doc(db, 'chefs', chefId)))
128:         );
129:         
130:         challenge.topChefs = topChefDocs
131:           .filter(doc => doc.exists())
132:           .map(doc => ({
133:             _id: doc.id,
134:             name: doc.data().name,
135:             image: doc.data().image
136:           }));
137:       }
138:       
139:       if (challenge.bottomChefs && challenge.bottomChefs.length > 0) {
140:         const bottomChefDocs = await Promise.all(
141:           challenge.bottomChefs.map(chefId => getDoc(doc(db, 'chefs', chefId)))
142:         );
143:         
144:         challenge.bottomChefs = bottomChefDocs
145:           .filter(doc => doc.exists())
146:           .map(doc => ({
147:             _id: doc.id,
148:             name: doc.data().name,
149:             image: doc.data().image
150:           }));
151:       }
152:       
153:       if (challenge.eliminatedChef) {
154:         const eliminatedChefDoc = await getDoc(doc(db, 'chefs', challenge.eliminatedChef));
155:         if (eliminatedChefDoc.exists()) {
156:           challenge.eliminatedChef = {
157:             _id: eliminatedChefDoc.id,
158:             name: eliminatedChefDoc.data().name,
159:             image: eliminatedChefDoc.data().image
160:           };
161:         }
162:       }
163:       
164:       return challenge;
165:     } catch (error) {
166:       console.error('Error fetching challenge from Firestore:', error);
167:       
168:       // Fallback to API
169:       const response = await api.get(`/challenges/${id}`);
170:       return response.data;
171:     }
172:   },
173:   
174:   // Get current challenges
175:   getCurrentChallenges: async (season) => {
176:     try {
177:       if (!season) {
178:         throw new Error('Season parameter is required');
179:       }
180:       
181:       // First, find the latest challenge by airDate
182:       const latestChallengeQuery = query(
183:         collection(db, 'challenges'),
184:         where('season', '==', parseInt(season)),
185:         orderBy('airDate', 'desc'),
186:         limit(1)
187:       );
188:       
189:       const latestChallengeSnapshot = await getDocs(latestChallengeQuery);
190:       
191:       if (latestChallengeSnapshot.empty) {
192:         throw new Error('No challenges found for this season');
193:       }
194:       
195:       const latestChallenge = {
196:         _id: latestChallengeSnapshot.docs[0].id,
197:         ...latestChallengeSnapshot.docs[0].data()
198:       };
199:       
200:       // Get all challenges from the same week
201:       const currentChallengesQuery = query(
202:         collection(db, 'challenges'),
203:         where('season', '==', parseInt(season)),
204:         where('week', '==', latestChallenge.week)
205:       );
206:       
207:       const currentChallengesSnapshot = await getDocs(currentChallengesQuery);
208:       
209:       const currentChallenges = currentChallengesSnapshot.docs.map(doc => ({
210:         _id: doc.id,
211:         ...doc.data()
212:       }));
213:       
214:       // Sort challenges by quickfire first, then airDate
215:       currentChallenges.sort((a, b) => {
216:         if (a.isQuickfire !== b.isQuickfire) {
217:           return a.isQuickfire ? -1 : 1;
218:         }
219:         return new Date(a.airDate) - new Date(b.airDate);
220:       });
221:       
222:       // For each challenge, populate chef references (same as in getAllChallenges)
223:       for (const challenge of currentChallenges) {
224:         // Same population logic as above, omitted for brevity
225:         // (This would be identical to the logic in getChallengeById)
226:       }
227:       
228:       return currentChallenges;
229:     } catch (error) {
230:       console.error('Error fetching current challenges from Firestore:', error);
231:       
232:       // Fallback to API
233:       const response = await api.get('/challenges/current', { params: { season } });
234:       return response.data;
235:     }
236:   },
237:   
238:   // Create a challenge (admin only)
239:   createChallenge: async (challengeData) => {
240:     // For admin operations, stick with API approach for security
241:     const response = await api.post('/challenges', challengeData);
242:     return response.data;
243:   },
244:   
245:   // Update a challenge (admin only)
246:   updateChallenge: async (id, updateData) => {
247:     // For admin operations, stick with API approach for security
248:     const response = await api.put(`/challenges/${id}`, updateData);
249:     return response.data;
250:   }
251: };
252: 
253: export default ChallengeService;

--- client\src\services\chefService.js ---
1: import { collection, doc, getDocs, getDoc, query, where, orderBy } from 'firebase/firestore';
2: import { db } from '../config/firebase';
3: import api from './api.js';
4: 
5: const ChefService = {
6:   // Get all chefs - Firestore implementation
7:   getAllChefs: async () => {
8:     try {
9:       const chefsQuery = query(
10:         collection(db, 'chefs'),
11:         orderBy('stats.totalPoints', 'desc')
12:       );
13:       
14:       const chefsSnapshot = await getDocs(chefsQuery);
15:       
16:       const chefs = chefsSnapshot.docs.map(doc => ({
17:         _id: doc.id,
18:         ...doc.data()
19:       }));
20:       
21:       return chefs;
22:     } catch (error) {
23:       console.error('Error fetching chefs from Firestore:', error);
24:       
25:       // Fallback to API
26:       const response = await api.get('/chefs');
27:       return response.data;
28:     }
29:   },
30:   
31:   // Get a chef by ID
32:   getChefById: async (id) => {
33:     try {
34:       const chefDoc = await getDoc(doc(db, 'chefs', id));
35:       
36:       if (!chefDoc.exists()) {
37:         throw new Error('Chef not found');
38:       }
39:       
40:       return {
41:         _id: chefDoc.id,
42:         ...chefDoc.data()
43:       };
44:     } catch (error) {
45:       console.error('Error fetching chef from Firestore:', error);
46:       
47:       // Fallback to API
48:       const response = await api.get(`/chefs/${id}`);
49:       return response.data;
50:     }
51:   },
52:   
53:   // Get chef stats
54:   getChefStats: async (id) => {
55:     try {
56:       const chefDoc = await getDoc(doc(db, 'chefs', id));
57:       
58:       if (!chefDoc.exists()) {
59:         throw new Error('Chef not found');
60:       }
61:       
62:       const chef = chefDoc.data();
63:       return chef.stats || {};
64:     } catch (error) {
65:       console.error('Error fetching chef stats from Firestore:', error);
66:       
67:       // Fallback to API
68:       const response = await api.get(`/chefs/${id}/stats`);
69:       return response.data;
70:     }
71:   },
72:   
73:   // Get weekly performance
74:   getChefWeeklyPerformance: async (id) => {
75:     try {
76:       const chefDoc = await getDoc(doc(db, 'chefs', id));
77:       
78:       if (!chefDoc.exists()) {
79:         throw new Error('Chef not found');
80:       }
81:       
82:       const chef = chefDoc.data();
83:       return chef.weeklyPerformance || [];
84:     } catch (error) {
85:       console.error('Error fetching chef weekly performance from Firestore:', error);
86:       
87:       // Fallback to API
88:       const response = await api.get(`/chefs/${id}/weekly-performance`);
89:       return response.data;
90:     }
91:   }
92: };
93: 
94: export default ChefService;

--- client\src\services\leagueService.js ---
1: import { 
2:   collection, 
3:   doc, 
4:   getDocs, 
5:   getDoc, 
6:   addDoc, 
7:   updateDoc, 
8:   query, 
9:   where,
10:   arrayUnion,
11:   serverTimestamp
12: } from 'firebase/firestore';
13: import { db } from '../config/firebase';
14: 
15: // League service functions
16: const LeagueService = {
17:   // Get all leagues for current user
18:   getUserLeagues: async (userId) => {
19:     try {
20:       const leaguesRef = collection(db, 'leagues');
21:       
22:       // Query leagues where the user is a member
23:       const leaguesQuery = query(
24:         collection(db, 'leagues'),
25:         where(`members.${userId}`, '!=', null)
26:       );
27:       
28:       const leaguesSnapshot = await getDocs(leaguesQuery);
29:       
30:       // Map to array with IDs
31:       const leagues = leaguesSnapshot.docs.map(doc => ({
32:         _id: doc.id,
33:         ...doc.data()
34:       }));
35:       
36:       return leagues;
37:     } catch (error) {
38:       console.error('Error fetching leagues:', error);
39:       throw error;
40:     }
41:   },
42:   
43:   // Get a single league by ID
44:   getLeagueById: async (id) => {
45:     try {
46:       const leagueDoc = await getDoc(doc(db, 'leagues', id));
47:       
48:       if (!leagueDoc.exists()) {
49:         throw new Error('League not found');
50:       }
51:       
52:       return {
53:         _id: leagueDoc.id,
54:         ...leagueDoc.data()
55:       };
56:     } catch (error) {
57:       console.error('Error fetching league:', error);
58:       throw error;
59:     }
60:   },
61:   
62:   // Create a new league
63:   createLeague: async (leagueData, userId) => {
64:     try {
65:       // Generate invite code
66:       const inviteCode = Math.random().toString(36).substring(2, 8).toUpperCase();
67:       
68:       // Create initial league object
69:       const newLeague = {
70:         name: leagueData.name,
71:         creator: userId,
72:         season: leagueData.season,
73:         maxMembers: leagueData.maxMembers || 10,
74:         maxRosterSize: leagueData.maxRosterSize || 5,
75:         status: 'draft',
76:         inviteCode,
77:         scoringSettings: leagueData.scoringSettings || {
78:           quickfireWin: 10,
79:           challengeWin: 20,
80:           topThree: 5,
81:           bottomThree: -5,
82:           elimination: -15,
83:           finalWinner: 50
84:         },
85:         currentWeek: 1,
86:         members: {
87:           [userId]: {
88:             role: 'owner',
89:             score: 0,
90:             joinedAt: serverTimestamp()
91:           }
92:         },
93:         createdAt: serverTimestamp()
94:       };
95:       
96:       // Add to Firestore
97:       const docRef = await addDoc(collection(db, 'leagues'), newLeague);
98:       
99:       // Get the new document
100:       const newLeagueDoc = await getDoc(docRef);
101:       
102:       // Update user document to include the league
103:       const userRef = doc(db, 'users', userId);
104:       await updateDoc(userRef, {
105:         leagues: arrayUnion(docRef.id)
106:       });
107:       
108:       return {
109:         _id: newLeagueDoc.id,
110:         ...newLeagueDoc.data()
111:       };
112:     } catch (error) {
113:       console.error('Error creating league:', error);
114:       throw error;
115:     }
116:   },
117:   
118:   // Join a league with invite code
119:   joinLeagueWithCode: async (inviteCode, userId) => {
120:     try {
121:       // Find league with invite code
122:       const leaguesQuery = query(
123:         collection(db, 'leagues'),
124:         where('inviteCode', '==', inviteCode)
125:       );
126:       
127:       const leaguesSnapshot = await getDocs(leaguesQuery);
128:       
129:       if (leaguesSnapshot.empty) {
130:         throw new Error('League not found with that invite code');
131:       }
132:       
133:       const leagueDoc = leaguesSnapshot.docs[0];
134:       const league = leagueDoc.data();
135:       
136:       // Check if league is full
137:       const memberCount = Object.keys(league.members || {}).length;
138:       if (memberCount >= league.maxMembers) {
139:         throw new Error('League is full');
140:       }
141:       
142:       // Check if user is already a member
143:       if (league.members && league.members[userId]) {
144:         throw new Error('You are already a member of this league');
145:       }
146:       
147:       // Add user to league members
148:       const leagueRef = doc(db, 'leagues', leagueDoc.id);
149:       await updateDoc(leagueRef, {
150:         [`members.${userId}`]: {
151:           role: 'member',
152:           score: 0,
153:           joinedAt: serverTimestamp()
154:         }
155:       });
156:       
157:       // Update user document to include the league
158:       const userRef = doc(db, 'users', userId);
159:       await updateDoc(userRef, {
160:         leagues: arrayUnion(leagueDoc.id)
161:       });
162:       
163:       // Get updated league
164:       const updatedLeagueDoc = await getDoc(leagueRef);
165:       
166:       return {
167:         _id: updatedLeagueDoc.id,
168:         ...updatedLeagueDoc.data()
169:       };
170:     } catch (error) {
171:       console.error('Error joining league:', error);
172:       throw error;
173:     }
174:   },
175:   
176:   // Other methods follow similar patterns
177: };
178: 
179: export default LeagueService;

--- client\src\services\messageService.js ---
1: // client/src/services/messageService.js
2: 
3: import { collection, query, where, orderBy, limit, getDocs, addDoc, updateDoc, increment, doc, getDoc, arrayUnion, arrayRemove, serverTimestamp, startAfter, Timestamp } from 'firebase/firestore';
4: import { db } from '../config/firebase';
5: import api from './api';
6: 
7: const MessageService = {
8:   // Get messages for a league - Firestore implementation
9:   getLeagueMessages: async (leagueId, limitCount = 50, before = null) => {
10:     try {
11:       let messagesQuery;
12:       
13:       if (before) {
14:         const beforeDate = new Date(before);
15:         
16:         messagesQuery = query(
17:           collection(db, 'messages'),
18:           where('league', '==', leagueId),
19:           where('createdAt', '<', beforeDate),
20:           orderBy('createdAt', 'desc'),
21:           limit(limitCount)
22:         );
23:       } else {
24:         messagesQuery = query(
25:           collection(db, 'messages'),
26:           where('league', '==', leagueId),
27:           orderBy('createdAt', 'desc'),
28:           limit(limitCount)
29:         );
30:       }
31:       
32:       const messagesSnapshot = await getDocs(messagesQuery);
33:       
34:       const messages = [];
35:       messagesSnapshot.forEach(doc => {
36:         messages.push({
37:           _id: doc.id,
38:           ...doc.data()
39:         });
40:       });
41:       
42:       // Populate sender information
43:       const populatedMessages = await Promise.all(messages.map(async (message) => {
44:         const senderDoc = await getDoc(doc(db, 'users', message.sender));
45:         
46:         return {
47:           ...message,
48:           sender: senderDoc.exists() ? {
49:             _id: senderDoc.id,
50:             name: senderDoc.data().name,
51:             email: senderDoc.data().email,
52:             avatar: senderDoc.data().avatar || ''
53:           } : { _id: message.sender }
54:         };
55:       }));
56:       
57:       // Update readBy for each message
58:       const currentUserId = localStorage.getItem('userId');
59:       if (currentUserId) {
60:         populatedMessages.forEach(async (message) => {
61:           if (!message.readBy.includes(currentUserId)) {
62:             const messageRef = doc(db, 'messages', message._id);
63:             await updateDoc(messageRef, {
64:               readBy: arrayUnion(currentUserId)
65:             });
66:           }
67:         });
68:       }
69:       
70:       return populatedMessages;
71:     } catch (error) {
72:       console.error('Error getting messages from Firestore:', error);
73:       
74:       // Fallback to API
75:       try {
76:         let params = { limit: limitCount };
77:         if (before) {
78:           params.before = before;
79:         }
80:         
81:         const response = await api.get(`/messages/${leagueId}`, { params });
82:         return response.data;
83:       } catch (apiError) {
84:         console.error('API fallback error:', apiError);
85:         throw apiError;
86:       }
87:     }
88:   },
89:   
90:   // Send a message - Firestore implementation
91:   sendMessage: async (leagueId, content, type = 'text') => {
92:     try {
93:       const currentUserId = localStorage.getItem('userId');
94:       
95:       if (!currentUserId) {
96:         throw new Error('User not authenticated');
97:       }
98:       
99:       // Create message document
100:       const message = {
101:         league: leagueId,
102:         sender: currentUserId,
103:         content,
104:         type,
105:         reactions: {
106:           likes: [],
107:           hearts: []
108:         },
109:         readBy: [currentUserId],
110:         createdAt: new Date().toISOString()
111:       };
112:       
113:       const messageRef = await addDoc(collection(db, 'messages'), message);
114:       
115:       // Get sender information
116:       const senderDoc = await getDoc(doc(db, 'users', currentUserId));
117:       
118:       const completeMessage = {
119:         _id: messageRef.id,
120:         ...message,
121:         sender: senderDoc.exists() ? {
122:           _id: senderDoc.id,
123:           name: senderDoc.data().name,
124:           email: senderDoc.data().email,
125:           avatar: senderDoc.data().avatar || ''
126:         } : { _id: currentUserId }
127:       };
128:       
129:       return completeMessage;
130:     } catch (error) {
131:       console.error('Error sending message to Firestore:', error);
132:       
133:       // Fallback to API
134:       try {
135:         const response = await api.post('/messages', { leagueId, content, type });
136:         return response.data;
137:       } catch (apiError) {
138:         console.error('API fallback error:', apiError);
139:         throw apiError;
140:       }
141:     }
142:   },
143:   
144:   // Add reaction to a message - Firestore implementation
145:   addReaction: async (messageId, reaction) => {
146:     try {
147:       if (!['likes', 'hearts'].includes(reaction)) {
148:         throw new Error('Invalid reaction type');
149:       }
150:       
151:       const currentUserId = localStorage.getItem('userId');
152:       
153:       if (!currentUserId) {
154:         throw new Error('User not authenticated');
155:       }
156:       
157:       const messageRef = doc(db, 'messages', messageId);
158:       const messageDoc = await getDoc(messageRef);
159:       
160:       if (!messageDoc.exists()) {
161:         throw new Error('Message not found');
162:       }
163:       
164:       const message = messageDoc.data();
165:       
166:       // Check if user has already reacted
167:       const hasReacted = message.reactions[reaction].includes(currentUserId);
168:       
169:       if (hasReacted) {
170:         // Remove reaction
171:         await updateDoc(messageRef, {
172:           [`reactions.${reaction}`]: arrayRemove(currentUserId)
173:         });
174:       } else {
175:         // Add reaction
176:         await updateDoc(messageRef, {
177:           [`reactions.${reaction}`]: arrayUnion(currentUserId)
178:         });
179:       }
180:       
181:       // Get updated message
182:       const updatedDoc = await getDoc(messageRef);
183:       
184:       return { 
185:         message: 'Reaction updated', 
186:         reactions: updatedDoc.data().reactions 
187:       };
188:     } catch (error) {
189:       console.error('Error updating reaction in Firestore:', error);
190:       
191:       // Fallback to API
192:       try {
193:         const response = await api.post(`/messages/${messageId}/reaction`, { reaction });
194:         return response.data;
195:       } catch (apiError) {
196:         console.error('API fallback error:', apiError);
197:         throw apiError;
198:       }
199:     }
200:   },
201:   
202:   // Get unread message count - Firestore implementation
203:   getUnreadCount: async (leagueId) => {
204:     try {
205:       const currentUserId = localStorage.getItem('userId');
206:       
207:       if (!currentUserId) {
208:         throw new Error('User not authenticated');
209:       }
210:       
211:       // Get all messages in league not sent by current user
212:       const totalQuery = query(
213:         collection(db, 'messages'),
214:         where('league', '==', leagueId),
215:         where('sender', '!=', currentUserId)
216:       );
217:       
218:       const totalSnapshot = await getDocs(totalQuery);
219:       
220:       // Count messages not read by current user
221:       let unreadCount = 0;
222:       
223:       totalSnapshot.forEach(doc => {
224:         const message = doc.data();
225:         if (!message.readBy.includes(currentUserId)) {
226:           unreadCount++;
227:         }
228:       });
229:       
230:       return { unreadCount };
231:     } catch (error) {
232:       console.error('Error getting unread count from Firestore:', error);
233:       
234:       // Fallback to API
235:       try {
236:         const response = await api.get(`/messages/unread/${leagueId}`);
237:         return response.data;
238:       } catch (apiError) {
239:         console.error('API fallback error:', apiError);
240:         throw apiError;
241:       }
242:     }
243:   }
244: };
245: 
246: export default MessageService;

--- client\src\services\userService.js ---
1: // client/src/services/userService.js
2: import { doc, getDoc, updateDoc, setDoc } from 'firebase/firestore';
3: import { updateProfile as firebaseUpdateProfile } from 'firebase/auth';
4: import { auth, db } from '../config/firebase';
5: import api from './api.js';
6: 
7: const UserService = {
8:   // Get user profile - Firestore implementation
9:   getUserProfile: async (userId) => {
10:     try {
11:       const userDoc = await getDoc(doc(db, 'users', userId));
12:       
13:       if (!userDoc.exists()) {
14:         throw new Error('User not found');
15:       }
16:       
17:       return {
18:         _id: userDoc.id,
19:         ...userDoc.data()
20:       };
21:     } catch (error) {
22:       console.error('Error fetching user from Firestore:', error);
23:       
24:       // Fallback to API
25:       const response = await api.get('/api/auth/profile');
26:       return response.data;
27:     }
28:   },
29:   
30:   // Update user profile - Firestore implementation
31:   updateUserProfile: async (userData) => {
32:     try {
33:       const currentUser = auth.currentUser;
34:       if (!currentUser) throw new Error('No user logged in');
35:       
36:       const updateData = {};
37:       if (userData.name) updateData.name = userData.name;
38:       if (userData.email) updateData.email = userData.email.toLowerCase();
39:       if (userData.avatar) updateData.avatar = userData.avatar;
40:       
41:       // Update Firestore document
42:       if (Object.keys(updateData).length > 0) {
43:         await updateDoc(doc(db, 'users', currentUser.uid), updateData);
44:       }
45:       
46:       // Update Firebase Auth profile if name provided
47:       if (userData.name) {
48:         await firebaseUpdateProfile(currentUser, {
49:           displayName: userData.name
50:         });
51:       }
52:       
53:       return {
54:         _id: currentUser.uid,
55:         ...updateData
56:       };
57:     } catch (error) {
58:       console.error('Error updating user in Firestore:', error);
59:       
60:       // Fallback to API
61:       const response = await api.put('/api/auth/profile', userData);
62:       return response.data;
63:     }
64:   }
65: };
66: 
67: export default UserService;

--- client\src\types\axios-retry.d.ts ---
1: declare module 'axios-retry' {
2:   import { AxiosInstance } from 'axios';
3: 
4:   interface AxiosRetry {
5:     (axios: AxiosInstance, options: {
6:       retries?: number;
7:       retryDelay?: (retryCount: number) => number;
8:       retryCondition?: (error: any) => boolean;
9:     }): void;
10: 
11:     isNetworkOrIdempotentRequestError(error: any): boolean;
12:   }
13: 
14:   const axiosRetry: AxiosRetry;
15:   export default axiosRetry;
16: }

--- client\src\vite-env.d.ts ---
1: /// <reference types="vite/client" />
2: 
3: interface ImportMetaEnv extends Readonly<Record<string, string>> {
4:   readonly VITE_API_URL: string;
5:   readonly VITE_SOCKET_URL: string;
6:   readonly VITE_FIREBASE_API_KEY: string;
7:   readonly VITE_FIREBASE_AUTH_DOMAIN: string;
8:   readonly VITE_FIREBASE_PROJECT_ID: string;
9:   readonly VITE_FIREBASE_STORAGE_BUCKET: string;
10:   readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string;
11:   readonly VITE_FIREBASE_APP_ID: string;
12:   readonly VITE_FIREBASE_MEASUREMENT_ID: string;
13: }
14: 
15: interface ImportMeta {
16:   readonly env: ImportMetaEnv;
17: }

--- client\tailwind.config.ts ---
1: /** @type {import('tailwindcss').Config} */
2: export default {
3:   content: [
4:     "./index.html",
5:     "./src/**/*.{js,jsx}",
6:   ],
7:   theme: {
8:     extend: {
9:       colors: {
10:         primary: {
11:           50: '#fffbeb',
12:           100: '#fef3c7',
13:           200: '#fde68a',
14:           300: '#fcd34d',
15:           400: '#fbbf24',
16:           500: '#f59e0b',
17:           600: '#d97706',
18:           700: '#b45309',
19:           800: '#92400e',
20:           900: '#78350f',
21:           950: '#451a03',
22:         },
23:         gray: {
24:           50: '#f9fafb',
25:           100: '#f3f4f6',
26:           200: '#e5e7eb',
27:           300: '#d1d5db',
28:           400: '#9ca3af',
29:           500: '#6b7280',
30:           600: '#4b5563',
31:           700: '#374151',
32:           800: '#1f2937',
33:           900: '#111827',
34:           950: '#030712',
35:         },
36:       },
37:       fontFamily: {
38:         sans: ['Inter var', 'ui-sans-serif', 'system-ui', 'sans-serif'],
39:         display: ['Bebas Neue', 'cursive'],
40:       },
41:       boxShadow: {
42:         card: '0 2px 12px rgba(0, 0, 0, 0.08)',
43:         'card-hover': '0 8px 30px rgba(0, 0, 0, 0.12)',
44:       },
45:       animation: {
46:         'fade-in': 'fadeIn 0.5s ease-in-out',
47:         'slide-up': 'slideUp 0.5s ease-out',
48:         'slide-down': 'slideDown 0.5s ease-out',
49:         pulse: 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',
50:       },
51:       keyframes: {
52:         fadeIn: {
53:           '0%': { opacity: '0' },
54:           '100%': { opacity: '1' },
55:         },
56:         slideUp: {
57:           '0%': { transform: 'translateY(20px)', opacity: '0' },
58:           '100%': { transform: 'translateY(0)', opacity: '1' },
59:         },
60:         slideDown: {
61:           '0%': { transform: 'translateY(-20px)', opacity: '0' },
62:           '100%': { transform: 'translateY(0)', opacity: '1' },
63:         },
64:       },
65:     },
66:   },
67:   plugins: [],
68: }
69: 

--- client\tsconfig.json ---
1: {
2:   "compilerOptions": {
3:     "target": "ESNext",
4:     "useDefineForClassFields": true,
5:     "lib": ["ESNext", "DOM", "DOM.Iterable"],
6:     "module": "ESNext",
7:     "skipLibCheck": true,
8:     "allowJs": false,
9:     "checkJs": false,
10:     "moduleResolution": "bundler",
11:     "allowImportingTsExtensions": true,
12:     "resolveJsonModule": true,
13:     "isolatedModules": true,
14:     "noEmit": true,
15:     "jsx": "react-jsx",
16:     "strict": true,
17:     "noUnusedLocals": true,
18:     "noUnusedParameters": true,
19:     "noFallthroughCasesInSwitch": true,
20:     "baseUrl": ".",
21:     "paths": {
22:       "@/*": ["./src/*"]
23:     },
24:     "typeRoots": ["./node_modules/@types", "./src/types"]
25:   },
26:   "include": ["src", "src/**/*.d.ts"],
27:   "references": [{ "path": "./tsconfig.node.json" }]
28: }

--- client\tsconfig.node.json ---
1: {
2:   "compilerOptions": {
3:     "composite": true,
4:     "skipLibCheck": true,
5:     "module": "ESNext",
6:     "moduleResolution": "bundler",
7:     "allowSyntheticDefaultImports": true,
8:     "target": "ES2020",           // Added for consistency
9:     "types": ["node", "vite/client"] // Added for explicitness
10:   },
11:   "include": ["client/vite.config.js"]
12: }

--- client\vite.config.js ---
1: import { defineConfig } from 'vite';
2: import react from '@vitejs/plugin-react';
3: import path from 'path';
4: 
5: export default defineConfig({
6:   plugins: [react()],
7:   resolve: {
8:     alias: {
9:       '@': path.resolve(__dirname, './src'),
10:     },
11:   },
12:   server: {
13:     port: 5173,
14:     proxy: {
15:       '/api': {
16:         target: 'http://localhost:5000',
17:         changeOrigin: true,
18:       },
19:       '/socket.io': {
20:         target: 'http://localhost:5000',
21:         ws: true,
22:       },
23:     },
24:   },
25:   esbuild: {
26:     target: 'es2020',
27:   },
28:   build: {
29:     target: 'es2020',
30:     cssTarget: 'chrome80',
31:     outDir: 'dist',
32:     minify: 'terser',
33:     terserOptions: {
34:       compress: {
35:         drop_console: false,
36:       },
37:     },
38:     rollupOptions: {
39:       output: {
40:         manualChunks: {
41:           'react-vendor': ['react', 'react-dom', 'react-router-dom'],
42:           'ui-vendor': ['@heroicons/react', 'chart.js', 'react-chartjs-2'],
43:         },
44:       },
45:     },
46:   },
47: });

--- README.md ---
1: # Top Chef Fantasy Application
2: 
3: A full-stack application for Top Chef fans to create and join fantasy leagues, draft chefs, track performance, and compete with friends.
4: 
5: ## Technologies Used
6: 
7: ### Frontend
8: - Vite 6.2.2 with React 19.0.10
9: - TailwindCSS for styling
10: - React Router for navigation
11: - Socket.io client for real-time updates
12: 
13: ### Backend
14: - Express.js
15: - MongoDB Atlas for database
16: - Socket.io for real-time communication
17: - JWT authentication
18: 
19: ## Getting Started
20: 
21: ### Prerequisites
22: - Node.js v18+
23: - MongoDB Atlas account
24: 
25: ### Installation
26: 
27: 1. Clone the repository
28: \\\ash
29: git clone https://github.com/yourusername/top-chef-fantasy.git
30: cd top-chef-fantasy
31: \\\
32: 
33: 2. Install dependencies for both frontend and backend
34: \\\ash
35: # Install backend dependencies
36: cd server
37: npm install
38: 
39: # Install frontend dependencies
40: cd ../client
41: npm install
42: \\\
43: 
44: 3. Set up environment variables
45: - Create a .env file in the server directory based on .env.example
46: - Create a .env file in the client directory based on .env.example
47: 
48: 4. Start the development servers
49: \\\ash
50: # Start backend server
51: cd server
52: npm run dev
53: 
54: # Start frontend development server
55: cd ../client
56: npm run dev
57: \\\
58: 
59: 5. Access the application at http://localhost:5173
60: 
61: ## Deployment
62: 
63: The application is set up for deployment on Render.com using the provided render.yaml file.
64: 
65: ## Project Structure
66: 
67: - /client - Frontend React application
68: - /server - Backend Express application
69:   - /src/models - MongoDB schemas
70:   - /src/controllers - API controllers
71:   - /src/routes - API routes
72:   - /src/middleware - Express middleware
73:   - /src/socket - Socket.io implementation
74: 

--- start.bat ---
1: @echo off
2: echo Starting Top Chef Fantasy application...
3: 
4: echo.
5: echo Starting backend server...
6: start cmd /k "cd server && npm install && npm run dev"
7: 
8: echo.
9: echo Starting frontend development server...
10: start cmd /k "cd client && npm install && npm run dev"
11: 
12: echo.
13: echo Application started successfully!
14: echo Backend: http://localhost:5000
15: echo Frontend: http://localhost:5173

--- start.sh ---
1: #!/bin/bash
2: 
3: echo "Starting Top Chef Fantasy application..."
4: 
5: echo ""
6: echo "Starting backend server..."
7: cd server && npm install && npm run dev &
8: 
9: echo ""
10: echo "Starting frontend development server..."
11: cd client && npm install && npm run dev &
12: 
13: echo ""
14: echo "Application started successfully!"
15: echo "Backend: http://localhost:5000"
16: echo "Frontend: http://localhost:5173"
17: 
