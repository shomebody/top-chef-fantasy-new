=== Client Files (Part 2: Hooks, Pages: NotFound, Context) ===
--- client/src/context/AuthContext.tsx ---
import { createContext, useState, useEffect } from 'react';import {getAuth,;onAuthStateChanged,;signInWithEmailAndPassword,;signOut,;createUserWithEmailAndPassword,;} from 'firebase/auth';import { doc, getDoc, setDoc } from 'firebase/firestore';import { db } from '../config/firebase';export interface UserProfile {_id: string;name: string;email: string;isAdmin?: boolean;emailVerified?: boolean;avatar?: string;};export interface AuthContextProps {user: UserProfile | null;isAuthenticated: boolean;loading: boolean;error: string | null;login: (email: string, password: string) => Promise<UserProfile | null>;logout: () => Promise<void>;register: (userData: { name: string; email: string; password: string }) => Promise<UserProfile | null>;updateProfile: (userData: { name?: string; email?: string; password?: string; avatar?: string }) => Promise<UserProfile | null>;setError: (error: string | null) => void;};const auth = getAuth();export const AuthContext = createContext<AuthContextProps | undefined>(undefined);export const AuthProvider = ({ children }: { children: React.ReactNode }) => {const [user, setUser] = useState<UserProfile | null>(null);const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);const [loading, setLoading] = useState<boolean>(true);const [error, setError] = useState<string | null>(null);useEffect(() => {console.log('AuthProvider effect running');console.log('Firebase auth:', auth);setLoading(true);const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {console.log('onAuthStateChanged fired, firebaseUser:', firebaseUser?.uid || null);setLoading(true);if (firebaseUser) {console.log('User detected, formatting profile');const userProfile = await formatUserProfile(firebaseUser);setUser(userProfile);setIsAuthenticated(true);} else {console.log('No user, clearing state');setUser(null);setIsAuthenticated(false);};console.log('Finally block: Setting loading to false');setLoading(false);});console.log('AuthProvider effect subscribed');return () => unsubscribe();}, []);const formatUserProfile = async (firebaseUser: any): Promise<UserProfile> => {console.log('formatUserProfile started for user:', firebaseUser.uid);const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));console.log('Firestore data fetched:', userDoc.data());const profile: UserProfile = {_id: firebaseUser.uid,;name: userDoc.data()?.name || firebaseUser.displayName || 'Unknown',;email: firebaseUser.email || '',;isAdmin: userDoc.data()?.isAdmin || false,;emailVerified: firebaseUser.emailVerified || false,;avatar: firebaseUser.photoURL || userDoc.data()?.avatar || '',;};console.log('formatUserProfile completed:', profile);return profile;};const login = async (email: string, password: string) => {try {console.log('Login attempt:', { email });const userCredential = await signInWithEmailAndPassword(auth, email, password);const firebaseUser = userCredential.user;const userProfile = await formatUserProfile(firebaseUser);setUser(userProfile);setIsAuthenticated(true);console.log('Login successful, user:', userProfile);return userProfile;} catch (err) {console.error('Login error:', err);setError(err instanceof Error ? err.message : 'Login failed');return null;};};const logout = async () => {try {await signOut(auth);setUser(null);setIsAuthenticated(false);console.log('Logout successful');} catch (err) {console.error('Logout error:', err);setError(err instanceof Error ? err.message : 'Logout failed');};};const register = async (userData: { name: string; email: string; password: string }) => {try {const userCredential = await createUserWithEmailAndPassword(auth, userData.email, userData.password);const firebaseUser = userCredential.user;await setDoc(doc(db, 'users', firebaseUser.uid), {name: userData.name,;email: userData.email,;isAdmin: false,;});const userProfile = await formatUserProfile(firebaseUser);setUser(userProfile);setIsAuthenticated(true);console.log('Register successful, user:', userProfile);return userProfile;} catch (err) {console.error('Register error:', err);setError(err instanceof Error ? err.message : 'Registration failed');return null;};};const updateProfile = async (userData: { name?: string; email?: string; password?: string; avatar?: string }) => {console.log('Update profile not implemented');return null;};return (;<AuthContext.Provider value={{ user, isAuthenticated, loading, error, login, logout, register, updateProfile, setError }}>;{children};</AuthContext.Provider>;);}
--- client/src/context/ChefContext.tsx ---
import { createContext, useState, useEffect, useCallback, useMemo, type ReactNode } from 'react';import { collection, query, orderBy, onSnapshot, doc, getDoc, type Unsubscribe } from 'firebase/firestore';import { db } from '../config/firebase';import { useAuth } from '../hooks/useAuth';import type { ChefData } from './LeagueContext';interface ChefContextProps {chefs: ChefData[];activeChefs: ChefData[];eliminatedChefs: ChefData[];loading: boolean;error: string | null;getChefById: (id: string) => Promise<ChefData>;refreshChefs: () => Promise<void>;};export const ChefContext = createContext<ChefContextProps>({chefs: [],;activeChefs: [],;eliminatedChefs: [],;loading: true,;error: null,;getChefById: async () => ({_id: '',;name: '',;bio: '',;hometown: '',;specialty: '',;image: '',;status: 'active',;eliminationWeek: null,;stats: {wins: 0,;eliminations: 0,;quickfireWins: 0,;challengeWins: 0,;totalPoints: 0;},;weeklyPerformance: [];}),;refreshChefs: async () => {},;});interface ChefProviderProps {children: ReactNode;};export function ChefProvider({ children }: ChefProviderProps) {const [chefs, setChefs] = useState<ChefData[]>([]);const [loading, setLoading] = useState<boolean>(true);const [error, setError] = useState<string | null>(null);const { isAuthenticated } = useAuth();const fetchChefs = useCallback(async (): Promise<Unsubscribe> => {try {setLoading(true);setError(null);console.log('Fetching chefs data from Firestore');const chefsQuery = query(;collection(db, 'chefs'),;orderBy('stats.totalPoints', 'desc'););const unsubscribe = onSnapshot(chefsQuery, (snapshot) => {const chefData: ChefData[] = [];snapshot.forEach(doc => {const data = doc.data();chefData.push({_id: doc.id,;name: data.name || '',;bio: data.bio || '',;hometown: data.hometown || '',;specialty: data.specialty || '',;image: data.image || '',;status: (data.status as 'active' | 'eliminated' | 'winner') || 'active',;eliminationWeek: data.eliminationWeek ?? null,;stats: data.stats || {wins: 0,;eliminations: 0,;quickfireWins: 0,;challengeWins: 0,;totalPoints: 0;},;weeklyPerformance: data.weeklyPerformance || [];});});console.log(`Loaded ${chefData.length} chefs`);setChefs(chefData);setLoading(false);setError(null);}, (err) => {console.error('Error in chefs snapshot:', err);setError('Failed to load chefs data');setLoading(false);});return unsubscribe;} catch (err) {console.error('Error setting up chefs listener:', err);setError('Failed to load chefs data');setLoading(false);return () => {}; // Return a no-op function instead of void};}, []);const getChefById = useCallback(async (id: string): Promise<ChefData> => {try {console.log(`Fetching chef by ID: ${id}`);const chefDoc = await getDoc(doc(db, 'chefs', id));if (!chefDoc.exists()) {throw new Error('Chef not found');};const data = chefDoc.data();return {_id: chefDoc.id,;name: data.name || '',;bio: data.bio || '',;hometown: data.hometown || '',;specialty: data.specialty || '',;image: data.image || '',;status: (data.status as 'active' | 'eliminated' | 'winner') || 'active',;eliminationWeek: data.eliminationWeek ?? null,;stats: data.stats || {wins: 0,;eliminations: 0,;quickfireWins: 0,;challengeWins: 0,;totalPoints: 0;},;weeklyPerformance: data.weeklyPerformance || [];};} catch (error) {console.error('Error fetching chef by ID:', error);setError('Failed to load chef details');throw error;};}, []);useEffect(() => {let unsubscribe: Unsubscribe = () => {};if (isAuthenticated) {console.log('Setting up chefs listener');fetchChefs();.then(unsub => {unsubscribe = unsub;});.catch(err => {console.error('Failed to set up chef listener:', err);setError('Failed to load chefs data');});};return () => {console.log('Cleaning up chefs listener');unsubscribe();};}, [isAuthenticated, fetchChefs]);const activeChefs = useMemo(() =>;chefs.filter(chef => chef.status === 'active'),;[chefs]);const eliminatedChefs = useMemo(() =>;chefs.filter(chef => chef.status === 'eliminated'),;[chefs]);const value = useMemo(() => ({chefs,;activeChefs,;eliminatedChefs,;loading,;error,;getChefById,;refreshChefs: async () => {await fetchChefs();};}), [chefs, activeChefs, eliminatedChefs, loading, error, getChefById, fetchChefs]);return (;<ChefContext.Provider value={value}>;{children};</ChefContext.Provider>;);}
--- client/src/context/LeagueContext.tsx ---
import { createContext, useState, type ReactNode } from 'react';import { useAuth } from '../hooks/useAuth';import { League, UseLeagueReturn } from '../types/league';export const LeagueContext = createContext<UseLeagueReturn>({leagues: [],;currentLeague: null,;chefs: [],;leaderboard: [],;challenges: [],;loading: false,;error: null,;fetchUserLeagues: async () => {},;fetchLeagueDetails: async () => {},;createLeague: async () => ({ _id: '', name: '', creator: '', season: 0, maxMembers: 0, maxRosterSize: 0, status: 'draft', inviteCode: '', scoringSettings: { quickfireWin: 0, challengeWin: 0, topThree: 0, bottomThree: 0, elimination: 0, finalWinner: 0 }, currentWeek: 0, members: [] }),;joinLeagueWithCode: async () => ({ _id: '', name: '', creator: '', season: 0, maxMembers: 0, maxRosterSize: 0, status: 'draft', inviteCode: '', scoringSettings: { quickfireWin: 0, challengeWin: 0, topThree: 0, bottomThree: 0, elimination: 0, finalWinner: 0 }, currentWeek: 0, members: [] }),;switchLeague: () => {},;updateLeague: async () => ({ _id: '', name: '', creator: '', season: 0, maxMembers: 0, maxRosterSize: 0, status: 'draft', inviteCode: '', scoringSettings: { quickfireWin: 0, challengeWin: 0, topThree: 0, bottomThree: 0, elimination: 0, finalWinner: 0 }, currentWeek: 0, members: [] }),;draftChef: async () => ({ _id: '', name: '', creator: '', season: 0, maxMembers: 0, maxRosterSize: 0, status: 'draft', inviteCode: '', scoringSettings: { quickfireWin: 0, challengeWin: 0, topThree: 0, bottomThree: 0, elimination: 0, finalWinner: 0 }, currentWeek: 0, members: [] }),;fetchChallenges: async () => [],;});interface LeagueProviderProps {children: ReactNode;};export function LeagueProvider({ children }: LeagueProviderProps) {const [leagues, setLeagues] = useState<League[]>([]);const [currentLeague, setCurrentLeague] = useState<League | null>(null);const [loading, setLoading] = useState<boolean>(false);const [error, setError] = useState<string | null>(null);const { user, isAuthenticated } = useAuth();const fetchUserLeagues = async () => {if (!isAuthenticated || !user) return;setLoading(true);const mockLeagues: League[] = [;{ _id: '1', name: 'Mock League', season: 1, status: 'draft', currentWeek: 1, maxMembers: 10, maxRosterSize: 5, members: [{ user: { _id: user._id, name: user.name || 'User' }, role: 'owner', score: 0 }] };];setLeagues(mockLeagues);setCurrentLeague(mockLeagues[0]);setLoading(false);};const fetchLeagueDetails = async (leagueId: string) => {setLoading(true);const league = leagues.find(l => l._id === leagueId) || null;setCurrentLeague(league);setLoading(false);};const createLeague = async (leagueData: Partial<League>) => {setLoading(true);const newLeague: League = {_id: Date.now().toString(),;name: leagueData.name || 'New League',;season: 1,;status: 'draft',;currentWeek: 1,;maxMembers: 10,;maxRosterSize: 5,;members: user ? [{ user: { _id: user._id, name: user.name || 'User' }, role: 'owner', score: 0 }] : [];};setLeagues(prev => [...prev, newLeague]);setCurrentLeague(newLeague);setLoading(false);return newLeague;};const joinLeagueWithCode = async (inviteCode: string) => {setLoading(true);const newLeague: League = {_id: Date.now().toString(),;name: `League ${inviteCode}`,;season: 1,;status: 'draft',;currentWeek: 1,;maxMembers: 10,;maxRosterSize: 5,;members: user ? [{ user: { _id: user._id, name: user.name || 'User' }, role: 'member', score: 0 }] : [];};setLeagues(prev => [...prev, newLeague]);setCurrentLeague(newLeague);setLoading(false);return newLeague;};const value: UseLeagueReturn = {leagues,;currentLeague,;chefs: [],;leaderboard: [],;challenges: [],;loading,;error,;fetchUserLeagues,;fetchLeagueDetails,;createLeague,;joinLeagueWithCode,;switchLeague: (leagueId: string) => setCurrentLeague(leagues.find(l => l._id === leagueId) || null),;updateLeague: async () => ({ _id: '', name: '', creator: '', season: 0, maxMembers: 0, maxRosterSize: 0, status: 'draft', inviteCode: '', scoringSettings: { quickfireWin: 0, challengeWin: 0, topThree: 0, bottomThree: 0, elimination: 0, finalWinner: 0 }, currentWeek: 0, members: [] }),;draftChef: async () => ({ _id: '', name: '', creator: '', season: 0, maxMembers: 0, maxRosterSize: 0, status: 'draft', inviteCode: '', scoringSettings: { quickfireWin: 0, challengeWin: 0, topThree: 0, bottomThree: 0, elimination: 0, finalWinner: 0 }, currentWeek: 0, members: [] }),;fetchChallenges: async () => [];};return <LeagueContext.Provider value={value}>{children}</LeagueContext.Provider>;}
--- client/src/context/SocketContext.tsx ---
import { createContext, useState, useEffect, useMemo, useCallback, useContext, type ReactNode } from 'react';import { io, type Socket } from 'socket.io-client';import { useAuth } from '../hooks/useAuth';import { auth } from '../config/firebase';let socketInstance: Socket | null = null;const hasInitialized = { current: false };export const EVENTS = {CONNECTION: 'connection',;DISCONNECT: 'disconnect',;JOIN_LEAGUE: 'join_league',;LEAVE_LEAGUE: 'leave_league',;SEND_MESSAGE: 'send_message',;CHAT_MESSAGE: 'chat_message',;CHEF_UPDATE: 'chef_update',;LEAGUE_UPDATE: 'league_update',;USER_TYPING: 'user_typing',;USER_JOINED: 'user_joined',;USER_LEFT: 'user_left',;SCORE_UPDATE: 'score_update',;} as const;interface SocketContextType {socket: Socket | null;connected: boolean;EVENTS: typeof EVENTS;joinLeague: (leagueId: string) => void;leaveLeague: (leagueId: string) => void;sendMessage: (message: any) => void;sendTyping: (leagueId: string) => void;};export const SocketContext = createContext<SocketContextType>({socket: null,;connected: false,;EVENTS,;joinLeague: () => {},;leaveLeague: () => {},;sendMessage: () => {},;sendTyping: () => {},;});interface SocketProviderProps {children: ReactNode;};export function SocketProvider({ children }: SocketProviderProps) {const [socket, setSocket] = useState<Socket | null>(socketInstance);const [connected, setConnected] = useState(false);const { user } = useAuth();useEffect(() => {console.log('SocketProvider effect running, user:', user ? user._id : 'none');if (!user?._id) {console.log('No authenticated user, not connecting to socket');if (socketInstance) {console.log('Disconnecting existing socket due to no user');socketInstance.disconnect();socketInstance = null;setSocket(null);setConnected(false);hasInitialized.current = false;};return;};if (hasInitialized.current && socketInstance?.connected) {console.log('Socket already connected, skipping initialization');setSocket(socketInstance);setConnected(true);return;};const connectSocket = async () => {try {const firebaseToken = await auth.currentUser?.getIdToken(true);if (!firebaseToken) {console.log('No Firebase token available');return;};console.log('Connecting to socket with Firebase token');const socketUrl = import.meta.env.VITE_SOCKET_URL || 'http://localhost:5000';const newSocket = io(socketUrl, {auth: { token: firebaseToken },;reconnection: true,;reconnectionAttempts: 5,;});newSocket.on('connect', () => {console.log('Socket connected');setConnected(true);});newSocket.on('disconnect', () => {console.log('Socket disconnected');setConnected(false);hasInitialized.current = false;});newSocket.on('connect_error', (error) => {console.error('Socket connection failed:', error);setConnected(false);});socketInstance = newSocket;setSocket(newSocket);hasInitialized.current = true;} catch (err) {console.error('Error connecting socket:', err);};};connectSocket();return () => {};}, [user?._id]);useEffect(() => {return () => {if (socketInstance && !user?._id) {console.log('Disconnecting socket on unmount');socketInstance.disconnect();socketInstance = null;setSocket(null);setConnected(false);hasInitialized.current = false;};};}, []); // Separate cleanup effect with no dependencies;const joinLeague = useCallback((leagueId: string) => {if (socket && connected) {console.log(`Joining league socket: ${leagueId}`);socket.emit(EVENTS.JOIN_LEAGUE, { leagueId });};}, [socket, connected]);const leaveLeague = useCallback((leagueId: string) => {if (socket && connected) {console.log(`Leaving league socket: ${leagueId}`);socket.emit(EVENTS.LEAVE_LEAGUE, { leagueId });};}, [socket, connected]);const sendMessage = useCallback((message: any) => {if (socket && connected) {console.log('Sending message via socket');socket.emit(EVENTS.SEND_MESSAGE, message);};}, [socket, connected]);const sendTyping = useCallback((leagueId: string) => {if (socket && connected) {socket.emit(EVENTS.USER_TYPING, { leagueId });};}, [socket, connected]);const value = useMemo(;() => ({socket,;connected,;EVENTS,;joinLeague,;leaveLeague,;sendMessage,;sendTyping,;}),;[socket, connected, joinLeague, leaveLeague, sendMessage, sendTyping];);return <SocketContext.Provider value={value}>{children}</SocketContext.Provider>;};export const useSocket = () => {const context = useContext(SocketContext);if (!context) {throw new Error('useSocket must be used within a SocketProvider');};return context;}
--- client/src/context/ThemeContext.tsx ---
import { createContext, useState, useEffect, type ReactNode } from 'react';interface ThemeContextProps {theme: 'light' | 'dark';toggleTheme: () => void;isDark: boolean;};export const ThemeContext = createContext<ThemeContextProps>({theme: 'light',;toggleTheme: () => {},;isDark: false;});interface ThemeProviderProps {children: ReactNode;};export function ThemeProvider({ children }: ThemeProviderProps) {const getInitialTheme = (): 'light' | 'dark' => {if (typeof window !== 'undefined' && window.localStorage) {const storedTheme = window.localStorage.getItem('theme');if (storedTheme === 'dark' || storedTheme === 'light') {return storedTheme;};const userMedia = window.matchMedia('(prefers-color-scheme: dark)');if (userMedia.matches) {return 'dark';}};return 'light';};const [theme, setTheme] = useState<'light' | 'dark'>(getInitialTheme());const toggleTheme = () => {setTheme(theme === 'dark' ? 'light' : 'dark');};useEffect(() => {localStorage.setItem('theme', theme);if (theme === 'dark') {document.documentElement.classList.add('dark');} else {document.documentElement.classList.remove('dark');};}, [theme]);const contextValue: ThemeContextProps = {theme,;toggleTheme,;isDark: theme === 'dark';};return (;<ThemeContext.Provider value={contextValue}>;{children};</ThemeContext.Provider>;);}
--- client/src/context/UserContext.tsx ---
import { createContext, useState, useEffect, useCallback, useMemo, type ReactNode } from 'react';import { doc, updateDoc, onSnapshot } from 'firebase/firestore';import { updateProfile } from 'firebase/auth';import { auth, db } from '../config/firebase';import { useAuth } from '../hooks/useAuth';interface UserProfile {_id: string;name: string;email: string;avatar?: string;isAdmin: boolean;leagues: string[];createdAt?: Date;};interface UserContextProps {userProfile: UserProfile | null;loading: boolean;error: string | null;updateUserProfile: (userData: Partial<UserProfile>) => Promise<UserProfile>;};export const UserContext = createContext<UserContextProps>({userProfile: null,;loading: true,;error: null,;updateUserProfile: async () => ({_id: '',;name: '',;email: '',;isAdmin: false,;leagues: [];});});interface UserProviderProps {children: ReactNode;};export function UserProvider({ children }: UserProviderProps) {const [userProfile, setUserProfile] = useState<UserProfile | null>(null);const [loading, setLoading] = useState<boolean>(true);const [error, setError] = useState<string | null>(null);const { user, isAuthenticated } = useAuth();useEffect(() => {let unsubscribe = () => {};if (isAuthenticated && user?._id) {try {setLoading(true);console.log('Setting up user profile listener for:', user._id);const userRef = doc(db, 'users', user._id);unsubscribe = onSnapshot(userRef, (doc) => {if (doc.exists()) {const userData = doc.data();setUserProfile({_id: doc.id,;name: userData.name || '',;email: userData.email || '',;avatar: userData.avatar || '',;isAdmin: userData.isAdmin || false,;leagues: userData.leagues || [],;createdAt: userData.createdAt?.toDate() || new Date();});console.log('User profile updated from Firestore');} else {console.log('User document does not exist in Firestore');setUserProfile(null);};setLoading(false);}, (err) => {console.error('Error in user profile snapshot:', err);setError('Failed to load user profile');setLoading(false);});} catch (err) {console.error('Error setting up user profile listener:', err);setError('Failed to load user profile');setLoading(false);};} else {setUserProfile(null);setLoading(false);};return () => {console.log('Cleaning up user profile listener');unsubscribe();};}, [isAuthenticated, user]);const updateUserProfile = useCallback(async (userData: Partial<UserProfile>): Promise<UserProfile> => {try {if (!isAuthenticated || !user?._id) {throw new Error('Not authenticated');};setLoading(true);console.log('Updating user profile:', userData);const userRef = doc(db, 'users', user._id);const updates: Record<string, any> = {};if (userData.name) updates.name = userData.name;if (userData.email) updates.email = userData.email.toLowerCase();if (userData.avatar) updates.avatar = userData.avatar;await updateDoc(userRef, updates);console.log('User profile updated in Firestore');if (userData.name && auth.currentUser) {await updateProfile(auth.currentUser, {displayName: userData.name;});console.log('Auth profile display name updated');};if (!userProfile) {throw new Error('User profile not found');};const updatedProfile = {...userProfile,;...updates;};return updatedProfile;} catch (err) {console.error('Error updating user profile:', err);setError(err instanceof Error ? err.message : 'Failed to update user profile');throw err;} finally {setLoading(false);};}, [isAuthenticated, user, userProfile]);const value = useMemo(() => ({userProfile,;loading,;error,;updateUserProfile;}), [userProfile, loading, error, updateUserProfile]);return (;<UserContext.Provider value={value}>;{children};</UserContext.Provider>;);}
--- client/src/hooks/useAuth.tsx ---
import { useContext } from 'react';import { AuthContext } from '../context/AuthContext';export interface UserProfile {_id: string;name: string;email: string;isAdmin?: boolean;emailVerified?: boolean;avatar?: string;};export interface AuthContextProps {user: UserProfile | null;isAuthenticated: boolean;loading: boolean;error: string | null;login: (email: string, password: string) => Promise<UserProfile | null>;logout: () => Promise<void>;register: (userData: { name: string; email: string; password: string }) => Promise<UserProfile | null>;updateProfile: (userData: { name?: string; email?: string; password?: string; avatar?: string }) => Promise<UserProfile | null>;resetPassword?: (email: string) => Promise<boolean>;sendVerificationEmail?: () => Promise<boolean>;verifyEmail?: (actionCode: string) => Promise<boolean>;setError: (error: string | null) => void;};export function useAuth(): AuthContextProps {const context = useContext(AuthContext);if (!context) {throw new Error('useAuth must be used within an AuthProvider');};const safeContext: AuthContextProps = {user: context.user || null,;isAuthenticated: Boolean(context.isAuthenticated),;loading: Boolean(context.loading),;error: context.error || null,;login: context.login || (async () => null),;logout: context.logout || (async () => {}),;register: context.register || (async () => null),;updateProfile: context.updateProfile || (async () => null),;setError: context.setError || (() => {}),;resetPassword: context.resetPassword,;sendVerificationEmail: context.sendVerificationEmail,;verifyEmail: context.verifyEmail;};return safeContext;}
--- client/src/hooks/useChat.tsx ---
import { useState, useEffect, useCallback } from 'react';import { useSocket } from './useSocket';import { useAuth } from './useAuth';import api from '../services/api';interface ChatMessage {_id: string;content: string;type: 'text' | 'system' | 'image';sender?: {_id: string;name: string;};createdAt: string;userId?: string;leagueId?: string;};interface TypingUser {userId: string;username: string;};interface UserEvent {userId: string;username: string;timestamp?: Date;};interface UseChatReturn {messages: ChatMessage[];loading: boolean;error: string | null;typingUsers: TypingUser[];sendMessage: (content: string, type?: string) => Promise<void>;sendTypingIndicator: () => void;refreshMessages: () => Promise<void>;};export function useChat(leagueId?: string): UseChatReturn {const [messages, setMessages] = useState<ChatMessage[]>([]);const [loading, setLoading] = useState<boolean>(true);const [error, setError] = useState<string | null>(null);const [typingUsers, setTypingUsers] = useState<TypingUser[]>([]);const { socket, connected, EVENTS, joinLeague, leaveLeague, sendMessage: socketSendMessage, sendTyping } = useSocket();const { user } = useAuth();const fetchMessages = useCallback(async () => {if (!leagueId) return;try {console.log(`Fetching messages for league: ${leagueId}`);setLoading(true);const response = await api.get(`/messages/${leagueId}`);setMessages(response.data.reverse()); // Newest messages at the bottom;setError(null);console.log(`Loaded ${response.data.length} messages`);} catch (err) {console.error('Error fetching messages:', err);setError(err instanceof Error ? err.message :;(err as any)?.response?.data?.message ?? 'Failed to load chat history');} finally {setLoading(false);};}, [leagueId]);const handleNewMessage = useCallback((message: ChatMessage) => {console.log('Received new message via socket');setMessages((prev) => [...prev, message]);setTypingUsers((prev) => prev.filter((u) => u.userId !== message.userId));}, []);const handleUserTyping = useCallback(({ userId, username }: UserEvent) => {if (userId === user?._id) return;console.log(`User typing: ${username}`);setTypingUsers((prev) => {if (!prev.some((u) => u.userId === userId)) {const newTypingUsers = [...prev, { userId, username }];setTimeout(() => {setTypingUsers((current) => current.filter((u) => u.userId !== userId));}, 3000);return newTypingUsers;};return prev;});}, [user?._id]);const handleUserJoined = useCallback(({ username }: UserEvent) => {console.log(`User joined: ${username}`);const systemMessage: ChatMessage = {_id: Date.now().toString(),;content: `${username} joined the chat`,;type: 'system',;createdAt: new Date().toISOString(),;};setMessages((prev) => [...prev, systemMessage]);}, []);const handleUserLeft = useCallback(({ userId, username }: UserEvent) => {console.log(`User left: ${username}`);const systemMessage: ChatMessage = {_id: Date.now().toString(),;content: `${username} left the chat`,;type: 'system',;createdAt: new Date().toISOString(),;};setMessages((prev) => [...prev, systemMessage]);setTypingUsers((prev) => prev.filter((u) => u.userId !== userId));}, []);useEffect(() => {if (!leagueId) return;fetchMessages();if (socket && connected) {console.log(`Setting up chat socket for league: ${leagueId}`);joinLeague(leagueId);socket.on(EVENTS.CHAT_MESSAGE, handleNewMessage);socket.on(EVENTS.USER_TYPING, handleUserTyping);socket.on(EVENTS.USER_JOINED, handleUserJoined);socket.on(EVENTS.USER_LEFT, handleUserLeft);socket.on('error', (err: Error) => setError(`Socket error: ${err.message}`));return () => {console.log(`Cleaning up chat socket for league: ${leagueId}`);leaveLeague(leagueId);socket.off(EVENTS.CHAT_MESSAGE, handleNewMessage);socket.off(EVENTS.USER_TYPING, handleUserTyping);socket.off(EVENTS.USER_JOINED, handleUserJoined);socket.off(EVENTS.USER_LEFT, handleUserLeft);socket.off('error');};};return undefined;}, [;socket,;connected,;leagueId,;fetchMessages,;handleNewMessage,;handleUserTyping,;handleUserJoined,;handleUserLeft,;EVENTS,;joinLeague,;leaveLeague;]);const sendMessage = useCallback(;async (content: string, type: string = 'text') => {if (!content || !leagueId || !user) return;console.log(`Sending message in league: ${leagueId}`);const message: ChatMessage = {_id: Date.now().toString(), // Add a temporary client-side ID;leagueId,;content,;type: type as 'text' | 'system' | 'image',;sender: {_id: user._id,;name: user.name ?? 'Unknown';},;createdAt: new Date().toISOString(),;};try {socketSendMessage(message);} catch (err) {console.error('Error sending message:', err);setError('Failed to send message');};},;[leagueId, socketSendMessage, user];);const sendTypingIndicator = useCallback(() => {if (leagueId && connected) {sendTyping(leagueId);};}, [leagueId, sendTyping, connected]);return {messages,;loading,;error,;typingUsers,;sendMessage,;sendTypingIndicator,;refreshMessages: fetchMessages,;};};export default useChat
--- client/src/hooks/useChef.tsx ---
import { useContext } from 'react';import { ChefContext } from '../context/ChefContext.js';export const useChef = () => {const context = useContext(ChefContext);if (!context) {throw new Error('useChef must be used within a ChefProvider');};return context;}
--- client/src/hooks/useLeague.d.ts ---
export interface League {_id: string;name: string;season: number;status: string;currentWeek: number;maxMembers: number;maxRosterSize: number;members: any[];};export interface LeaderboardEntry {user: {_id: string;name: string;};score: number;rosterCount: number;};export interface UseLeagueReturn {leagues: League[];currentLeague: League | null;leaderboard: LeaderboardEntry[];loading: boolean;error: string | null;fetchUserLeagues: () => Promise<any>;fetchLeagueDetails: (leagueId: string) => Promise<any>;createLeague: (leagueData: any) => Promise<any>;joinLeagueWithCode: (inviteCode: string) => Promise<any>;switchLeague: (leagueId: string) => void;updateLeague: (leagueId: string, updateData: any) => Promise<any>;}
--- client/src/hooks/useLeague.tsx ---
import { useContext } from 'react';import { LeagueContext } from '../context/LeagueContext';import type { UseLeagueReturn } from '../hooks/useLeague.d';export const useLeague = (): UseLeagueReturn => {const context = useContext(LeagueContext);if (!context) {throw new Error('useLeague must be used within a LeagueProvider');};return context;};export type { UseLeagueReturn }
--- client/src/hooks/useSocket.tsx ---
import { useContext } from 'react';import { SocketContext } from '../context/SocketContext.js';export const useSocket = () => {const context = useContext(SocketContext);if (!context) {throw new Error('useSocket must be used within a SocketProvider');};return context;}
--- client/src/hooks/useTheme.tsx ---
import { useContext } from 'react';import { ThemeContext } from '../context/ThemeContext.js';export const useTheme = () => {const context = useContext(ThemeContext);if (!context) {throw new Error('useTheme must be used within a ThemeProvider');};return context;}
--- client/src/hooks/useUserProfile.tsx ---
import { useContext } from 'react';import { UserContext } from '../context/UserContext.js';export const useUserProfile = () => {const context = useContext(UserContext);if (!context) {throw new Error('useUserProfile must be used within a UserProvider');};return context;}
--- client/src/pages/LeagueDetail.tsx ---
import { useEffect, useState, FormEvent } from 'react';import { useParams, Navigate } from 'react-router-dom';import { useLeague, UseLeagueReturn } from '../hooks/useLeague';import { useChat, UseChatReturn } from '../hooks/useChat';import { useAuth, UserProfile } from '../hooks/useAuth';import Card from '../components/ui/Card';import Button from '../components/ui/Button';interface League {_id: string;name: string;season: number;status: 'draft' | 'active' | 'completed';currentWeek: number;maxMembers: number;maxRosterSize: number;members: { user: { _id: string; name: string }; role: 'owner' | 'admin' | 'member'; score: number }[];inviteCode?: string; // Added;scoringSettings?: {challengeWin: number;quickfireWin: number;topThree: number;bottomThree: number;}; // Added};const LeagueDetail = () => {const { id } = useParams<{ id: string }>();const {leagues = [],;currentLeague = null,;leaderboard = [],;loading = false,;error = null,;fetchLeagueDetails = () => Promise.resolve(undefined),;switchLeague = () => {},;}: UseLeagueReturn = useLeague();const { user = null }: { user: UserProfile | null } = useAuth();const [activeTab, setActiveTab] = useState<'overview' | 'members' | 'settings' | 'chat'>('overview');const [chatInput, setChatInput] = useState<string>('');const [chatError, setChatError] = useState<string>('');const [localError, setLocalError] = useState<string>('');const { messages = [], sendMessage = () => Promise.resolve(), typingUsers = [] }: UseChatReturn = useChat(id);useEffect(() => {if (id) {if (!currentLeague || currentLeague._id !== id) {switchLeague(id);};fetchLeagueDetails(id).catch((err: Error) => {console.error('Fetch league details failed:', err);setLocalError('Failed to load league details. Please try again.');});};}, [id, currentLeague, fetchLeagueDetails, switchLeague]);const leagueExists = leagues.some((league) => league._id === id);if (!leagueExists && !loading) {return <Navigate to="/leagues" />;};const handleSendMessage = async (e: FormEvent<HTMLFormElement>) => {e.preventDefault();if (chatInput.trim() && id) {try {await sendMessage(chatInput.trim());setChatInput('');setChatError('');} catch (err) {console.error('Chat send error:', err);setChatError('Failed to send message. Please try again.');}};};const isLeagueAdmin = currentLeague?.members?.some(;(member) => member.user._id === user?._id && (member.role === 'owner' || member.role === 'admin'););if (loading) {return (;<div className="flex justify-center items-center h-screen">;<svg;className="animate-spin h-10 w-10 text-blue-600";xmlns="http://www.w3.org/2000/svg";fill="none";viewBox="0 0 24 24";>;<circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />;<path;className="opacity-75";fill="currentColor";d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z";/>;</svg>;</div>;);};if (error || localError) {return (;<div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg m-6">;{error || localError};</div>;);};return (;<div className="space-y-6 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen">;<div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">;<div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4">;<div>;<h1 className="text-2xl font-bold text-gray-900 dark:text-white">{currentLeague?.name || 'League'}</h1>;<p className="text-sm text-gray-600 dark:text-gray-400">;Season {currentLeague?.season || ''} • {currentLeague?.members?.length || 0} Members;</p>;</div>;<div className="flex flex-wrap gap-3">;<Button;variant="outline";size="sm";onClick={() => {if (currentLeague?.inviteCode) {navigator.clipboard;.writeText(currentLeague.inviteCode);.then(() => alert('Invite code copied!'));.catch((err) => console.error('Failed to copy:', err));};}};>;Copy Invite Code;</Button>;{isLeagueAdmin && (;<Button;variant="primary";size="sm";onClick={() => {if (currentLeague?.status === 'draft') {console.log('Starting draft...');} else {setActiveTab('settings');};}};>;{currentLeague?.status === 'draft' ? 'Start Draft' : 'Manage League'};</Button>;)};</div>;</div>;<div className="mt-4">;<span;className={`inline-block px-3 py-1 text-xs font-medium rounded-full ${currentLeague?.status === 'draft';? 'bg-yellow-100 text-yellow-800';: 'bg-green-100 text-green-800';}`};>;{currentLeague?.status || 'Unknown'} • Week {currentLeague?.currentWeek || 'N/A'};</span>;</div>;</div>;<div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm overflow-hidden">;<div className="flex border-b border-gray-200 dark:border-gray-700">;{(['overview', 'members', 'settings', 'chat'] as const).map((tab) => (;<button;key={tab};type="button";className={`flex-1 px-4 py-2 text-sm font-medium ${activeTab === tab;? 'border-b-2 border-blue-500 text-blue-500';: 'text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white';}`};onClick={() => setActiveTab(tab)};>;{tab.charAt(0).toUpperCase() + tab.slice(1)};</button>;))};</div>;<div className="p-6">;{activeTab === 'overview' && (;<div className="space-y-6">;<div className="grid grid-cols-1 md:grid-cols-3 gap-4">;<Card title="League Status">;<div className="text-3xl font-bold mb-2 capitalize">{currentLeague?.status || 'Unknown'}</div>;<p className="text-gray-600 dark:text-gray-400">;{currentLeague?.status === 'draft';? 'Draft in progress';: `Week ${currentLeague?.currentWeek || '?'} of competition`};</p>;</Card>;<Card title="Scoring System">;<div className="space-y-1 text-sm">;<div className="flex justify-between">;<span>Challenge Win</span>;<span className="font-medium">{currentLeague?.scoringSettings?.challengeWin || 20} pts</span>;</div>;<div className="flex justify-between">;<span>Quickfire Win</span>;<span className="font-medium">{currentLeague?.scoringSettings?.quickfireWin || 10} pts</span>;</div>;<div className="flex justify-between">;<span>Top Three</span>;<span className="font-medium">{currentLeague?.scoringSettings?.topThree || 5} pts</span>;</div>;<div className="flex justify-between">;<span>Bottom Three</span>;<span className="font-medium">{currentLeague?.scoringSettings?.bottomThree || -5} pts</span>;</div>;</div>;</Card>;<Card title="Invite Code">;<div className="bg-gray-100 dark:bg-gray-700 py-2 px-4 rounded-lg font-mono text-lg mb-2">;{currentLeague?.inviteCode || 'N/A'};</div>;<Button;variant="outline";size="sm";onClick={() => {if (currentLeague?.inviteCode) {navigator.clipboard;.writeText(currentLeague.inviteCode);.then(() => alert('Invite code copied!'));.catch((err) => console.error('Failed to copy:', err));};}};>;Copy to Clipboard;</Button>;</Card>;</div>;<Card title="Leaderboard">;<div className="overflow-x-auto">;<table className="min-w-full">;<thead className="border-b border-gray-200 dark:border-gray-700">;<tr>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Rank;</th>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Player;</th>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Score;</th>;<th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">;Roster Size;</th>;</tr>;</thead>;<tbody className="divide-y divide-gray-200 dark:divide-gray-700">;{leaderboard.length > 0 ? (;leaderboard.map((entry, index) => (;<tr key={entry.user._id || index} className="hover:bg-gray-50 dark:hover:bg-gray-800">;<td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">;{index + 1};</td>;<td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">;{entry.user.name || 'Unknown'};</td>;<td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">;{entry.score || 0};</td>;<td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">;{entry.rosterCount || 0} / {currentLeague?.maxRosterSize || 'N/A'};</td>;</tr>;));) : (;<tr>;<td;colSpan={4};className="px-4 py-6 text-center text-gray-500 dark:text-gray-400";>;No leaderboard data available;</td>;</tr>;)};</tbody>;</table>;</div>;</Card>;</div>;)};{activeTab === 'members' && (;<div className="space-y-6">;{currentLeague?.members && currentLeague.members.length > 0 ? (;<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">;{currentLeague.members.map((member) => (;<Card key={member.user._id || Math.random().toString()}>;<div className="flex items-center space-x-4">;<div className="w-12 h-12 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-gray-700 dark:text-gray-300 font-medium">;{member.user.name?.charAt(0) || '?'};</div>;<div>;<h3 className="font-medium text-gray-900 dark:text-white">{member.user.name || 'Unknown'}</h3>;<div className="flex items-center space-x-2 text-sm">;<span;className={`inline-block px-2 py-1 text-xs font-medium rounded-full ${member.role === 'owner' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800';}`};>;{member.role || 'member'};</span>;<span className="text-gray-600 dark:text-gray-400">Score: {member.score || 0}</span>;</div>;</div>;</div>;</Card>;))};</div>;) : (;<div className="text-center py-6">;<p className="text-gray-500 dark:text-gray-400">No members in this league yet.</p>;</div>;)};</div>;)};{activeTab === 'settings' && (;<div className="space-y-6">;<Card title="League Settings">;<p className="text-gray-600 dark:text-gray-400 mb-4">;Only league owners and admins can modify league settings.;</p>;<form;onSubmit={(e) => {e.preventDefault();console.log('Settings form submitted');}};>;<div className="grid grid-cols-1 md:grid-cols-2 gap-4">;<div>;<label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">;League Name;</label>;<input;type="text";defaultValue={currentLeague?.name || ''};readOnly={!isLeagueAdmin};className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300";/>;</div>;<div>;<label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">;Season;</label>;<input;type="number";defaultValue={currentLeague?.season || ''};readOnly={!isLeagueAdmin};className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300";/>;</div>;<div>;<label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">;Max Members;</label>;<input;type="number";defaultValue={currentLeague?.maxMembers || ''};readOnly={!isLeagueAdmin};className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300";/>;</div>;<div>;<label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">;Max Roster Size;</label>;<input;type="number";defaultValue={currentLeague?.maxRosterSize || ''};readOnly={!isLeagueAdmin};className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300";/>;</div>;</div>;<Button type="submit" variant="primary" className="mt-6" disabled={!isLeagueAdmin}>;Update Settings;</Button>;</form>;</Card>;<Card title="Danger Zone" className="border border-red-300 dark:border-red-700">;<p className="text-gray-600 dark:text-gray-400 mb-4">;These actions cannot be undone. Please be certain.;</p>;<Button;variant="danger";type="button";onClick={() => {if (window.confirm('Are you sure you want to leave this league?')) {console.log('User confirmed leaving league');};}};>;Leave League;</Button>;</Card>;</div>;)};{activeTab === 'chat' && (;<div className="space-y-6">;{chatError && (;<div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-3 rounded-lg">;{chatError};</div>;)};<div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 h-96 overflow-y-auto flex flex-col space-y-4">;{messages.length > 0 ? (;messages.map((message) => (;<div key={message._id || Math.random().toString()} className="flex flex-col">;<div className="flex items-center space-x-2">;<div className="font-medium text-gray-900 dark:text-white">;{message.sender?.name || 'Unknown'};</div>;<div className="text-xs text-gray-500 dark:text-gray-400">;{message.createdAt ? new Date(message.createdAt).toLocaleTimeString() : ''};</div>;</div>;<div className="pl-6 text-gray-700 dark:text-gray-300">{message.content || ''}</div>;</div>;));) : (;<div className="text-center py-6 text-gray-500 dark:text-gray-400">;No messages yet. Start the conversation!;</div>;)};{typingUsers.length > 0 && (;<div className="text-gray-500 dark:text-gray-400 text-sm">;{typingUsers.length === 1;? `${typingUsers[0].username || 'Someone'} is typing...`;: `${typingUsers.length} people are typing...`};</div>;)};</div>;<form onSubmit={handleSendMessage} className="flex gap-2">;<input;type="text";className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white";placeholder="Type a message...";value={chatInput};onChange={(e) => setChatInput(e.target.value)};/>;<Button type="submit" variant="primary" disabled={!chatInput.trim()}>;<svg;xmlns="http://www.w3.org/2000/svg";className="h-5 w-5";viewBox="0 0 20 20";fill="currentColor";>;<path;fillRule="evenodd";d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z";clipRule="evenodd";/>;</svg>;</Button>;</form>;</div>;)};</div>;</div>;</div>;);};export default LeagueDetail
--- client/src/pages/Leagues.tsx ---
import React, { useEffect, useState } from 'react';import { Link } from 'react-router-dom';import { useLeague } from '../hooks/useLeague.jsx';import Card from '../components/ui/Card.jsx';import Button from '../components/ui/Button.jsx';import Input from '../components/ui/Input.jsx';const Leagues = () => {const { leagues, loading, error, fetchUserLeagues, createLeague, joinLeagueWithCode } = useLeague();const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);const [isJoinModalOpen, setIsJoinModalOpen] = useState(false);const [joinCode, setJoinCode] = useState('');const [newLeague, setNewLeague] = useState({name: '',;season: 22,;maxMembers: 10,;maxRosterSize: 5;});const [formError, setFormError] = useState('');const [isSubmitting, setIsSubmitting] = useState(false);useEffect(() => {fetchUserLeagues();}, [fetchUserLeagues]);const handleCreateSubmit = async (e) => {e.preventDefault();setFormError('');if (!newLeague.name) {setFormError('Please provide a league name');return;};try {setIsSubmitting(true);await createLeague(newLeague);setIsCreateModalOpen(false);setNewLeague({name: '',;season: 22,;maxMembers: 10,;maxRosterSize: 5;});} catch (err) {console.error('Error creating league:', err);setFormError(err.response?.data?.message || 'Failed to create league');} finally {setIsSubmitting(false);};};const handleJoinSubmit = async (e) => {e.preventDefault();setFormError('');if (!joinCode) {setFormError('Please provide an invite code');return;};try {setIsSubmitting(true);await joinLeagueWithCode(joinCode);setIsJoinModalOpen(false);setJoinCode('');} catch (err) {console.error('Error joining league:', err);setFormError(err.response?.data?.message || 'Failed to join league');} finally {setIsSubmitting(false);};};return (;<div className="space-y-6">;<div className="flex justify-between items-center">;<h1 className="text-2xl font-bold text-gray-900 dark:text-white">My Leagues</h1>;<div className="flex space-x-3">;<Button;variant="outline";onClick={() => setIsJoinModalOpen(true)};>;Join League;</Button>;<Button;variant="primary";onClick={() => setIsCreateModalOpen(true)};>;Create League;</Button>;</div>;</div>;{error && (;<div className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 p-4 rounded-lg">;{error};</div>;)};{loading ? (;<div className="flex justify-center items-center py-12">;<svg className="animate-spin h-10 w-10 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">;<circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>;<path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>;</svg>;</div>;) : leagues.length > 0 ? (;<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">;{leagues.map((league) => (;<Card;key={league._id};className="card-hover";padding="none";>;<Link to={`/leagues/${league._id}`} className="block">;<div className="p-6 border-b border-gray-200 dark:border-gray-700">;<h3 className="text-lg font-semibold text-gray-900 dark:text-white">;{league.name};</h3>;<p className="text-sm text-gray-600 dark:text-gray-400">;Season {league.season};</p>;</div>;<div className="px-6 py-4">;<div className="grid grid-cols-2 gap-4">;<div>;<span className="text-xs text-gray-600 dark:text-gray-400">Status</span>;<p className="font-medium capitalize">{league.status}</p>;</div>;<div>;<span className="text-xs text-gray-600 dark:text-gray-400">Current Week</span>;<p className="font-medium">Week {league.currentWeek}</p>;</div>;<div>;<span className="text-xs text-gray-600 dark:text-gray-400">Members</span>;<p className="font-medium">{league.members?.length || 0} / {league.maxMembers}</p>;</div>;<div>;<span className="text-xs text-gray-600 dark:text-gray-400">Roster Size</span>;<p className="font-medium">{league.maxRosterSize} chefs</p>;</div>;</div>;</div>;<div className="px-6 py-4 bg-gray-50 dark:bg-gray-700/30 rounded-b-xl">;<div className="flex justify-between items-center">;<div className="text-sm text-gray-600 dark:text-gray-400">;Created {new Date(league.createdAt).toLocaleDateString()};</div>;<div className="text-sm font-medium text-primary-600 dark:text-primary-400">;View League &rarr;</div>;</div>;</div>;</Link>;</Card>;))};</div>;) : (;<div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-xl">;<h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">;No leagues yet;</h3>;<p className="text-gray-600 dark:text-gray-400 mb-6">;Create a new league or join an existing one.;</p>;<div className="flex justify-center space-x-4">;<Button;variant="outline";onClick={() => setIsJoinModalOpen(true)};>;Join League;</Button>;<Button;variant="primary";onClick={() => setIsCreateModalOpen(true)};>;Create League;</Button>;</div>;</div>;)};{isCreateModalOpen && (;<div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">;<div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-md">;<div className="p-6">;<div className="flex justify-between items-center mb-6">;<h2 className="text-xl font-bold text-gray-900 dark:text-white">Create New League</h2>;<button;onClick={() => setIsCreateModalOpen(false)};className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none";>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />;</svg>;</button>;</div>;{formError && (;<div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">;{formError};</div>;)};<form onSubmit={handleCreateSubmit}>;<Input;label="League Name";id="name";placeholder="Enter league name";value={newLeague.name};onChange={(e) => setNewLeague({...newLeague, name: e.target.value})};required;/>;<div className="grid grid-cols-2 gap-4">;<Input;label="Season";id="season";type="number";min="1";placeholder="Season number";value={newLeague.season};onChange={(e) => setNewLeague({...newLeague, season: parseInt(e.target.value)})};required;/>;<Input;label="Max Members";id="maxMembers";type="number";min="2";max="20";placeholder="Maximum members";value={newLeague.maxMembers};onChange={(e) => setNewLeague({...newLeague, maxMembers: parseInt(e.target.value)})};required;/>;</div>;<Input;label="Max Roster Size";id="maxRosterSize";type="number";min="1";max="10";placeholder="Chefs per roster";value={newLeague.maxRosterSize};onChange={(e) => setNewLeague({...newLeague, maxRosterSize: parseInt(e.target.value)})};required;/>;<div className="mt-6 flex justify-end space-x-3">;<Button;type="button";variant="outline";onClick={() => setIsCreateModalOpen(false)};>;Cancel;</Button>;<Button;type="submit";variant="primary";isLoading={isSubmitting};>;Create League;</Button>;</div>;</form>;</div>;</div>;</div>;)};{isJoinModalOpen && (;<div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">;<div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-md">;<div className="p-6">;<div className="flex justify-between items-center mb-6">;<h2 className="text-xl font-bold text-gray-900 dark:text-white">Join a League</h2>;<button;onClick={() => setIsJoinModalOpen(false)};className="p-1 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none";>;<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">;<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />;</svg>;</button>;</div>;{formError && (;<div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 rounded-lg">;{formError};</div>;)};<form onSubmit={handleJoinSubmit}>;<Input;label="Invite Code";id="inviteCode";placeholder="Enter the league invite code";value={joinCode};onChange={(e) => setJoinCode(e.target.value)};required;/>;<div className="mt-6 flex justify-end space-x-3">;<Button;type="button";variant="outline";onClick={() => setIsJoinModalOpen(false)};>;Cancel;</Button>;<Button;type="submit";variant="primary";isLoading={isSubmitting};>;Join League;</Button>;</div>;</form>;</div>;</div>;</div>;)};</div>;);};export default Leagues
--- client/src/pages/Login.tsx ---
import { useState } from 'react';import { useAuth } from '../hooks/useAuth';import { useNavigate } from 'react-router-dom';function Login() {const [email, setEmail] = useState('');const [password, setPassword] = useState('');const [error, setError] = useState<string | null>(null);const { login } = useAuth();const navigate = useNavigate();const handleSubmit = async (e: React.FormEvent) => {e.preventDefault();try {console.log('Attempting login with:', { email, password });const user = await login(email, password);console.log('Login successful:', !!user, 'User:', user);if (user) {navigate('/');};} catch (err) {console.error('Login failed:', err);setError(err instanceof Error ? err.message : 'Login failed');};};return (;<div>;<h1>Login</h1>;{error && <div>{error}</div>};<form onSubmit={handleSubmit}>;<div>;<label>Email</label>;<input;type="email";value={email};onChange={(e) => setEmail(e.target.value)};placeholder="Enter your email";required;/>;</div>;<div>;<label>Password</label>;<input;type="password";value={password};onChange={(e) => setPassword(e.target.value)};placeholder="Enter your password";required;/>;</div>;<button type="submit">Login</button>;</form>;</div>;);};export default Login
--- client/src/pages/NotFound.tsx ---
import { Link } from 'react-router-dom';import Button from '../components/ui/Button.jsx';const NotFound = () => {return (;<div className="min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col items-center justify-center p-4">;<div className="text-center">;<h1 className="text-9xl font-display font-bold text-primary-600 dark:text-primary-500">404</h1>;<p className="text-2xl font-semibold text-gray-800 dark:text-gray-200 mt-4">Page Not Found</p>;<p className="text-gray-600 dark:text-gray-400 mt-2 max-w-md mx-auto">;The page you are looking for might have been removed, had its name changed, or is temporarily unavailable.;</p>;<div className="mt-8">;<Link to="/">;<Button variant="primary" size="lg">;Back to Home;</Button>;</Link>;</div>;</div>;</div>;);};export default NotFound